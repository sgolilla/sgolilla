create or replace PROCEDURE       ERROR_ADDR_ENC
(
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL      -- INFA 워크플로우실행ID
  , I_SESSION_NAME     VARCHAR2  DEFAULT NULL      -- INFA 세션명
  , I_PARAM3           VARCHAR2  DEFAULT NULL      -- NULL
  , I_PARAM4           VARCHAR2  DEFAULT NULL      -- NULL
  , I_PARAM5           VARCHAR2  DEFAULT NULL      -- NULL
  , I_PARAM6           VARCHAR2  DEFAULT NULL      -- NULL
  , I_PARAM7           VARCHAR2  DEFAULT NULL      -- NULL
  , I_PARAM8           VARCHAR2  DEFAULT NULL      -- NULL
)
AS 

    V_ERR_CODE NUMBER; 
    V_ERR_MSG VARCHAR2(1000); 

	V_TABLE_NAME VARCHAR2(30); 
    V_ADDR_COL_NM VARCHAR2(30); 

	V_SQL VARCHAR2(4000); 
	V_DOMAIN_NAME VARCHAR2(50); 
	V_START_DATE DATE; 
	V_PROC_START_DATE DATE; 
	V_INDEX NUMBER; 
	V_COUNT NUMBER; 
	
BEGIN 

	V_TABLE_NAME        := 'ADDR_DEC_TEST';
	V_START_DATE        := SYSDATE; 
	V_PROC_START_DATE   := SYSDATE; 
	V_INDEX := 1; 

	LOOP 
	
		V_START_DATE := SYSDATE; 

		UPDATE /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ ADDR_DEC_TEST A 
		   SET ADDR_U8_DEC = FN_ADDR_DEC (ADDR_U8) 
		 WHERE ADDR_U8_DEC IS NULL
		   AND ROWNUM <= 50000
		; 

		V_COUNT := SQL%ROWCOUNT; 

        INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG) 
		VALUES 
		(V_DOMAIN_NAME, V_TABLE_NAME, 'DEC_'||V_INDEX, 0, V_COUNT, V_PROC_START_DATE, V_START_DATE, SYSDATE, 'SUCCESS', NULL, NULL) ; 

		COMMIT; 
		V_INDEX := V_INDEX + 1; 
		
		EXIT WHEN V_COUNT = 0; 
	
	END LOOP;  

	COMMIT; 
	
EXCEPTION 
    WHEN others THEN 
      V_ERR_CODE := sqlcode; 
      V_ERR_MSG  := SUBSTR(sqlerrm, 1, 200); 
	  
      INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG) 
      VALUES 
      (V_DOMAIN_NAME, V_TABLE_NAME, V_ADDR_COL_NM, V_COUNT, 0, SYSDATE, V_START_DATE, SYSDATE, 'ERROR', V_ERR_CODE, V_ERR_MSG) ; 
	  COMMIT; 
	  RETURN; 
END;

-----------------------------
create or replace PROCEDURE GUGUDAN_EX (
    V_DAN NUMBER,
	V_NUM NUMBER
)
IS		--변수 없어도 필수
BEGIN 
	FOR I IN 1..V_DAN 
	LOOP
	DBMS_OUTPUT.PUT_LINE('*** '||I||'단 ***'||CHR(13));
		FOR J IN 1..V_NUM -- 알아서 +1됨, J:= J+1 X
		LOOP
			DBMS_OUTPUT.PUT_LINE(I||'*'||J||' = '||I*J);			
			EXIT WHEN J>=V_NUM;						
		END LOOP;
	END LOOP;
END;
---------------------------------
create or replace PROCEDURE       LJH_SRC_TMP (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   
BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
   
   /* ------------------ ERR LOG ----------------------
    -- DROP TABLE ERR$TABLE_NAME PURGE;
    -- CALL DBMS_ERRLOG.CREATE_ERROR_LOG('TRG_TABLE_NAME', 'ERR$TABLE_NAME');
    -- LOG ERRORS INTO ERR$TABLE_NAME REJECT LIMIT UNLIMITED
   ------------------------------------------------ */
   /* ------------------ 초기적재 -------------------- */

   /* ------------------ 이행로직 -------------------- */

SELECT A.OWNER, A.NAME, A.LINE, A.TEXT
     , CASE WHEN LINE = 1
            THEN 'CREATE OR REPLACE '||REPLACE(REPLACE(A.TEXT,CHR(10)),CHR(13))
            WHEN LINE = (SELECT MAX(LINE) FROM ALL_SOURCE X WHERE A.OWNER = X.OWNER AND A.NAME = X.NAME GROUP BY NAME)
            THEN REPLACE(REPLACE(A.TEXT,CHR(10)),CHR(13))||CHR(13)||'/'
            ELSE REPLACE(REPLACE(A.TEXT,CHR(10)),CHR(13))
       END AS MODIFY_TEXT
FROM   ALL_SOURCE A
WHERE  1 = 1
AND    OWNER = 'MIG03'  /* <------오너 확인 필요 ----*/
AND    NAME IN
      (
       SELECT X.SESSION_NAME
       FROM   MIG_INFA_SESS_CONFIG X
       WHERE  1=1
       --AND    X.WORKFLOW_ID > 0
       AND    X.SUBJECT_AREA = 'U01.TRN_HPS_01'
       --AND    X.WORKFLOW_NAME = 'wf_HPAS_MIG_MAIN_JOB2'
      )
;

WHERE  TOBE_TAB = 'TBL_MONTHLY_FINREV_COMP'
--AND    VRFC_NM = '내부참조번호구분코드: HMS.TBL_META_CODE_ITEM@DL_DICR.CODE_ID = 60101'
AND   VRFC_GBN = '유효값검증'
AND    VRFC_DT >= TO_DATE('20210120180000', 'YYYYMMDDHH24MISS')
ORDER BY VRFC_DT DESC
;


   /* --------------- 작업로그( END ) --------------- */
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   
EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   /* --------------- 오류로그( END ) --------------- */
   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
   
END LJH_SRC_TMP;
----------------------------

create or replace PROCEDURE       MIG_COPY_TABLE(
	I_SRV IN VARCHAR2 DEFAULT 'LOCAL',
	S_ONAME IN VARCHAR2,
	S_TNAME IN VARCHAR2,
	T_ONAME IN VARCHAR2,
	T_TNAME IN VARCHAR2,
	I_WHERE IN VARCHAR2 DEFAULT NULL,
	I_TRUNC IN BOOLEAN DEFAULT FALSE,
	I_BACKUP IN BOOLEAN DEFAULT FALSE
) IS
	/*
	------------------------------------
	2020.08.06 : B2EN. KIM SUNGMIN
	------------------------------------
	EXEC MIG_COPY_TABLE('PROD/DEV/LOCAL', 'SOURCE_SCHEMA', 'SOURCE_TABLE', 'TARGET_SCHEMA', 'TARGET_TABLE', 'CONDITION', FALSE, FALSE);
	------------------------------------
	LOG TABLE : MIG_COPY_LOG
	------------------------------------
	*/
	CURSOR C2 IS
	WITH TT AS 
	(
	SELECT  T1.COLUMN_NAME, ROWNUM AS COLUMN_ID, T1.DATA_TYPE, T1.DATA_LENGTH, T1.DATA_SCALE, T1.DATA_PRECISION
	FROM
			(
			SELECT  /*+ MATERIALIZE */
			        T.COLUMN_NAME, T.COLUMN_ID, T.DATA_TYPE, T.DATA_LENGTH, T.DATA_SCALE, T.DATA_PRECISION
			FROM    ALL_TAB_COLUMNS T /* TARGET */
				  , (
					SELECT  COLUMN_NAME, COLUMN_ID, DATA_TYPE,
					        DATA_LENGTH, DATA_SCALE, DATA_PRECISION
					FROM    ALL_TAB_COLUMNS@DL_DVRF
					WHERE   1 = 1
					AND     UPPER(I_SRV) = 'DVRF'
					AND     OWNER = UPPER(S_ONAME)
					AND     TABLE_NAME = UPPER(S_TNAME)
	                AND     DATA_TYPE NOT LIKE '%LOB'
--					UNION ALL
--					SELECT  COLUMN_NAME, COLUMN_ID, DATA_TYPE,
--					        DATA_LENGTH, DATA_SCALE, DATA_PRECISION
--					FROM    ALL_TAB_COLUMNS@DL_DVRF
--					WHERE   1 = 1
--					WHERE   UPPER(I_SRV) = 'DVRF'
--					AND     OWNER = UPPER(S_ONAME)
--					AND     TABLE_NAME = UPPER(S_TNAME)
--	                AND     DATA_TYPE NOT LIKE '%LOB'
			        ) S
			WHERE   1 = 1
			AND     T.COLUMN_NAME = S.COLUMN_NAME
			AND     T.OWNER = UPPER(T_ONAME)
			AND     T.TABLE_NAME = UPPER(T_TNAME)
			AND     T.DATA_TYPE NOT LIKE '%LOB'
			ORDER BY T.COLUMN_ID
			) T1
	WHERE   1 = 1
	)
	SELECT 'DECLARE' FROM DUAL UNION ALL
	SELECT 'V_SEQ NUMBER(10) := MIG_SEQ_COPY_TABLE.NEXTVAL;' FROM DUAL UNION ALL
	SELECT 'V_NUM NUMBER(10) := 0;' FROM DUAL UNION ALL
	SELECT 'V_ERR VARCHAR2(4000);' FROM DUAL UNION ALL
	SELECT 'TYPE T_'||COLUMN_NAME||' IS TABLE OF '
	     ||DATA_TYPE
		 ||CASE WHEN DATA_TYPE LIKE '%CHAR%' THEN '('||TO_CHAR(DATA_LENGTH)||')'
		        WHEN DATA_TYPE = 'NUMBER' AND DATA_SCALE > 0 THEN '('||TO_CHAR(DATA_PRECISION)||','||TO_CHAR(DATA_SCALE)||')'
				WHEN DATA_TYPE = 'NUMBER' AND DATA_SCALE = 0 THEN '('||NVL(TO_CHAR(DATA_PRECISION), TO_CHAR(DATA_LENGTH))||')'
		   END
		 ||' INDEX BY PLS_INTEGER; V_'||COLUMN_NAME||' T_'||COLUMN_NAME||';'
	FROM   TT UNION ALL
	--CREATE CURSOR
	SELECT 'CURSOR C1 IS SELECT' FROM DUAL UNION ALL
	SELECT DECODE(COLUMN_ID,1,'',',')||COLUMN_NAME FROM TT UNION ALL
--------------------------------------------------------------------------------------------------------------
	SELECT 'FROM '||UPPER(S_ONAME)||'.'||UPPER(S_TNAME)||'@'||DECODE(UPPER(I_SRV),'DVRF', 'DL_DVRF','')
	FROM   DUAL WHERE UPPER(I_SRV) IN ('DVRF') UNION ALL
--------------------------------------------------------------------------------------------------------------
	SELECT 'FROM '||UPPER(S_ONAME)||'.'||UPPER(S_TNAME) FROM DUAL WHERE UPPER(I_SRV) = 'LOCAL' UNION ALL
	
	SELECT DECODE(I_WHERE, NULL, ';', 'T1 WHERE '||I_WHERE||';') FROM DUAL UNION ALL
	--BEGIN
	SELECT 'BEGIN' FROM DUAL UNION ALL
	--MAKE LOG
	SELECT 'INSERT INTO MIG_COPY_LOG VALUES(V_SEQ, '''||UPPER(I_SRV)||''', TO_DATE('''||TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')||''',''YYYYMMDDHH24MISS'',NULL,'''||UPPER(S_ONAME)||''','''||UPPER(S_TNAME)||''','''||UPPER(T_ONAME)||''','''||UPPER(T_TNAME)||''','''||REPLACE(I_WHERE,'''','')||''',NULL,NULL);' FROM DUAL UNION ALL

	SELECT 'DBMS_APPLICATION_INFO.SET_MODULE('''||UPPER(S_TNAME)||'->'||UPPER(T_TNAME)||''',''START'');' FROM DUAL UNION ALL
	SELECT 'OPEN C1;' FROM DUAL UNION ALL
	SELECT 'LOOP' FROM DUAL UNION ALL
	--ARRAY FETCH
	SELECT 'FETCH C1 BULK COLLECT INTO ' FROM DUAL;
	

	V_TEMP VARCHAR2(4000);
	V_SQLT CLOB;
	V_ERR VARCHAR2(4000);
	
BEGIN

dbms_output.put_line('ARG-->' ||UPPER(I_SRV)||'-'||UPPER(S_ONAME)||'-'||UPPER(S_TNAME)||'-'||UPPER(T_ONAME)||'-'||UPPER(T_TNAME)||'-'||UPPER(I_WHERE));

	IF (UPPER(I_SRV) IN ('LOCAL', 'DVRF')) THEN


		V_SQLT := NULL;
		
		OPEN C2;
		LOOP
			FETCH C2 INTO V_TEMP;
			EXIT WHEN C2%NOTFOUND;
			V_SQLT := V_SQLT ||' '|| V_TEMP;

	dbms_output.put_line(V_TEMP);

		END LOOP;
		CLOSE C2;

		EXECUTE IMMEDIATE V_SQLT;
	
	END IF;
	
EXCEPTION
	WHEN OTHERS THEN
	BEGIN
		V_ERR := SQLERRM;
		
dbms_output.put_line('V_ERR --> ' || V_ERR);

		INSERT INTO MIG_COPY_LOG
		VALUES(MIG_SEQ_COPY_TABLE.NEXTVAL, UPPER(I_SRV), SYSDATE, SYSDATE, UPPER(S_ONAME), UPPER(S_TNAME), UPPER(T_ONAME), UPPER(T_TNAME), I_WHERE, NULL, SUBSTR(V_ERR, 1, 400));
		COMMIT;
	END;
	
END MIG_COPY_TABLE;
--------------------------------------------
create or replace PROCEDURE       MIG_DROP_JOB(
	I_JOB_NAME	IN VARCHAR2
)
IS
BEGIN

	IF I_JOB_NAME IS NOT NULL THEN
		FOR C1 IN (SELECT JOB_NAME
		           FROM   USER_SCHEDULER_JOBS J
				   WHERE  1 = 1
--				   AND    J.OWNER = ''
				   AND    J.JOB_NAME LIKE '%'||I_JOB_NAME||'%'
--				   ORDER BY CASE WHEN JOB_NAME LIKE 'JOB_MAIN%' THEN 1 ELSE 2 END
		)
		LOOP
			DBMS_SCHEDULER.DROP_JOB(JOB_NAME => C1.JOB_NAME, FORCE => TRUE);
			DBMS_OUTPUT.PUT_LINE(C1.JOB_NAME||'-> DROP!');
		END LOOP;
		
	ELSE
		DBMS_OUTPUT.PUT_LINE('PARAM ERR!');
	END IF;
	
END;
-----------------------------------
create or replace PROCEDURE       MIG_ETL_TBL_BACBCSPAHT (
TABLE_NAME IN VARCHAR2
)
IS                                                                                                                        
                                                                 
BEGIN                                                                                                                     

    /* ---------------MIG_PGM_CRE_LOGIC-------------- */                                                                  
                                                                                                                          
                                                                                                                          
INSERT INTO MAPKEY_TBL_BACPDWDPCT
SELECT A.*
FROM MIG02.MAPKEY_TBL_BACPDWDPCT@DL_PDNA A
;
                                                                                                                          
COMMIT;                                                                                                                          
			                                 		 
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             
                                                                                                                          
    /* ------------- 오류로그(END  ) ------------- */                                                                     	 
                                                                                                                                                                                                                                        
                                                                                                                          
END;
-------------------------------
create or replace PROCEDURE        MIG_JOB(
	 V_PKG	VARCHAR2,
	 V_RUN_PRC	VARCHAR2,
	 V_TIME	DATE	DEFAULT	SYSTIMESTAMP + (5/24/60/60),
	 V_NODE	NUMBER	DEFAULT 1
)
AUTHID CURRENT_USER IS
	 V_JOB_NAME	VARCHAR2(1000);

BEGIN

	 DBMS_SCHEDULER.CREATE_JOB(
	 JOB_NAME => 'JOB_RUNNER_'||V_PKG,
	 JOB_TYPE => 'PLSQL_BLOCK',
	 JOB_ACTION => 'BEGIN '||V_RUN_PRC||'; END;',
	 START_DATE => V_TIME, 
	 ENABLED => TRUE,
	 AUTO_DROP => TRUE);
	
	 SELECT NVL(MAX(JOB_NAME||'-'||STATE),'NULL') INTO V_JOB_NAME FROM USER_SCHEDULER_JOBS WHERE JOB_NAME = 'JOB_RUNNER_'||V_PKG;
	 DBMS_OUTPUT.PUT_LINE('JOB_STATS ==> '||V_JOB_NAME);
	
--	 IF		V_NODE = 1 THEN DBMS_SCHEDULER.SET_ATTRIBUTE('JOB_RUNNER_'||V_PKG, 'instance_id', 1);
--	 ELSIF 	V_NODE = 2 THEN DBMS_SCHEDULER.SET_ATTRIBUTE('JOB_RUNNER_'||V_PKG, 'instance_id', 2);
--	 ELSIF 	V_NODE = 3 THEN DBMS_SCHEDULER.SET_ATTRIBUTE('JOB_RUNNER_'||V_PKG, 'instance_id', 3);
--	 END IF;

END;
---------------------------
create or replace PROCEDURE       MIG_PRC_   MAPKEY_TBL_SVPPRCDVOC (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;

BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, 21);
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
   
   /* ------------------ 이행로직 -------------------- */

MIG_PRC_TRUNCATE('   MAPKEY_TBL_SVPPRCDVOC');

INSERT /*+ APPEND PARALLEL(T 4) */ INTO    MAPKEY_TBL_SVPPRCDVOC T
(
      ASIS_TAB
    , POLY_NO
    , DVDN_KIND_CODE
    , DVDN_OCCR_YM
    , DVDD_OCRN_SUID
    , CRET_DTTM
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
       'TB_PADVDPRC'          AS ASIS_TAB        /* ASIS테이블 */
     , POLY_NO                AS POLY_NO         /* 증권번호 */
     , DVDN_KIND_CODE         AS DVDN_KIND_CODE  /* 배당종류코드 */
     , DVDN_OCCR_YM           AS DVDN_OCCR_YM    /* 배당발생년월 */
     , 100000000000 + ROWNUM  AS DVDD_OCRN_SUID  /* 배당금발생SUID */
     , SYSDATE 
  FROM TB_PADVDPRC PARTITION (VALID) A /* 배당금발생내역 */
;


   /* --------------- 작업로그( END ) --------------- */
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   
EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   /* --------------- 오류로그( END ) --------------- */
   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
   
END MIG_PRC_   MAPKEY_TBL_SVPPRCDVOC;
----------------------

create or replace PROCEDURE       MIG_PRC_ALL_VER_TBL_SVPPRCDVOC (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;

BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 17, 14);
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
   
   /* ------------------ 값검증 -------------------- */

DELETE FROM MIG_DATA_VRFCNTN_SVP
WHERE VRFC_GBN = '값검증'
AND TOBE_TAB = V_TABLE_NAME;

COMMIT;
              
              
INSERT INTO MIG_DATA_VRFCNTN_SVP
SELECT NVL((SELECT MAX(SEQ_NO) + 1 FROM MIG_DATA_VRFCNTN_SVP), 1) AS SEQ_NO 
     , '값검증'                                                 AS VRFC_GBN
     , '배당금발생 테이블 값검증'                                AS VRFC_NM
     , SYSDATE                                                    AS VRFC_DT
     , 'TBL_SVPPRCDVOC'                          AS TOBE_TAB
     , 'DVDN_PRCP'                    AS TOBE_COL
     , ASIS_VAL                                                   AS ASIS_VAL
     , TOBE_VAL                                                   AS TOBE_VAL
     , GRP_NO                                                       AS GRP_NO
     , NULL                                                       AS BREAK_ASIS1
     , NULL                                                       AS BREAK_TOBE1
     , NULL                                                       AS BREAK_ASIS2
     , NULL                                                       AS BREAK_TOBE2
     , NULL                                                       AS BREAK_ASIS3
     , NULL                                                       AS BREAK_TOBE3
  FROM ( 
         SELECT GRP_NO
              , SUM(ASIS_VAL) AS ASIS_VAL
              , SUM(TOBE_VAL) AS TOBE_VAL
           FROM (
                    SELECT 1        AS GRP_NO
                         , SUM(NVL(DVDN_PRCP, 0)) AS ASIS_VAL
                         , 0        AS TOBE_VAL
                      FROM TB_PADVDPRC PARTITION (VALID) A
                INNER JOIN MIG_SET_PLCY_NO P
                        ON P.POLY_NO = A.POLY_NO
                  UNION ALL    
                    SELECT 1        AS GRP_NO
                         , SUM(NVL(DVDN_PRCP, 0)) AS ASIS_VAL
                         , 0        AS TOBE_VAL
                      FROM (
                            WITH TB_PADVDPAD_TMP AS (
                            SELECT /*+ FULL(A) PARALLEL(A,4) FULL(B) PARALLEL(B,4)
                                       USE_HASH(A,B) PQ_DISTRIBUTE(B NONE NONE)
                                    */
                                   A.POLY_NO
                                  ,A.DVDN_KIND_CODE
                                  ,A.ACCU_PIAT
                                  ,TO_DATE(A.PAYM_DATE, 'YYYYMMDD')        AS PAYM_DATE
                                  ,A.LPAY_APPR_YM
                              FROM TB_PADVDPAD A
                                  ,TB_PABEFMAS B
                             WHERE 1= 1  /*   A.POLY_NO = '280478'  테스트 증번 */
                               AND A.PAYM_DLNG_NO   = B.PAYM_DLNG_NO
                               AND A.POLY_NO        = B.POLY_NO
                               AND B.CNCL_DATE      IS NULL
                               AND A.VALD_DVSN_CODE =  '1'
                               AND A.VALD_DVSN_CODE = B.VALD_DVSN_CODE
                               AND TO_DATE(A.PAYM_DATE DEFAULT NULL ON CONVERSION ERROR , 'YYYYMMDD') IS NOT NULL
                            )
                            /* 지급일자 기준으로 전년도미지급원리금과 종년도발생원금 쪼개기 */
                            ,TB_PADVDRMS_TMP0 AS (
                            SELECT /*+ ORDERED FULL(A) PARALLEL(A,4)  FULL(B) PARALLEL(B,4) FULL(C) PARALLEL(C,4)
                                     USE_HASH(A B C) PQ_DISTRIBUTE(B NONE NONE) PQ_DISTRIBUTE(C NONE NONE) */
                                   A.POLY_NO
                                  ,A.DVDN_KIND_CODE
                                  ,ROW_NUMBER() OVER(PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM )         AS OCCR_ORDR       /*  배당발생순서    */
                                  ,A.LSTY_APPR_YM                                                                                                  /*  종년도계상년월  */
                                  ,A.DVDN_SEQ_NO                                                                                                   /*  배당일련번호    */
                                  ,SUBSTRB(A.POLY_NO || '^' ||  A.DVDN_KIND_CODE || '^' || A.LSTY_APPR_YM   || '^' ||  A.DVDN_SEQ_NO, 1, 50)    AS RGST_PRGM_ID    /*  등록프로그램ID  */
                                  ,A.LAST_CHMN_MPNO
                                  ,A.LAST_CHNG_DTTM
                                  ,A.PGM_ID
                                  ,A.FRSY_APPR_YM
                                  ,A.DVDN_ACCU_DVCD
                                  ,TO_DATE(CASE WHEN A.LSTY_APPR_DATE = '19935500'  THEN '19930515'
                                                WHEN A.LSTY_APPR_DATE = '19950229'  THEN '19950228'
                                                WHEN A.LSTY_APPR_DATE = '19990229'  THEN '19990228'
                                                WHEN A.LSTY_APPR_DATE = '20010229'  THEN '20010228'
                                                ELSE A.LSTY_APPR_DATE
                                           END, 'YYYYMMDD')                                                                                        AS LSTY_APPR_DATE   /* LSTY_APPR_DATE  */
                                  ,A.LSTY_DVDN_PRCP              /* 원 모습으로 진행하자                  */
                                  ,A.LSTY_NPAY_PIAT              /* 변형하지 말고 원래 모습으로 진행하자  */
                                  ,A.BFYY_NPAY_PIAT                                                                                                AS BFYY_NPAY_PIAT
                                  ,LAG (A.LSTY_APPR_DATE) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LAG_LSTY_APPR_DATE
                                  ,LAG (A.LSTY_NPAY_PIAT) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LAG_LSTY_NPAY_PIAT
                                  ,LEAD(A.LSTY_NPAY_PIAT) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LEAD_LSTY_NPAY_PIAT
                                  ,LEAD(A.BFYY_NPAY_PIAT) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LEAD_BFYY_NPAY_PIAT
                                  ,LEAD(A.LSTY_APPR_DATE) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LEAD_LSTY_APPR_DATE
                                  ,LEAD(A.DVDN_SEQ_NO   ) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LEAD_DVDN_SEQ_NO
                                  ,LAG (A.DVDN_SEQ_NO   ) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LAG_DVDN_SEQ_NO      /* 이전이력 배당일련번호  2021-04-28 */
                                  ,CASE WHEN  A.LSTY_DVDN_PRCP = 0 AND A.LSTY_NPAY_PIAT = 0 AND A.BFYY_NPAY_PIAT = 0  THEN 0 /* 종년도발생원금, 종년도미지급원리금, 전년도미지급원리금 없음. */
                                        WHEN  A.LSTY_DVDN_PRCP = 0 AND A.LSTY_NPAY_PIAT = 0 AND A.BFYY_NPAY_PIAT > 0  THEN 1 /* 전년도미지급원리금만 있음                                    */
                                        WHEN  A.LSTY_DVDN_PRCP = 0 AND A.LSTY_NPAY_PIAT > 0 AND A.BFYY_NPAY_PIAT = 0  THEN 2 /* 종년도미지급원리금만 있음                                    */
                                        WHEN  A.LSTY_DVDN_PRCP = 0 AND A.LSTY_NPAY_PIAT > 0 AND A.BFYY_NPAY_PIAT > 0  THEN 3 /* 종년도발생원금만 없음.                                       */
                                        WHEN  A.LSTY_DVDN_PRCP > 0 AND A.LSTY_NPAY_PIAT = 0 AND A.BFYY_NPAY_PIAT = 0  THEN 4 /* 종년도발생원금만 있음.                                       */
                                        WHEN  A.LSTY_DVDN_PRCP > 0 AND A.LSTY_NPAY_PIAT = 0 AND A.BFYY_NPAY_PIAT > 0  THEN 5 /* 종년도미지급원리금만 없음.                                   */
                                        WHEN  A.LSTY_DVDN_PRCP > 0 AND A.LSTY_NPAY_PIAT > 0 AND A.BFYY_NPAY_PIAT = 0  THEN 6 /* 전년도미지급원리금만 없음.                                   */
                                        WHEN  A.LSTY_DVDN_PRCP > 0 AND A.LSTY_NPAY_PIAT > 0 AND A.BFYY_NPAY_PIAT > 0  THEN 7 /* 모두 금액있음                                                */
                                        ELSE  0 END                                                                                                AS PRCP_DVSN        /* 금액형태 분류                                                             */
                                  ,TO_DATE(B.CNTT_DATE, 'YYYYMMDD')                                                                                AS CNTT_DATE        /*                                                                           */
                                  ,CASE WHEN SUBSTRB(B.CNTT_DATE, 5, 4) = '0229'THEN 1 ELSE 0 END                                                  AS CNTT_LEAP_YEAR   /* 계약이 윤년 2월 29일 인가 ?                                               */
                                  ,SUBSTRB(B.CNTT_DATE, 5, 4)                                                                                      AS CNTT_DT          /* 계약응당일자 2월28일 에 년수 +/- 시 윤년이 걸리면 02-29로 가는 것을 보정  */
                                  ,TO_DATE('20050331' , 'YYYYMMDD')                                                                                AS STDD_DATE        /* 배당적립발생 최종 기준일자                                                */
                                  ,B.CNTT_STAT_CODE
                                  ,B.IRKD_CODE_DTAL
                                  ,B.IRKD_CODE_ITEM
                                  ,TO_DATE(NVL(B.CNTT_LAPS_DATE, '99991231'), 'YYYYMMDD')                                                          AS CNTT_LAPS_DATE
                                  ,TO_DATE(B.CNTT_ANPY_STDT, 'YYYYMMDD')                                                                           AS CNTT_ANPY_STDT
                                  ,C.ICCO_CHNC_DVSN
                                  ,C.ICSC_EXCC_DVSN
                                  ,TO_DATE(CASE WHEN B.CNTT_EXTN_DATE = '00000000' THEN '19990101' 
                                                WHEN B.CNTT_EXTN_DATE IS NULL      THEN '99991231' 
                                                ELSE B.CNTT_EXTN_DATE  
                                           END, 'YYYYMMDD')                                                                                       AS CNTT_EXTN_DATE
                                  ,A.VALD_DVSN_CODE
                              FROM TB_PADVDRMS A
                                  ,TB_ISAPLCTT B
                                  ,TB_PAIKDATT C   
                            WHERE 1=1  
                              AND (A.LSTY_DVDN_PRCP > 0 OR A.LSTY_NPAY_PIAT > 0 OR A.BFYY_NPAY_PIAT > 0)
                              AND A.VALD_DVSN_CODE     = '1'
                              AND B.VALD_DVSN_CODE     = '1'
                              AND 1=1 /*   A.POLY_NO = '280478'  테스트 증번 */
                              AND A.VALD_DVSN_CODE     = B.VALD_DVSN_CODE
                              AND A.POLY_NO            = B.POLY_NO
                              AND B.IRKD_CODE_DTAL     = C.IRKD_CODE_DTAL
                              AND B.IRKD_CODE_ITEM     = C.IRKD_CODE_ITEM
                              AND TO_DATE(CASE WHEN A.LSTY_APPR_DATE = '19935500'  THEN '19930515'
                                               WHEN A.LSTY_APPR_DATE = '19950229'  THEN '19950228'
                                               WHEN A.LSTY_APPR_DATE = '19990229'  THEN '19990228'
                                               WHEN A.LSTY_APPR_DATE = '20010229'  THEN '20010228'
                                               ELSE A.LSTY_APPR_DATE
                                           END DEFAULT NULL ON CONVERSION ERROR, 'YYYYMMDD') IS NOT NULL 
                            )
                            , TB_PADVDRMS_TMP1 AS (
                            SELECT /*+ FULL(A) PARALLEL(A 4) FULL(B) PARALLEL(B 4) FULL(C) PARALLEL(C 4)
                                       USE_HASH(A B C) PQ_DISTRIBUTE(B NONE NONE) PQ_DISTRIBUTE(C NONE NONE) */
                                   A.POLY_NO
                                  ,A.DVDN_KIND_CODE
                                  ,A.OCCR_ORDR                                                                                   /* 배당발생순서 */
                                  ,A.LSTY_APPR_YM
                                  ,A.DVDN_SEQ_NO
                                  ,A.RGST_PRGM_ID
                                  ,A.LAST_CHMN_MPNO
                                  ,A.LAST_CHNG_DTTM
                                  ,A.PGM_ID
                                  ,A.FRSY_APPR_YM
                                  ,A.DVDN_ACCU_DVCD
                                  ,A.LSTY_APPR_DATE
                                  ,A.LSTY_DVDN_PRCP                                                                              /* 종년도배당원금_보정 2021-04-08 */
                                  ,A.LSTY_NPAY_PIAT
                                  ,A.BFYY_NPAY_PIAT
                                  ,CASE WHEN A.DVDN_KIND_CODE BETWEEN '03' AND '07' THEN ADD_MONTHS(A.LSTY_APPR_DATE,  12)      /* XXXX0401, XXXX0613, XXXX0614, XXXX0711 만 존재 */
                                        WHEN A.CNTT_LEAP_YEAR = 1 THEN LAST_DAY(ADD_MONTHS(A.LSTY_APPR_DATE,  12))
                                        ELSE CASE WHEN MOD(TO_NUMBER(SUBSTR(TO_CHAR(A.LSTY_APPR_DATE, 'YYYYMMDD'),1,4)) + 1, 4) = 0
                                                   AND SUBSTR(TO_CHAR(A.LSTY_APPR_DATE, 'YYYYMMDD'),5,4) = '0228'
                                                  THEN TO_DATE(TO_CHAR(ADD_MONTHS(A.LSTY_APPR_DATE,  12), 'YYYY') || A.CNTT_DT, 'YYYYMMDD')
                                                  ELSE ADD_MONTHS(A.LSTY_APPR_DATE,  12) END
                                          END                                                                                  AS NEXT_APPR_DATE     /* 다음년도 */
                                  ,CASE WHEN A.DVDN_KIND_CODE BETWEEN '03' AND '07' THEN ADD_MONTHS(A.LSTY_APPR_DATE,  -12)
                                        WHEN A.CNTT_LEAP_YEAR = 1 THEN LAST_DAY(ADD_MONTHS(A.LSTY_APPR_DATE, -12))
                                        ELSE CASE WHEN MOD(TO_NUMBER(SUBSTR(TO_CHAR(A.LSTY_APPR_DATE, 'YYYYMMDD'),1,4)) - 1, 4) = 0
                                                   AND SUBSTR(TO_CHAR(A.LSTY_APPR_DATE, 'YYYYMMDD'),5,4) = '0228'
                                                  THEN TO_DATE(TO_CHAR(ADD_MONTHS(A.LSTY_APPR_DATE, -12), 'YYYY') || A.CNTT_DT, 'YYYYMMDD')
                                                  ELSE ADD_MONTHS(A.LSTY_APPR_DATE, -12) END
                                          END                                                                                  AS BEFO_APPR_DATE     /* 직전년도 2021-10-25 add_months(xxxx, 12 -> -12) */
                                  ,CASE WHEN TO_DATE(NVL(A.LAG_LSTY_APPR_DATE, '99991231') DEFAULT NULL ON CONVERSION ERROR, 'YYYYMMDD') IS NULL 
                                        THEN LAST_DAY(TO_DATE(SUBSTRB(A.LAG_LSTY_APPR_DATE,1,6)||'01', 'YYYYMMDD'))
                                        ELSE TO_DATE(NVL(A.LAG_LSTY_APPR_DATE, '99991231'), 'YYYYMMDD')
                                   END                                                                                         AS LAG_LSTY_APPR_DATE /* 20010229 일자 보정처리 필요 */
                                  ,A.LAG_LSTY_NPAY_PIAT
                                  ,A.LEAD_LSTY_NPAY_PIAT
                                  ,A.LEAD_BFYY_NPAY_PIAT
                                  ,CASE WHEN TO_DATE(NVL(A.LEAD_LSTY_APPR_DATE, '99991231') DEFAULT NULL ON CONVERSION ERROR, 'YYYYMMDD') IS NULL 
                                        THEN LAST_DAY(TO_DATE(SUBSTRB(A.LEAD_LSTY_APPR_DATE,1,6)||'01', 'YYYYMMDD'))
                                        ELSE TO_DATE(NVL(A.LEAD_LSTY_APPR_DATE, '99991231'), 'YYYYMMDD')
                                   END                                                                                         AS LEAD_LSTY_APPR_DATE
                                  ,A.LEAD_DVDN_SEQ_NO
                                  ,A.LAG_DVDN_SEQ_NO                                                                            /* 이전이력 배당일련번호  2021-04-28 */
                                  ,A.PRCP_DVSN                                                                                  /* 금액형태 분류                     */
                                  ,A.CNTT_DATE
                                  ,A.CNTT_LEAP_YEAR
                                  ,A.STDD_DATE
                                  ,A.CNTT_STAT_CODE
                                  ,A.IRKD_CODE_DTAL
                                  ,A.IRKD_CODE_ITEM
                                  ,A.CNTT_LAPS_DATE
                                  ,A.CNTT_ANPY_STDT
                                  ,A.ICCO_CHNC_DVSN
                                  ,A.ICSC_EXCC_DVSN
                                  ,B.CNTT_PRTR_NO
                                  ,C.JOIN_AGE
                                  ,CASE WHEN SUBSTR(A.ICSC_EXCC_DVSN,1,1) = '0' THEN NULL
                                        WHEN SUBSTR(A.ICSC_EXCC_DVSN,1,1) = 'A' THEN A.CNTT_ANPY_STDT                           /* AX의 정산일자는 연금개시일자 */
                                        WHEN SUBSTR(A.ICSC_EXCC_DVSN,1,1) = 'Z'                                                 /* Z15, Z18은 계약일자 + (15, 18 - 자녀의가입나이) 년 */
                                        THEN CASE WHEN CNTT_LEAP_YEAR = 1 THEN LAST_DAY(ADD_MONTHS(A.CNTT_DATE, (TO_NUMBER(SUBSTRB(A.ICSC_EXCC_DVSN, 2)) - NVL(C.JOIN_AGE,0)) * 12))
                                              ELSE ADD_MONTHS(A.CNTT_DATE, (TO_NUMBER(SUBSTRB(A.ICSC_EXCC_DVSN, 2)) - NVL(C.JOIN_AGE,0)) * 12) END
                                        ELSE NULL END                                                                         AS PIAM_STTL_DATE   /* 정산일자 */
                                  ,A.VALD_DVSN_CODE
                                  ,A.CNTT_EXTN_DATE
                             FROM TB_PADVDRMS_TMP0  A
                                 ,TB_ISAPLCMR B
                                 ,TB_ISAPLINS C
                            WHERE 1=1
                              AND A.POLY_NO            = B.POLY_NO(+)
                              AND A.VALD_DVSN_CODE     = B.VALD_DVSN_CODE(+)
                              AND B.CUST_ROLE_CODE(+)  = '23'
                              AND B.END_DATE      (+)  = '99991231'
                              AND B.DEL_YN        (+)  = 'N'
                              AND B.POLY_NO            = C.POLY_NO(+)
                              AND B.VALD_DVSN_CODE     = C.VALD_DVSN_CODE(+)
                              AND B.CNTT_PRTR_NO       = C.CNTT_PRTR_NO(+)
                              AND C.END_DATE      (+)  = '99991231'
                              AND C.DEL_YN        (+)  = 'N' 
                            )
                            ,TB_PADVDRMS_TMP11 AS (
                            SELECT /*+ FULL(A) PARALLEL(A 4) FULL(B) PARALLEL(B 4)  
                                       USE_HSAH(A,B)
                                    */
                                   A.POLY_NO
                                  ,A.DVDN_KIND_CODE
                                  ,A.OCCR_ORDR                                                                                  /* 배당발생순서 */
                                  ,A.LSTY_APPR_YM
                                  ,A.DVDN_SEQ_NO
                                  ,A.RGST_PRGM_ID
                                  ,A.LAST_CHMN_MPNO
                                  ,A.LAST_CHNG_DTTM
                                  ,A.PGM_ID
                                  ,A.FRSY_APPR_YM
                                  ,A.DVDN_ACCU_DVCD
                                  ,A.LSTY_APPR_DATE
                                  ,A.LSTY_DVDN_PRCP
                                  ,A.LSTY_NPAY_PIAT
                                  ,A.BFYY_NPAY_PIAT
                                  ,A.NEXT_APPR_DATE
                                  ,A.BEFO_APPR_DATE
                                  ,A.LAG_LSTY_APPR_DATE                                                                        AS LAG_LSTY_APPR_DATE
                                  ,A.LAG_LSTY_NPAY_PIAT
                                  ,A.LEAD_LSTY_NPAY_PIAT
                                  ,A.LEAD_BFYY_NPAY_PIAT
                                  ,A.LEAD_LSTY_APPR_DATE                                                                        AS LEAD_LSTY_APPR_DATE
                                  ,A.LEAD_DVDN_SEQ_NO
                                  ,A.LAG_DVDN_SEQ_NO                                                                            /* 이전이력 배당일련번호  2021-04-28 */
                                  ,A.PRCP_DVSN                                                                                  /* 금액형태 분류                     */
                                  ,A.CNTT_DATE
                                  ,A.CNTT_LEAP_YEAR
                                  ,CASE WHEN TO_CHAR(A.LAG_LSTY_APPR_DATE, 'YYYYMMDD') = '99991231' THEN 1 ELSE 0 END           AS NO_BEFO_DATA
                                  ,CASE WHEN A.LEAD_LSTY_APPR_DATE != A.NEXT_APPR_DATE THEN 1 ELSE 0 END                        AS NO_NEXT_DATA
                                  ,A.CNTT_STAT_CODE
                                  ,A.IRKD_CODE_DTAL
                                  ,A.IRKD_CODE_ITEM
                                  ,A.CNTT_LAPS_DATE
                                  ,A.CNTT_ANPY_STDT
                                  ,A.ICCO_CHNC_DVSN
                                  ,A.ICSC_EXCC_DVSN
                                  ,A.CNTT_PRTR_NO
                                  ,A.JOIN_AGE
                                  ,A.PIAM_STTL_DATE
                                  ,CASE WHEN A.PIAM_STTL_DATE IS NULL             THEN '0'  /* 적립중인 건  */
                                        WHEN A.PIAM_STTL_DATE < A.LSTY_APPR_DATE  THEN '0'  /* 적립중인 건  */
                                        WHEN A.PIAM_STTL_DATE > A.STDD_DATE       THEN '0'  /* 적립중인 건  */
                                        WHEN A.PIAM_STTL_DATE = A.LSTY_APPR_DATE  THEN '1'  /* 매증정산일자 */
                                        ELSE '0' END                                                 AS STTL_DVSN
                                  ,B.PAYM_DATE
                                  ,A.CNTT_EXTN_DATE
                              FROM TB_PADVDRMS_TMP1  A
                                  ,TB_PADVDPAD_TMP   B
                             WHERE 1= 1
                               AND A.POLY_NO         = B.POLY_NO (+)
                               AND A.DVDN_KIND_CODE  = B.DVDN_KIND_CODE(+)
                               AND B.PAYM_DATE(+)  BETWEEN A.BEFO_APPR_DATE AND A.LSTY_APPR_DATE
                            )
                            , TB_PADVDRMS_TMP2 AS (      
                            SELECT  /*+ FULL(A) PARALLEL(A 4) FULL(B) PARALLEL(B 4)  
                                       USE_HSAH(A B)
                                    */
                                  'MIG_002'                                                                 AS RGSR_EMNB         /* 배당적립테이블에서 컨버전된 레코드 표기 */
                                  ,SYSDATE                                                                  AS RGST_DTTM         /* 최초등록일시                            */
                                  ,A.RGST_PRGM_ID                                                           AS RGST_PRGM_ID      /* 등록프로그램ID                          */
                                  ,A.LAST_CHMN_MPNO                                                         AS LAST_CHNR_EMNB    /* 최종변경자사번                          */
                                  ,A.LAST_CHNG_DTTM                                                         AS LAST_CHNG_DTTM    /* 최종변경일시                            */
                                  ,SUBSTRB(A.PGM_ID, 1, 50)                                                 AS LAST_CHNG_PRGM_ID /* 최종변경프로그램ID                      */
                                  ,'N'                                                                      AS DLTN_YN           /* 삭제여부                                */
                                  ,'P' || LPAD(A.POLY_NO, 9, 0)                                             AS CNTC_AGMT_NO      /* 계약AGREEMENT번호                       */
                                  ,A.POLY_NO                                                                AS POLY_NO           /* 증권번호                                */
                                  ,A.DVDN_KIND_CODE                                                         AS DVDN_KIND_CODE    /* 배당종류코드                            */
                            --      ,A.LSTY_APPR_YM                                                           AS LSTY_APPR_YM      /* 배당발생년월                            */
                                  ,CASE WHEN A.STTL_DVSN = '0' THEN    /* 종년에 발생했고 매증할 것이 아니면 종년 미지급만 취한다 */
                                        CASE WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN = 3 AND A.LAG_LSTY_NPAY_PIAT = A.BFYY_NPAY_PIAT
                                              AND A.LSTY_NPAY_PIAT > 0 AND A.LEAD_DVDN_SEQ_NO = 2                                                THEN A.LSTY_APPR_DATE                /*  10  */
                                             WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN < 4                                        THEN TO_DATE('99991231', 'YYYYMMDD') /*  20  */
                                             WHEN A.OCCR_ORDR = 1 AND A.NO_NEXT_DATA = 1 AND A.NO_BEFO_DATA = 1 AND  A.PRCP_DVSN = 4             THEN A.LSTY_APPR_DATE                /*  30  */
                                             WHEN A.DVDN_SEQ_NO = 2 AND A.PRCP_DVSN = 1  AND A.LSTY_APPR_DATE = A.LAG_LSTY_APPR_DATE             THEN TO_DATE('99991231', 'YYYYMMDD') /*  40  */
                                             WHEN A.PRCP_DVSN = 1 AND A.DVDN_SEQ_NO       = 3                                                    THEN TO_DATE('99991231', 'YYYYMMDD') /*  45  */
                                             WHEN A.PRCP_DVSN = 1 AND A.NEXT_APPR_DATE != A.LEAD_LSTY_APPR_DATE                                  THEN A.BEFO_APPR_DATE                /*  50  */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LEAD_BFYY_NPAY_PIAT = 0                                   THEN A.LSTY_APPR_DATE                /* 110  */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                              AND A.LEAD_LSTY_NPAY_PIAT = 0      AND A.PAYM_DATE IS NOT NULL                                     THEN A.BEFO_APPR_DATE /* 113  다음이력이 지급 - 지급일자가 응당일 이전 인 경우 직전년도 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LEAD_LSTY_NPAY_PIAT = 0                                                                     THEN A.LSTY_APPR_DATE                /* 111 -- A.LSTY_NPAY_PIAT */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP <> A.LEAD_LSTY_NPAY_PIAT                                                     THEN A.BEFO_APPR_DATE                /* 112 전년도 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP = A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0                             THEN A.BEFO_APPR_DATE                /* 115 전년도  */
                                             WHEN A.DVDN_SEQ_NO       = 3                                                                        THEN TO_DATE('99991231', 'YYYYMMDD') /* 130         */
                                             WHEN A.DVDN_SEQ_NO       = 2  AND NVL(A.LEAD_DVDN_SEQ_NO, 0) = 3                                    THEN A.LSTY_APPR_DATE                /* 135         */
                                             WHEN A.NO_NEXT_DATA = 1 AND A.DVDN_SEQ_NO  = 2 AND A.LSTY_DVDN_PRCP = A.LSTY_NPAY_PIAT              THEN A.LSTY_APPR_DATE                /* 138 이력이 2이고 최종데이터 이면서 발생원금과 원리금이 같으면 원금  2021-10-25 */
                                             WHEN A.DVDN_SEQ_NO       = 2                                                                        THEN TO_DATE('99991231', 'YYYYMMDD') /* 140         */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN A.LSTY_APPR_DATE /* 145 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN A.BEFO_APPR_DATE /* 146 전년도   */
                                             /* ########### 2021-10-30 오후 2:55:54 아래 라인 CNTT_LAPS_DATE -> CNTT_EXTN_DATE 수정하였음. */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN A.LSTY_APPR_DATE /* 147 LSTY_DVDN_PRCP -- 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN A.BEFO_APPR_DATE /* 148 BFYY_NPAY_PIAT -- 전년도   */

                                             WHEN A.NO_NEXT_DATA = 1        AND NVL(A.LEAD_DVDN_SEQ_NO, 0) != 2                                  THEN A.LSTY_APPR_DATE  /* 150 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2                                                                 THEN A.LSTY_APPR_DATE  /* 160 */
                                             ELSE TO_DATE('99991231', 'YYYYMMDD') END
                                        ELSE       
                                        CASE /* 정산일자에 발생 또는 적립중인 경우 */
                                             WHEN A.BEFO_APPR_DATE != A.LAG_LSTY_APPR_DATE AND A.LSTY_APPR_DATE = A.PIAM_STTL_DATE AND A.LSTY_NPAY_PIAT = A.LEAD_BFYY_NPAY_PIAT AND A.PRCP_DVSN = 6
                                                  AND A.LEAD_DVDN_SEQ_NO = 1                                                                          THEN TO_DATE('99991231', 'YYYYMMDD') /* 195 직전 적립중이 없고 정산일자에 발생 이후 적립 중인 건 */
                                             WHEN B.NO = 1 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT                               THEN A.BEFO_APPR_DATE  /* 210 정산일자 & 정상데이터면 전년도미지급원리금을 전년도 발생금으로      */
                                             WHEN B.NO = 2 AND A.LSTY_DVDN_PRCP =  A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE THEN TO_DATE('99991231', 'YYYYMMDD') /* 215 -- 999999999999999 */
                                             WHEN B.NO = 2 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0      THEN A.LSTY_APPR_DATE  /* 220 -- A.LSTY_DVDN_PRCP */  /* 정산일자 & 정상데이터이고 종년도발생원금 있으면   종년도발생원금  */
                                             ELSE TO_DATE('99991231', 'YYYYMMDD') END                                                                                        /*  230                    */
                                   END                                                                                                           AS DVDN_RFDT         /* 배당발생일자 */
                                  ,CASE WHEN A.STTL_DVSN = '0' THEN    /* 종년에 발생했고 매증할 것이 아니면 종년 미지급만 취한다 */
                                        CASE WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN = 3 AND A.LAG_LSTY_NPAY_PIAT = A.BFYY_NPAY_PIAT
                                              AND A.LSTY_NPAY_PIAT > 0 AND A.LEAD_DVDN_SEQ_NO = 2                                                THEN A.LSTY_NPAY_PIAT /*  10  */
                                             WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN < 4                                        THEN 999999999999999  /*  20  */
                                             WHEN A.OCCR_ORDR = 1 AND A.NO_NEXT_DATA = 1 AND A.NO_BEFO_DATA = 1 AND  A.PRCP_DVSN = 4             THEN A.LSTY_DVDN_PRCP /*  30  */
                                             WHEN A.DVDN_SEQ_NO = 2 AND A.PRCP_DVSN = 1  AND A.LSTY_APPR_DATE = A.LAG_LSTY_APPR_DATE             THEN 999999999999999  /*  40  */
                                             WHEN A.PRCP_DVSN = 1 AND A.DVDN_SEQ_NO       = 3                                                    THEN 999999999999999  /*  45  */
                                             WHEN A.PRCP_DVSN = 1 AND A.NEXT_APPR_DATE != A.LEAD_LSTY_APPR_DATE                                  THEN A.BFYY_NPAY_PIAT /*  50  */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LEAD_BFYY_NPAY_PIAT = 0                                   THEN A.LSTY_NPAY_PIAT /* 110  */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                              AND A.LEAD_LSTY_NPAY_PIAT = 0      AND A.PAYM_DATE IS NOT NULL                                     THEN A.BFYY_NPAY_PIAT  /* 113   다음이력이 지급 - 지급일자가 응당일 이전 인 경우 직전년도 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LEAD_LSTY_NPAY_PIAT = 0                                                                     THEN A.LSTY_NPAY_PIAT  /* 111 - 전년도 -- A.LEAD_BFYY_NPAY_PIAT */
                                              WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP <> A.LEAD_LSTY_NPAY_PIAT                                                     THEN A.BFYY_NPAY_PIAT  /* 112 - 전년도 -- A.LEAD_BFYY_NPAY_PIAT */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP = A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0                             THEN A.BFYY_NPAY_PIAT  /* 115 전년도 -- A.LEAD_BFYY_NPAY_PIAT */
                                             WHEN A.DVDN_SEQ_NO       = 3                                                                        THEN 999999999999999   /* 130                                 */
                                             WHEN A.DVDN_SEQ_NO       = 2  AND NVL(A.LEAD_DVDN_SEQ_NO, 0) = 3                                    THEN A.LSTY_NPAY_PIAT  /* 135                                 */
                                             WHEN A.NO_NEXT_DATA = 1 AND A.DVDN_SEQ_NO  = 2 AND A.LSTY_DVDN_PRCP = A.LSTY_NPAY_PIAT              THEN A.LSTY_DVDN_PRCP  /* 138 이력이 2이고 최종데이터 이면서 발생원금과 원리금이 같으면 원금  2021-10-25 */
                                             WHEN A.DVDN_SEQ_NO       = 2                                                                        THEN 999999999999999   /* 140                                 */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN A.LSTY_DVDN_PRCP /* 145 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN A.BFYY_NPAY_PIAT /* 146 전년도   */
                                             /* ########### 2021-10-30 오후 2:55:54 아래 라인 CNTT_LAPS_DATE -> CNTT_EXTN_DATE 수정하였음. */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN A.LSTY_DVDN_PRCP /* 147 LSTY_DVDN_PRCP -- 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN A.BFYY_NPAY_PIAT /* 148 BFYY_NPAY_PIAT -- 전년도   */

                                             WHEN A.NO_NEXT_DATA = 1        AND NVL(A.LEAD_DVDN_SEQ_NO, 0) != 2                                  THEN A.LSTY_NPAY_PIAT  /* 150 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2                                                                 THEN A.LSTY_NPAY_PIAT  /* 160 */
                                             ELSE 999999999999999 END                                                                                                   /* 190 */
                                        ELSE       /* 정산일자 배당적립중 존재 정산일까지  */
                                        CASE
                                             WHEN A.BEFO_APPR_DATE != A.LAG_LSTY_APPR_DATE AND A.LSTY_APPR_DATE = A.PIAM_STTL_DATE AND A.LSTY_NPAY_PIAT = A.LEAD_BFYY_NPAY_PIAT AND A.PRCP_DVSN = 6
                                              AND A.LEAD_DVDN_SEQ_NO = 1                                                                              THEN 999999999999999    /* 195 직전 적립중이 없고 정산일자에 발생 이후 적립 중인 건  */
                                             WHEN B.NO = 1 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT                               THEN A.BFYY_NPAY_PIAT   /* 210 정산일자 & 정상데이터면 전년도미지급원리금을 전년도 발생금으로      */
                                             WHEN B.NO = 2 AND A.LSTY_DVDN_PRCP =  A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE THEN 999999999999999    /* 215 -- 999999999999999 */
                                             WHEN B.NO = 2 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0      THEN A.LSTY_DVDN_PRCP   /*220 -- A.LSTY_DVDN_PRCP */ /* 정산일자 & 정상데이터이고 종년도발생원금 있으면   종년도발생원금  */
                                             ELSE 999999999999999 END
                                   END                                                                     AS  DVDN_PRCP                                /* 배당원금 */
                                  ,CASE WHEN A.STTL_DVSN = '0' THEN    /* 종년에 발생했고 매증할 것이 아니면 종년 미지급만 취한다 */
                                        CASE WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN = 3 AND A.LAG_LSTY_NPAY_PIAT = A.BFYY_NPAY_PIAT
                                              AND A.LSTY_NPAY_PIAT > 0 AND A.LEAD_DVDN_SEQ_NO = 2                                                THEN  10 /* A.LSTY_NPAY_PIAT   */
                                             WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN < 4                                        THEN  20 /* 999999999999999    */
                                             WHEN A.OCCR_ORDR = 1 AND A.NO_NEXT_DATA = 1 AND A.NO_BEFO_DATA = 1 AND  A.PRCP_DVSN = 4             THEN  30 /* A.LSTY_DVDN_PRCP   */
                                             WHEN A.DVDN_SEQ_NO = 2 AND A.PRCP_DVSN = 1  AND A.LSTY_APPR_DATE = A.LAG_LSTY_APPR_DATE             THEN  40 /* 999999999999999    */
                                             WHEN A.PRCP_DVSN = 1 AND A.DVDN_SEQ_NO       = 3                                                    THEN  45 /* 999999999999999    */
                                             WHEN A.PRCP_DVSN = 1 AND A.NEXT_APPR_DATE != A.LEAD_LSTY_APPR_DATE                                  THEN  50 /* A.BFYY_NPAY_PIAT   */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LEAD_BFYY_NPAY_PIAT = 0                                   THEN 110 /* A.LSTY_NPAY_PIAT   */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                              AND A.LEAD_LSTY_NPAY_PIAT = 0      AND A.PAYM_DATE IS NOT NULL                                     THEN 113 /* A.BFYY_NPAY_PIAT   다음이력이 지급 - 지급일자가 응당일 이전 인 경우 직전년도 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                              AND A.LEAD_LSTY_NPAY_PIAT = 0                                                                      THEN 111 /* A.LSTY_NPAY_PIAT   다음이력이 지급 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP <> A.LEAD_LSTY_NPAY_PIAT                                                     THEN 112 /* A.BFYY_NPAY_PIAT -- 전년도 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP = A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0                             THEN 115 /* A.BFYY_NPAY_PIAT -- 전년도 */
                                             WHEN A.DVDN_SEQ_NO       = 3                                                                        THEN 130 /* 999999999999999            */
                                             WHEN A.DVDN_SEQ_NO       = 2  AND NVL(A.LEAD_DVDN_SEQ_NO, 0)  =3                                    THEN 135 /* A.LSTY_NPAY_PIAT           */
                                             WHEN A.NO_NEXT_DATA = 1 AND A.DVDN_SEQ_NO  = 2 AND A.LSTY_DVDN_PRCP = A.LSTY_NPAY_PIAT              THEN 138 /* A.LSTY_DVDN_PRCP 이력이 2이고 최종데이터 이면서 발생원금과 원리금이 같으면 원금 2021-10-25 */
                                             WHEN A.DVDN_SEQ_NO       = 2                                                                        THEN 140 /* 999999999999999            */
                                             /* 전년도배당발생일자~당해년도배당발생일자 사이에 실효일자가 있으면 종년도발생배당원금과 전년도미지급원리금 쪼갠다. */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN 145 /* LSTY_DVDN_PRCP -- 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN 146 /* BFYY_NPAY_PIAT -- 전년도   */
                                             /* 전년도배당발생일자~당해년도배당발생일자 사이에 감소일자가 있으면 종년도발생배당원금과 전년도미지급원리금 쪼갠다. */
                                             /* ########### 2021-10-30 오후 2:55:54 아래 라인 CNTT_LAPS_DATE -> CNTT_EXTN_DATE 수정하였음. */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN 147 /* LSTY_DVDN_PRCP -- 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN 148 /* BFYY_NPAY_PIAT -- 전년도   */
                                             WHEN A.NO_NEXT_DATA      = 1        AND NVL(A.LEAD_DVDN_SEQ_NO, 0) != 2                             THEN 150 /* A.LSTY_NPAY_PIAT  */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2                                                                 THEN 160 /* A.LSTY_NPAY_PIAT  */
                                             ELSE 190                                                                                                     /* 999999999999999   */
                                             END
                                        ELSE       /* 정산일자 배당적립중 존재 정산일까지  */
                                        CASE
                                             WHEN A.BEFO_APPR_DATE != A.LAG_LSTY_APPR_DATE AND A.LSTY_APPR_DATE = A.PIAM_STTL_DATE AND A.LSTY_NPAY_PIAT = A.LEAD_BFYY_NPAY_PIAT AND A.PRCP_DVSN = 6
                                                  AND A.LEAD_DVDN_SEQ_NO = 1                                                                          THEN 195 /* 999999999999999 */
                                             WHEN B.NO = 1 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT                               THEN 210 /* A.BFYY_NPAY_PIAT */ /* 정산일자 & 정상데이터면 전년도미지급원리금을 전년도 발생금으로      */
                                             WHEN B.NO = 2 AND A.LSTY_DVDN_PRCP =  A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE THEN 215 /* 999999999999999  */
                                             WHEN B.NO = 2 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0      THEN 220 /* A.LSTY_DVDN_PRCP */ /* 정산일자 & 정상데이터이고 종년도발생원금 있으면   종년도발생원금  */
                                             ELSE 230                                                                                                          /* 999999999999999 */
                                         END
                                   END                                                                     AS  DVDN_PRCP_DVSN
                                  ,A.OCCR_ORDR
                                  ,A.DVDN_SEQ_NO                                                           AS DVDN_SEQ_NO
                                  ,A.PRCP_DVSN                                                                                /* 금액형태 분류       */
                                  ,A.LSTY_APPR_DATE                                                                           /* 배당발생일자        */
                                  ,A.LSTY_DVDN_PRCP                                                                           /* 종년도발생원금      */
                                  ,A.LSTY_NPAY_PIAT                                                                           /* 종년도미지급원리금  */
                                  ,A.BFYY_NPAY_PIAT                                                                           /* 전년도미지급원리금  */
                                  ,A.NO_BEFO_DATA
                                  ,A.NO_NEXT_DATA
                                  ,A.NEXT_APPR_DATE
                                  ,A.BEFO_APPR_DATE
                                  ,A.LAG_LSTY_APPR_DATE                                                                        /* 직전배당발생일자                   */
                                  ,A.LAG_LSTY_NPAY_PIAT                                                                        /* 직후종년도미지급원리금             */
                                  ,A.LEAD_LSTY_NPAY_PIAT                                                                       /* 직후종년도미지급원리금             */
                                  ,A.LEAD_BFYY_NPAY_PIAT                                                                       /* 직후전년도미지급원리금             */
                                  ,A.LEAD_LSTY_APPR_DATE                                                                       /* 직후배당발생일자                   */
                                  ,A.LEAD_DVDN_SEQ_NO                                                                          /* 직후배당일련번호                   */
                                  ,A.LAG_DVDN_SEQ_NO                                                                           /* 이전이력 배당일련번호  2021-04-28  */
                                  ,B.NO
                                  ,A.CNTT_DATE
                                  ,A.CNTT_STAT_CODE
                                  ,A.CNTT_LAPS_DATE
                                  ,A.CNTT_ANPY_STDT
                                  ,A.ICCO_CHNC_DVSN
                                  ,A.ICSC_EXCC_DVSN
                                  ,A.JOIN_AGE
                                  ,A.PIAM_STTL_DATE                                                                            /* 정산일자 */
                                  ,A.STTL_DVSN
                                  ,A.PAYM_DATE
                                  ,A.CNTT_EXTN_DATE
                              FROM TB_PADVDRMS_TMP11 A
                                  ,TB_UVDUM001 B
                             WHERE CASE 
                                        WHEN A.STTL_DVSN = 1 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT AND A.PRCP_DVSN >= 5       THEN 2
                                        WHEN A.CNTT_STAT_CODE = '4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN 2
                                        WHEN A.CNTT_STAT_CODE > '9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN 2
                                        ELSE 1 END >= B.NO
                            )
                        SELECT DVDN_PRCP
                        FROM (
                                SELECT T1.DVDN_PRCP                       AS DVDN_PRCP           /* 14.배당원금               */
                                      ,ROW_NUMBER() OVER (PARTITION BY T1.POLY_NO, T1.DVDN_KIND_CODE, T1.DVDN_RFDT, T1.DVDN_PRCP ORDER BY T1.RGST_PRGM_ID, T1.DVDN_PRCP_DVSN) ORDR_SEQ
                                  FROM TB_PADVDRMS_TMP2 T1
                                     WHERE T1.DVDN_PRCP > 0
                                     AND T1.DVDN_PRCP <  999999999999999
                             )
                         WHERE ORDR_SEQ = 1
                   )  
                UNION ALL 
               SELECT 
                           1        AS GRP_NO
                         , 0     AS ASIS_VAL
                         , SUM(NVL(DVDN_PRCP, 0)) AS TOBE_VAL
                      FROM TBL_SVPPRCDVOC
                 ) A
       GROUP BY GRP_NO
        )  A
;

   /* --------------- 값검증( END ) --------------- */

   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   

   /* ------------------ 집합검증 -------------------- */

DELETE FROM MIG_DATA_VRFCNTN_SVP
WHERE VRFC_GBN = '집합검증'
AND TOBE_TAB = V_TABLE_NAME;

COMMIT;
              
              
INSERT INTO MIG_DATA_VRFCNTN_SVP
SELECT NVL((SELECT MAX(SEQ_NO) + 1 FROM MIG_DATA_VRFCNTN_SVP), 1)    AS SEQ_NO
     , '집합검증'                                                    AS VRFC_GBN
     , '배당금발생 테이블 ASIS Vs TOBE 집합검증'               AS VRFC_NM
     , SYSDATE                                                       AS VRFC_DT
     , 'TBL_SVPPRCDVOC'                                              AS TOBE_TAB
     , NULL                                                          AS TOBE_COL     
     , A.ASIS_VAL                                                    AS ASIS_VAL
     , A.TOBE_VAL                                                    AS TOBE_VAL 
     , A.GRP_NO                                                      AS GRP_NO
     , NULL                                                          AS BREAK_ASIS1
     , NULL                                                          AS BREAK_TOBE1
     , NULL                                                          AS BREAK_ASIS2
     , NULL                                                          AS BREAK_TOBE2
     , NULL                                                          AS BREAK_ASIS3
     , NULL                                                          AS BREAK_TOBE3
FROM  (
       SELECT  A.GRP_NO                                AS GRP_NO
             , SUM(A.ASIS_VAL)                                                                       AS ASIS_VAL
             , SUM(A.TOBE_VAL)                                                                       AS TOBE_VAL
       FROM  (
              SELECT 1                                               AS GRP_NO
                    ,COUNT(1)                                        AS ASIS_VAL
                   , 0                                            AS TOBE_VAL
              FROM TB_PADVDPRC PARTITION (VALID) A  
              INNER JOIN MIG_SET_PLCY_NO P
              ON P.POLY_NO = A.POLY_NO
              UNION ALL
              SELECT 1                                               AS GRP_NO
                    ,COUNT(CNT)                                        AS ASIS_VAL
                   , 0                                            AS TOBE_VAL
                     FROM ( 
                            WITH TB_PADVDPAD_TMP AS (
                            SELECT /*+ FULL(A) PARALLEL(A,4) FULL(B) PARALLEL(B,4)
                                       USE_HASH(A,B) PQ_DISTRIBUTE(B NONE NONE)
                                    */
                                   A.POLY_NO
                                  ,A.DVDN_KIND_CODE
                                  ,A.ACCU_PIAT
                                  ,TO_DATE(A.PAYM_DATE, 'YYYYMMDD')        AS PAYM_DATE
                                  ,A.LPAY_APPR_YM
                              FROM TB_PADVDPAD A
                                  ,TB_PABEFMAS B
                             WHERE 1= 1  /*   A.POLY_NO = '280478'  테스트 증번 */
                               AND A.PAYM_DLNG_NO   = B.PAYM_DLNG_NO
                               AND A.POLY_NO        = B.POLY_NO
                               AND B.CNCL_DATE      IS NULL
                               AND A.VALD_DVSN_CODE =  '1'
                               AND A.VALD_DVSN_CODE = B.VALD_DVSN_CODE
                               AND TO_DATE(A.PAYM_DATE DEFAULT NULL ON CONVERSION ERROR , 'YYYYMMDD') IS NOT NULL
                            )
                            /* 지급일자 기준으로 전년도미지급원리금과 종년도발생원금 쪼개기 */
                            ,TB_PADVDRMS_TMP0 AS (
                            SELECT /*+ ORDERED FULL(A) PARALLEL(A,4)  FULL(B) PARALLEL(B,4) FULL(C) PARALLEL(C,4)
                                     USE_HASH(A B C) PQ_DISTRIBUTE(B NONE NONE) PQ_DISTRIBUTE(C NONE NONE) */
                                   A.POLY_NO
                                  ,A.DVDN_KIND_CODE
                                  ,ROW_NUMBER() OVER(PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM )         AS OCCR_ORDR       /*  배당발생순서    */
                                  ,A.LSTY_APPR_YM                                                                                                  /*  종년도계상년월  */
                                  ,A.DVDN_SEQ_NO                                                                                                   /*  배당일련번호    */
                                  ,SUBSTRB(A.POLY_NO || '^' ||  A.DVDN_KIND_CODE || '^' || A.LSTY_APPR_YM   || '^' ||  A.DVDN_SEQ_NO, 1, 50)    AS RGST_PRGM_ID    /*  등록프로그램ID  */
                                  ,A.LAST_CHMN_MPNO
                                  ,A.LAST_CHNG_DTTM
                                  ,A.PGM_ID
                                  ,A.FRSY_APPR_YM
                                  ,A.DVDN_ACCU_DVCD
                                  ,TO_DATE(CASE WHEN A.LSTY_APPR_DATE = '19935500'  THEN '19930515'
                                                WHEN A.LSTY_APPR_DATE = '19950229'  THEN '19950228'
                                                WHEN A.LSTY_APPR_DATE = '19990229'  THEN '19990228'
                                                WHEN A.LSTY_APPR_DATE = '20010229'  THEN '20010228'
                                                ELSE A.LSTY_APPR_DATE
                                           END, 'YYYYMMDD')                                                                                        AS LSTY_APPR_DATE   /* LSTY_APPR_DATE  */
                                  ,A.LSTY_DVDN_PRCP              /* 원 모습으로 진행하자                  */
                                  ,A.LSTY_NPAY_PIAT              /* 변형하지 말고 원래 모습으로 진행하자  */
                                  ,A.BFYY_NPAY_PIAT                                                                                                AS BFYY_NPAY_PIAT
                                  ,LAG (A.LSTY_APPR_DATE) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LAG_LSTY_APPR_DATE
                                  ,LAG (A.LSTY_NPAY_PIAT) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LAG_LSTY_NPAY_PIAT
                                  ,LEAD(A.LSTY_NPAY_PIAT) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LEAD_LSTY_NPAY_PIAT
                                  ,LEAD(A.BFYY_NPAY_PIAT) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LEAD_BFYY_NPAY_PIAT
                                  ,LEAD(A.LSTY_APPR_DATE) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LEAD_LSTY_APPR_DATE
                                  ,LEAD(A.DVDN_SEQ_NO   ) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LEAD_DVDN_SEQ_NO
                                  ,LAG (A.DVDN_SEQ_NO   ) OVER (PARTITION BY A.POLY_NO, A.DVDN_KIND_CODE ORDER BY A.LSTY_APPR_YM, A.DVDN_SEQ_NO)   AS LAG_DVDN_SEQ_NO      /* 이전이력 배당일련번호  2021-04-28 */
                                  ,CASE WHEN  A.LSTY_DVDN_PRCP = 0 AND A.LSTY_NPAY_PIAT = 0 AND A.BFYY_NPAY_PIAT = 0  THEN 0 /* 종년도발생원금, 종년도미지급원리금, 전년도미지급원리금 없음. */
                                        WHEN  A.LSTY_DVDN_PRCP = 0 AND A.LSTY_NPAY_PIAT = 0 AND A.BFYY_NPAY_PIAT > 0  THEN 1 /* 전년도미지급원리금만 있음                                    */
                                        WHEN  A.LSTY_DVDN_PRCP = 0 AND A.LSTY_NPAY_PIAT > 0 AND A.BFYY_NPAY_PIAT = 0  THEN 2 /* 종년도미지급원리금만 있음                                    */
                                        WHEN  A.LSTY_DVDN_PRCP = 0 AND A.LSTY_NPAY_PIAT > 0 AND A.BFYY_NPAY_PIAT > 0  THEN 3 /* 종년도발생원금만 없음.                                       */
                                        WHEN  A.LSTY_DVDN_PRCP > 0 AND A.LSTY_NPAY_PIAT = 0 AND A.BFYY_NPAY_PIAT = 0  THEN 4 /* 종년도발생원금만 있음.                                       */
                                        WHEN  A.LSTY_DVDN_PRCP > 0 AND A.LSTY_NPAY_PIAT = 0 AND A.BFYY_NPAY_PIAT > 0  THEN 5 /* 종년도미지급원리금만 없음.                                   */
                                        WHEN  A.LSTY_DVDN_PRCP > 0 AND A.LSTY_NPAY_PIAT > 0 AND A.BFYY_NPAY_PIAT = 0  THEN 6 /* 전년도미지급원리금만 없음.                                   */
                                        WHEN  A.LSTY_DVDN_PRCP > 0 AND A.LSTY_NPAY_PIAT > 0 AND A.BFYY_NPAY_PIAT > 0  THEN 7 /* 모두 금액있음                                                */
                                        ELSE  0 END                                                                                                AS PRCP_DVSN        /* 금액형태 분류                                                             */
                                  ,TO_DATE(B.CNTT_DATE, 'YYYYMMDD')                                                                                AS CNTT_DATE        /*                                                                           */
                                  ,CASE WHEN SUBSTRB(B.CNTT_DATE, 5, 4) = '0229'THEN 1 ELSE 0 END                                                  AS CNTT_LEAP_YEAR   /* 계약이 윤년 2월 29일 인가 ?                                               */
                                  ,SUBSTRB(B.CNTT_DATE, 5, 4)                                                                                      AS CNTT_DT          /* 계약응당일자 2월28일 에 년수 +/- 시 윤년이 걸리면 02-29로 가는 것을 보정  */
                                  ,TO_DATE('20050331' , 'YYYYMMDD')                                                                                AS STDD_DATE        /* 배당적립발생 최종 기준일자                                                */
                                  ,B.CNTT_STAT_CODE
                                  ,B.IRKD_CODE_DTAL
                                  ,B.IRKD_CODE_ITEM
                                  ,TO_DATE(NVL(B.CNTT_LAPS_DATE, '99991231'), 'YYYYMMDD')                                                          AS CNTT_LAPS_DATE
                                  ,TO_DATE(B.CNTT_ANPY_STDT, 'YYYYMMDD')                                                                           AS CNTT_ANPY_STDT
                                  ,C.ICCO_CHNC_DVSN
                                  ,C.ICSC_EXCC_DVSN
                                  ,TO_DATE(CASE WHEN B.CNTT_EXTN_DATE = '00000000' THEN '19990101' 
                                                WHEN B.CNTT_EXTN_DATE IS NULL      THEN '99991231' 
                                                ELSE B.CNTT_EXTN_DATE  
                                           END, 'YYYYMMDD')                                                                                       AS CNTT_EXTN_DATE
                                  ,A.VALD_DVSN_CODE
                              FROM TB_PADVDRMS A
                                  ,TB_ISAPLCTT B
                                  ,TB_PAIKDATT C   
                            WHERE 1=1  
                              AND (A.LSTY_DVDN_PRCP > 0 OR A.LSTY_NPAY_PIAT > 0 OR A.BFYY_NPAY_PIAT > 0)
                              AND A.VALD_DVSN_CODE     = '1'
                              AND B.VALD_DVSN_CODE     = '1'
                              AND 1=1 /*   A.POLY_NO = '280478'  테스트 증번 */
                              AND A.VALD_DVSN_CODE     = B.VALD_DVSN_CODE
                              AND A.POLY_NO            = B.POLY_NO
                              AND B.IRKD_CODE_DTAL     = C.IRKD_CODE_DTAL
                              AND B.IRKD_CODE_ITEM     = C.IRKD_CODE_ITEM
                              AND TO_DATE(CASE WHEN A.LSTY_APPR_DATE = '19935500'  THEN '19930515'
                                               WHEN A.LSTY_APPR_DATE = '19950229'  THEN '19950228'
                                               WHEN A.LSTY_APPR_DATE = '19990229'  THEN '19990228'
                                               WHEN A.LSTY_APPR_DATE = '20010229'  THEN '20010228'
                                               ELSE A.LSTY_APPR_DATE
                                           END DEFAULT NULL ON CONVERSION ERROR, 'YYYYMMDD') IS NOT NULL 
                            )
                            , TB_PADVDRMS_TMP1 AS (
                            SELECT /*+ FULL(A) PARALLEL(A 4) FULL(B) PARALLEL(B 4) FULL(C) PARALLEL(C 4)
                                       USE_HASH(A B C) PQ_DISTRIBUTE(B NONE NONE) PQ_DISTRIBUTE(C NONE NONE) */
                                   A.POLY_NO
                                  ,A.DVDN_KIND_CODE
                                  ,A.OCCR_ORDR                                                                                   /* 배당발생순서 */
                                  ,A.LSTY_APPR_YM
                                  ,A.DVDN_SEQ_NO
                                  ,A.RGST_PRGM_ID
                                  ,A.LAST_CHMN_MPNO
                                  ,A.LAST_CHNG_DTTM
                                  ,A.PGM_ID
                                  ,A.FRSY_APPR_YM
                                  ,A.DVDN_ACCU_DVCD
                                  ,A.LSTY_APPR_DATE
                                  ,A.LSTY_DVDN_PRCP                                                                              /* 종년도배당원금_보정 2021-04-08 */
                                  ,A.LSTY_NPAY_PIAT
                                  ,A.BFYY_NPAY_PIAT
                                  ,CASE WHEN A.DVDN_KIND_CODE BETWEEN '03' AND '07' THEN ADD_MONTHS(A.LSTY_APPR_DATE,  12)      /* XXXX0401, XXXX0613, XXXX0614, XXXX0711 만 존재 */
                                        WHEN A.CNTT_LEAP_YEAR = 1 THEN LAST_DAY(ADD_MONTHS(A.LSTY_APPR_DATE,  12))
                                        ELSE CASE WHEN MOD(TO_NUMBER(SUBSTR(TO_CHAR(A.LSTY_APPR_DATE, 'YYYYMMDD'),1,4)) + 1, 4) = 0
                                                   AND SUBSTR(TO_CHAR(A.LSTY_APPR_DATE, 'YYYYMMDD'),5,4) = '0228'
                                                  THEN TO_DATE(TO_CHAR(ADD_MONTHS(A.LSTY_APPR_DATE,  12), 'YYYY') || A.CNTT_DT, 'YYYYMMDD')
                                                  ELSE ADD_MONTHS(A.LSTY_APPR_DATE,  12) END
                                          END                                                                                  AS NEXT_APPR_DATE     /* 다음년도 */
                                  ,CASE WHEN A.DVDN_KIND_CODE BETWEEN '03' AND '07' THEN ADD_MONTHS(A.LSTY_APPR_DATE,  -12)
                                        WHEN A.CNTT_LEAP_YEAR = 1 THEN LAST_DAY(ADD_MONTHS(A.LSTY_APPR_DATE, -12))
                                        ELSE CASE WHEN MOD(TO_NUMBER(SUBSTR(TO_CHAR(A.LSTY_APPR_DATE, 'YYYYMMDD'),1,4)) - 1, 4) = 0
                                                   AND SUBSTR(TO_CHAR(A.LSTY_APPR_DATE, 'YYYYMMDD'),5,4) = '0228'
                                                  THEN TO_DATE(TO_CHAR(ADD_MONTHS(A.LSTY_APPR_DATE, -12), 'YYYY') || A.CNTT_DT, 'YYYYMMDD')
                                                  ELSE ADD_MONTHS(A.LSTY_APPR_DATE, -12) END
                                          END                                                                                  AS BEFO_APPR_DATE     /* 직전년도 2021-10-25 add_months(xxxx, 12 -> -12) */
                                  ,CASE WHEN TO_DATE(NVL(A.LAG_LSTY_APPR_DATE, '99991231') DEFAULT NULL ON CONVERSION ERROR, 'YYYYMMDD') IS NULL 
                                        THEN LAST_DAY(TO_DATE(SUBSTRB(A.LAG_LSTY_APPR_DATE,1,6)||'01', 'YYYYMMDD'))
                                        ELSE TO_DATE(NVL(A.LAG_LSTY_APPR_DATE, '99991231'), 'YYYYMMDD')
                                   END                                                                                         AS LAG_LSTY_APPR_DATE /* 20010229 일자 보정처리 필요 */
                                  ,A.LAG_LSTY_NPAY_PIAT
                                  ,A.LEAD_LSTY_NPAY_PIAT
                                  ,A.LEAD_BFYY_NPAY_PIAT
                                  ,CASE WHEN TO_DATE(NVL(A.LEAD_LSTY_APPR_DATE, '99991231') DEFAULT NULL ON CONVERSION ERROR, 'YYYYMMDD') IS NULL 
                                        THEN LAST_DAY(TO_DATE(SUBSTRB(A.LEAD_LSTY_APPR_DATE,1,6)||'01', 'YYYYMMDD'))
                                        ELSE TO_DATE(NVL(A.LEAD_LSTY_APPR_DATE, '99991231'), 'YYYYMMDD')
                                   END                                                                                         AS LEAD_LSTY_APPR_DATE
                                  ,A.LEAD_DVDN_SEQ_NO
                                  ,A.LAG_DVDN_SEQ_NO                                                                            /* 이전이력 배당일련번호  2021-04-28 */
                                  ,A.PRCP_DVSN                                                                                  /* 금액형태 분류                     */
                                  ,A.CNTT_DATE
                                  ,A.CNTT_LEAP_YEAR
                                  ,A.STDD_DATE
                                  ,A.CNTT_STAT_CODE
                                  ,A.IRKD_CODE_DTAL
                                  ,A.IRKD_CODE_ITEM
                                  ,A.CNTT_LAPS_DATE
                                  ,A.CNTT_ANPY_STDT
                                  ,A.ICCO_CHNC_DVSN
                                  ,A.ICSC_EXCC_DVSN
                                  ,B.CNTT_PRTR_NO
                                  ,C.JOIN_AGE
                                  ,CASE WHEN SUBSTR(A.ICSC_EXCC_DVSN,1,1) = '0' THEN NULL
                                        WHEN SUBSTR(A.ICSC_EXCC_DVSN,1,1) = 'A' THEN A.CNTT_ANPY_STDT                           /* AX의 정산일자는 연금개시일자 */
                                        WHEN SUBSTR(A.ICSC_EXCC_DVSN,1,1) = 'Z'                                                 /* Z15, Z18은 계약일자 + (15, 18 - 자녀의가입나이) 년 */
                                        THEN CASE WHEN CNTT_LEAP_YEAR = 1 THEN LAST_DAY(ADD_MONTHS(A.CNTT_DATE, (TO_NUMBER(SUBSTRB(A.ICSC_EXCC_DVSN, 2)) - NVL(C.JOIN_AGE,0)) * 12))
                                              ELSE ADD_MONTHS(A.CNTT_DATE, (TO_NUMBER(SUBSTRB(A.ICSC_EXCC_DVSN, 2)) - NVL(C.JOIN_AGE,0)) * 12) END
                                        ELSE NULL END                                                                         AS PIAM_STTL_DATE   /* 정산일자 */
                                  ,A.VALD_DVSN_CODE
                                  ,A.CNTT_EXTN_DATE
                             FROM TB_PADVDRMS_TMP0  A
                                 ,TB_ISAPLCMR B
                                 ,TB_ISAPLINS C
                            WHERE 1=1
                              AND A.POLY_NO            = B.POLY_NO(+)
                              AND A.VALD_DVSN_CODE     = B.VALD_DVSN_CODE(+)
                              AND B.CUST_ROLE_CODE(+)  = '23'
                              AND B.END_DATE      (+)  = '99991231'
                              AND B.DEL_YN        (+)  = 'N'
                              AND B.POLY_NO            = C.POLY_NO(+)
                              AND B.VALD_DVSN_CODE     = C.VALD_DVSN_CODE(+)
                              AND B.CNTT_PRTR_NO       = C.CNTT_PRTR_NO(+)
                              AND C.END_DATE      (+)  = '99991231'
                              AND C.DEL_YN        (+)  = 'N' 
                            )
                            ,TB_PADVDRMS_TMP11 AS (
                            SELECT /*+ FULL(A) PARALLEL(A 4) FULL(B) PARALLEL(B 4)  
                                       USE_HSAH(A,B)
                                    */
                                   A.POLY_NO
                                  ,A.DVDN_KIND_CODE
                                  ,A.OCCR_ORDR                                                                                  /* 배당발생순서 */
                                  ,A.LSTY_APPR_YM
                                  ,A.DVDN_SEQ_NO
                                  ,A.RGST_PRGM_ID
                                  ,A.LAST_CHMN_MPNO
                                  ,A.LAST_CHNG_DTTM
                                  ,A.PGM_ID
                                  ,A.FRSY_APPR_YM
                                  ,A.DVDN_ACCU_DVCD
                                  ,A.LSTY_APPR_DATE
                                  ,A.LSTY_DVDN_PRCP
                                  ,A.LSTY_NPAY_PIAT
                                  ,A.BFYY_NPAY_PIAT
                                  ,A.NEXT_APPR_DATE
                                  ,A.BEFO_APPR_DATE
                                  ,A.LAG_LSTY_APPR_DATE                                                                        AS LAG_LSTY_APPR_DATE
                                  ,A.LAG_LSTY_NPAY_PIAT
                                  ,A.LEAD_LSTY_NPAY_PIAT
                                  ,A.LEAD_BFYY_NPAY_PIAT
                                  ,A.LEAD_LSTY_APPR_DATE                                                                        AS LEAD_LSTY_APPR_DATE
                                  ,A.LEAD_DVDN_SEQ_NO
                                  ,A.LAG_DVDN_SEQ_NO                                                                            /* 이전이력 배당일련번호  2021-04-28 */
                                  ,A.PRCP_DVSN                                                                                  /* 금액형태 분류                     */
                                  ,A.CNTT_DATE
                                  ,A.CNTT_LEAP_YEAR
                                  ,CASE WHEN TO_CHAR(A.LAG_LSTY_APPR_DATE, 'YYYYMMDD') = '99991231' THEN 1 ELSE 0 END           AS NO_BEFO_DATA
                                  ,CASE WHEN A.LEAD_LSTY_APPR_DATE != A.NEXT_APPR_DATE THEN 1 ELSE 0 END                        AS NO_NEXT_DATA
                                  ,A.CNTT_STAT_CODE
                                  ,A.IRKD_CODE_DTAL
                                  ,A.IRKD_CODE_ITEM
                                  ,A.CNTT_LAPS_DATE
                                  ,A.CNTT_ANPY_STDT
                                  ,A.ICCO_CHNC_DVSN
                                  ,A.ICSC_EXCC_DVSN
                                  ,A.CNTT_PRTR_NO
                                  ,A.JOIN_AGE
                                  ,A.PIAM_STTL_DATE
                                  ,CASE WHEN A.PIAM_STTL_DATE IS NULL             THEN '0'  /* 적립중인 건  */
                                        WHEN A.PIAM_STTL_DATE < A.LSTY_APPR_DATE  THEN '0'  /* 적립중인 건  */
                                        WHEN A.PIAM_STTL_DATE > A.STDD_DATE       THEN '0'  /* 적립중인 건  */
                                        WHEN A.PIAM_STTL_DATE = A.LSTY_APPR_DATE  THEN '1'  /* 매증정산일자 */
                                        ELSE '0' END                                                 AS STTL_DVSN
                                  ,B.PAYM_DATE
                                  ,A.CNTT_EXTN_DATE
                              FROM TB_PADVDRMS_TMP1  A
                                  ,TB_PADVDPAD_TMP   B
                             WHERE 1= 1
                               AND A.POLY_NO         = B.POLY_NO (+)
                               AND A.DVDN_KIND_CODE  = B.DVDN_KIND_CODE(+)
                               AND B.PAYM_DATE(+)  BETWEEN A.BEFO_APPR_DATE AND A.LSTY_APPR_DATE
                            )
                            , TB_PADVDRMS_TMP2 AS (      
                            SELECT  /*+ FULL(A) PARALLEL(A 4) FULL(B) PARALLEL(B 4)  
                                       USE_HSAH(A B)
                                    */
                                  'MIG_002'                                                                 AS RGSR_EMNB         /* 배당적립테이블에서 컨버전된 레코드 표기 */
                                  ,SYSDATE                                                                  AS RGST_DTTM         /* 최초등록일시                            */
                                  ,A.RGST_PRGM_ID                                                           AS RGST_PRGM_ID      /* 등록프로그램ID                          */
                                  ,A.LAST_CHMN_MPNO                                                         AS LAST_CHNR_EMNB    /* 최종변경자사번                          */
                                  ,A.LAST_CHNG_DTTM                                                         AS LAST_CHNG_DTTM    /* 최종변경일시                            */
                                  ,SUBSTRB(A.PGM_ID, 1, 50)                                                 AS LAST_CHNG_PRGM_ID /* 최종변경프로그램ID                      */
                                  ,'N'                                                                      AS DLTN_YN           /* 삭제여부                                */
                                  ,'P' || LPAD(A.POLY_NO, 9, 0)                                             AS CNTC_AGMT_NO      /* 계약AGREEMENT번호                       */
                                  ,A.POLY_NO                                                                AS POLY_NO           /* 증권번호                                */
                                  ,A.DVDN_KIND_CODE                                                         AS DVDN_KIND_CODE    /* 배당종류코드                            */
                            --      ,A.LSTY_APPR_YM                                                           AS LSTY_APPR_YM      /* 배당발생년월                            */
                                  ,CASE WHEN A.STTL_DVSN = '0' THEN    /* 종년에 발생했고 매증할 것이 아니면 종년 미지급만 취한다 */
                                        CASE WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN = 3 AND A.LAG_LSTY_NPAY_PIAT = A.BFYY_NPAY_PIAT
                                              AND A.LSTY_NPAY_PIAT > 0 AND A.LEAD_DVDN_SEQ_NO = 2                                                THEN A.LSTY_APPR_DATE                /*  10  */
                                             WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN < 4                                        THEN TO_DATE('99991231', 'YYYYMMDD') /*  20  */
                                             WHEN A.OCCR_ORDR = 1 AND A.NO_NEXT_DATA = 1 AND A.NO_BEFO_DATA = 1 AND  A.PRCP_DVSN = 4             THEN A.LSTY_APPR_DATE                /*  30  */
                                             WHEN A.DVDN_SEQ_NO = 2 AND A.PRCP_DVSN = 1  AND A.LSTY_APPR_DATE = A.LAG_LSTY_APPR_DATE             THEN TO_DATE('99991231', 'YYYYMMDD') /*  40  */
                                             WHEN A.PRCP_DVSN = 1 AND A.DVDN_SEQ_NO       = 3                                                    THEN TO_DATE('99991231', 'YYYYMMDD') /*  45  */
                                             WHEN A.PRCP_DVSN = 1 AND A.NEXT_APPR_DATE != A.LEAD_LSTY_APPR_DATE                                  THEN A.BEFO_APPR_DATE                /*  50  */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LEAD_BFYY_NPAY_PIAT = 0                                   THEN A.LSTY_APPR_DATE                /* 110  */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                              AND A.LEAD_LSTY_NPAY_PIAT = 0      AND A.PAYM_DATE IS NOT NULL                                     THEN A.BEFO_APPR_DATE /* 113  다음이력이 지급 - 지급일자가 응당일 이전 인 경우 직전년도 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LEAD_LSTY_NPAY_PIAT = 0                                                                     THEN A.LSTY_APPR_DATE                /* 111 -- A.LSTY_NPAY_PIAT */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP <> A.LEAD_LSTY_NPAY_PIAT                                                     THEN A.BEFO_APPR_DATE                /* 112 전년도 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP = A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0                             THEN A.BEFO_APPR_DATE                /* 115 전년도  */
                                             WHEN A.DVDN_SEQ_NO       = 3                                                                        THEN TO_DATE('99991231', 'YYYYMMDD') /* 130         */
                                             WHEN A.DVDN_SEQ_NO       = 2  AND NVL(A.LEAD_DVDN_SEQ_NO, 0) = 3                                    THEN A.LSTY_APPR_DATE                /* 135         */
                                             WHEN A.NO_NEXT_DATA = 1 AND A.DVDN_SEQ_NO  = 2 AND A.LSTY_DVDN_PRCP = A.LSTY_NPAY_PIAT              THEN A.LSTY_APPR_DATE                /* 138 이력이 2이고 최종데이터 이면서 발생원금과 원리금이 같으면 원금  2021-10-25 */
                                             WHEN A.DVDN_SEQ_NO       = 2                                                                        THEN TO_DATE('99991231', 'YYYYMMDD') /* 140         */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN A.LSTY_APPR_DATE /* 145 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN A.BEFO_APPR_DATE /* 146 전년도   */
                                             /* ########### 2021-10-30 오후 2:55:54 아래 라인 CNTT_LAPS_DATE -> CNTT_EXTN_DATE 수정하였음. */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN A.LSTY_APPR_DATE /* 147 LSTY_DVDN_PRCP -- 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN A.BEFO_APPR_DATE /* 148 BFYY_NPAY_PIAT -- 전년도   */

                                             WHEN A.NO_NEXT_DATA = 1        AND NVL(A.LEAD_DVDN_SEQ_NO, 0) != 2                                  THEN A.LSTY_APPR_DATE  /* 150 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2                                                                 THEN A.LSTY_APPR_DATE  /* 160 */
                                             ELSE TO_DATE('99991231', 'YYYYMMDD') END
                                        ELSE       
                                        CASE /* 정산일자에 발생 또는 적립중인 경우 */
                                             WHEN A.BEFO_APPR_DATE != A.LAG_LSTY_APPR_DATE AND A.LSTY_APPR_DATE = A.PIAM_STTL_DATE AND A.LSTY_NPAY_PIAT = A.LEAD_BFYY_NPAY_PIAT AND A.PRCP_DVSN = 6
                                                  AND A.LEAD_DVDN_SEQ_NO = 1                                                                          THEN TO_DATE('99991231', 'YYYYMMDD') /* 195 직전 적립중이 없고 정산일자에 발생 이후 적립 중인 건 */
                                             WHEN B.NO = 1 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT                               THEN A.BEFO_APPR_DATE  /* 210 정산일자 & 정상데이터면 전년도미지급원리금을 전년도 발생금으로      */
                                             WHEN B.NO = 2 AND A.LSTY_DVDN_PRCP =  A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE THEN TO_DATE('99991231', 'YYYYMMDD') /* 215 -- 999999999999999 */
                                             WHEN B.NO = 2 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0      THEN A.LSTY_APPR_DATE  /* 220 -- A.LSTY_DVDN_PRCP */  /* 정산일자 & 정상데이터이고 종년도발생원금 있으면   종년도발생원금  */
                                             ELSE TO_DATE('99991231', 'YYYYMMDD') END                                                                                        /*  230                    */
                                   END                                                                                                           AS DVDN_RFDT         /* 배당발생일자 */
                                  ,CASE WHEN A.STTL_DVSN = '0' THEN    /* 종년에 발생했고 매증할 것이 아니면 종년 미지급만 취한다 */
                                        CASE WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN = 3 AND A.LAG_LSTY_NPAY_PIAT = A.BFYY_NPAY_PIAT
                                              AND A.LSTY_NPAY_PIAT > 0 AND A.LEAD_DVDN_SEQ_NO = 2                                                THEN A.LSTY_NPAY_PIAT /*  10  */
                                             WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN < 4                                        THEN 999999999999999  /*  20  */
                                             WHEN A.OCCR_ORDR = 1 AND A.NO_NEXT_DATA = 1 AND A.NO_BEFO_DATA = 1 AND  A.PRCP_DVSN = 4             THEN A.LSTY_DVDN_PRCP /*  30  */
                                             WHEN A.DVDN_SEQ_NO = 2 AND A.PRCP_DVSN = 1  AND A.LSTY_APPR_DATE = A.LAG_LSTY_APPR_DATE             THEN 999999999999999  /*  40  */
                                             WHEN A.PRCP_DVSN = 1 AND A.DVDN_SEQ_NO       = 3                                                    THEN 999999999999999  /*  45  */
                                             WHEN A.PRCP_DVSN = 1 AND A.NEXT_APPR_DATE != A.LEAD_LSTY_APPR_DATE                                  THEN A.BFYY_NPAY_PIAT /*  50  */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LEAD_BFYY_NPAY_PIAT = 0                                   THEN A.LSTY_NPAY_PIAT /* 110  */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                              AND A.LEAD_LSTY_NPAY_PIAT = 0      AND A.PAYM_DATE IS NOT NULL                                     THEN A.BFYY_NPAY_PIAT  /* 113   다음이력이 지급 - 지급일자가 응당일 이전 인 경우 직전년도 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LEAD_LSTY_NPAY_PIAT = 0                                                                     THEN A.LSTY_NPAY_PIAT  /* 111 - 전년도 -- A.LEAD_BFYY_NPAY_PIAT */
                                              WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP <> A.LEAD_LSTY_NPAY_PIAT                                                     THEN A.BFYY_NPAY_PIAT  /* 112 - 전년도 -- A.LEAD_BFYY_NPAY_PIAT */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP = A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0                             THEN A.BFYY_NPAY_PIAT  /* 115 전년도 -- A.LEAD_BFYY_NPAY_PIAT */
                                             WHEN A.DVDN_SEQ_NO       = 3                                                                        THEN 999999999999999   /* 130                                 */
                                             WHEN A.DVDN_SEQ_NO       = 2  AND NVL(A.LEAD_DVDN_SEQ_NO, 0) = 3                                    THEN A.LSTY_NPAY_PIAT  /* 135                                 */
                                             WHEN A.NO_NEXT_DATA = 1 AND A.DVDN_SEQ_NO  = 2 AND A.LSTY_DVDN_PRCP = A.LSTY_NPAY_PIAT              THEN A.LSTY_DVDN_PRCP  /* 138 이력이 2이고 최종데이터 이면서 발생원금과 원리금이 같으면 원금  2021-10-25 */
                                             WHEN A.DVDN_SEQ_NO       = 2                                                                        THEN 999999999999999   /* 140                                 */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN A.LSTY_DVDN_PRCP /* 145 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN A.BFYY_NPAY_PIAT /* 146 전년도   */
                                             /* ########### 2021-10-30 오후 2:55:54 아래 라인 CNTT_LAPS_DATE -> CNTT_EXTN_DATE 수정하였음. */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN A.LSTY_DVDN_PRCP /* 147 LSTY_DVDN_PRCP -- 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN A.BFYY_NPAY_PIAT /* 148 BFYY_NPAY_PIAT -- 전년도   */

                                             WHEN A.NO_NEXT_DATA = 1        AND NVL(A.LEAD_DVDN_SEQ_NO, 0) != 2                                  THEN A.LSTY_NPAY_PIAT  /* 150 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2                                                                 THEN A.LSTY_NPAY_PIAT  /* 160 */
                                             ELSE 999999999999999 END                                                                                                   /* 190 */
                                        ELSE       /* 정산일자 배당적립중 존재 정산일까지  */
                                        CASE
                                             WHEN A.BEFO_APPR_DATE != A.LAG_LSTY_APPR_DATE AND A.LSTY_APPR_DATE = A.PIAM_STTL_DATE AND A.LSTY_NPAY_PIAT = A.LEAD_BFYY_NPAY_PIAT AND A.PRCP_DVSN = 6
                                              AND A.LEAD_DVDN_SEQ_NO = 1                                                                              THEN 999999999999999    /* 195 직전 적립중이 없고 정산일자에 발생 이후 적립 중인 건  */
                                             WHEN B.NO = 1 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT                               THEN A.BFYY_NPAY_PIAT   /* 210 정산일자 & 정상데이터면 전년도미지급원리금을 전년도 발생금으로      */
                                             WHEN B.NO = 2 AND A.LSTY_DVDN_PRCP =  A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE THEN 999999999999999    /* 215 -- 999999999999999 */
                                             WHEN B.NO = 2 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0      THEN A.LSTY_DVDN_PRCP   /*220 -- A.LSTY_DVDN_PRCP */ /* 정산일자 & 정상데이터이고 종년도발생원금 있으면   종년도발생원금  */
                                             ELSE 999999999999999 END
                                   END                                                                     AS  DVDN_PRCP                                /* 배당원금 */
                                  ,CASE WHEN A.STTL_DVSN = '0' THEN    /* 종년에 발생했고 매증할 것이 아니면 종년 미지급만 취한다 */
                                        CASE WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN = 3 AND A.LAG_LSTY_NPAY_PIAT = A.BFYY_NPAY_PIAT
                                              AND A.LSTY_NPAY_PIAT > 0 AND A.LEAD_DVDN_SEQ_NO = 2                                                THEN  10 /* A.LSTY_NPAY_PIAT   */
                                             WHEN A.PIAM_STTL_DATE = A.BEFO_APPR_DATE AND A.PRCP_DVSN < 4                                        THEN  20 /* 999999999999999    */
                                             WHEN A.OCCR_ORDR = 1 AND A.NO_NEXT_DATA = 1 AND A.NO_BEFO_DATA = 1 AND  A.PRCP_DVSN = 4             THEN  30 /* A.LSTY_DVDN_PRCP   */
                                             WHEN A.DVDN_SEQ_NO = 2 AND A.PRCP_DVSN = 1  AND A.LSTY_APPR_DATE = A.LAG_LSTY_APPR_DATE             THEN  40 /* 999999999999999    */
                                             WHEN A.PRCP_DVSN = 1 AND A.DVDN_SEQ_NO       = 3                                                    THEN  45 /* 999999999999999    */
                                             WHEN A.PRCP_DVSN = 1 AND A.NEXT_APPR_DATE != A.LEAD_LSTY_APPR_DATE                                  THEN  50 /* A.BFYY_NPAY_PIAT   */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LEAD_BFYY_NPAY_PIAT = 0                                   THEN 110 /* A.LSTY_NPAY_PIAT   */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                              AND A.LEAD_LSTY_NPAY_PIAT = 0      AND A.PAYM_DATE IS NOT NULL                                     THEN 113 /* A.BFYY_NPAY_PIAT   다음이력이 지급 - 지급일자가 응당일 이전 인 경우 직전년도 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                              AND A.LEAD_LSTY_NPAY_PIAT = 0                                                                      THEN 111 /* A.LSTY_NPAY_PIAT   다음이력이 지급 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP <> A.LEAD_LSTY_NPAY_PIAT                                                     THEN 112 /* A.BFYY_NPAY_PIAT -- 전년도 */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2 AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE
                                               AND A.LSTY_DVDN_PRCP = A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0                             THEN 115 /* A.BFYY_NPAY_PIAT -- 전년도 */
                                             WHEN A.DVDN_SEQ_NO       = 3                                                                        THEN 130 /* 999999999999999            */
                                             WHEN A.DVDN_SEQ_NO       = 2  AND NVL(A.LEAD_DVDN_SEQ_NO, 0)  =3                                    THEN 135 /* A.LSTY_NPAY_PIAT           */
                                             WHEN A.NO_NEXT_DATA = 1 AND A.DVDN_SEQ_NO  = 2 AND A.LSTY_DVDN_PRCP = A.LSTY_NPAY_PIAT              THEN 138 /* A.LSTY_DVDN_PRCP 이력이 2이고 최종데이터 이면서 발생원금과 원리금이 같으면 원금 2021-10-25 */
                                             WHEN A.DVDN_SEQ_NO       = 2                                                                        THEN 140 /* 999999999999999            */
                                             /* 전년도배당발생일자~당해년도배당발생일자 사이에 실효일자가 있으면 종년도발생배당원금과 전년도미지급원리금 쪼갠다. */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN 145 /* LSTY_DVDN_PRCP -- 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE ='4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN 146 /* BFYY_NPAY_PIAT -- 전년도   */
                                             /* 전년도배당발생일자~당해년도배당발생일자 사이에 감소일자가 있으면 종년도발생배당원금과 전년도미지급원리금 쪼갠다. */
                                             /* ########### 2021-10-30 오후 2:55:54 아래 라인 CNTT_LAPS_DATE -> CNTT_EXTN_DATE 수정하였음. */
                                             WHEN B.NO = 1 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN 147 /* LSTY_DVDN_PRCP -- 당해년도 */
                                             WHEN B.NO = 2 AND A.CNTT_STAT_CODE >'9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN 148 /* BFYY_NPAY_PIAT -- 전년도   */
                                             WHEN A.NO_NEXT_DATA      = 1        AND NVL(A.LEAD_DVDN_SEQ_NO, 0) != 2                             THEN 150 /* A.LSTY_NPAY_PIAT  */
                                             WHEN NVL(A.LEAD_DVDN_SEQ_NO, 0) = 2                                                                 THEN 160 /* A.LSTY_NPAY_PIAT  */
                                             ELSE 190                                                                                                     /* 999999999999999   */
                                             END
                                        ELSE       /* 정산일자 배당적립중 존재 정산일까지  */
                                        CASE
                                             WHEN A.BEFO_APPR_DATE != A.LAG_LSTY_APPR_DATE AND A.LSTY_APPR_DATE = A.PIAM_STTL_DATE AND A.LSTY_NPAY_PIAT = A.LEAD_BFYY_NPAY_PIAT AND A.PRCP_DVSN = 6
                                                  AND A.LEAD_DVDN_SEQ_NO = 1                                                                          THEN 195 /* 999999999999999 */
                                             WHEN B.NO = 1 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT                               THEN 210 /* A.BFYY_NPAY_PIAT */ /* 정산일자 & 정상데이터면 전년도미지급원리금을 전년도 발생금으로      */
                                             WHEN B.NO = 2 AND A.LSTY_DVDN_PRCP =  A.LEAD_LSTY_NPAY_PIAT AND A.LSTY_APPR_DATE = A.LEAD_LSTY_APPR_DATE THEN 215 /* 999999999999999  */
                                             WHEN B.NO = 2 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT AND A.LSTY_DVDN_PRCP > 0      THEN 220 /* A.LSTY_DVDN_PRCP */ /* 정산일자 & 정상데이터이고 종년도발생원금 있으면   종년도발생원금  */
                                             ELSE 230                                                                                                          /* 999999999999999 */
                                         END
                                   END                                                                     AS  DVDN_PRCP_DVSN
                                  ,A.OCCR_ORDR
                                  ,A.DVDN_SEQ_NO                                                           AS DVDN_SEQ_NO
                                  ,A.PRCP_DVSN                                                                                /* 금액형태 분류       */
                                  ,A.LSTY_APPR_DATE                                                                           /* 배당발생일자        */
                                  ,A.LSTY_DVDN_PRCP                                                                           /* 종년도발생원금      */
                                  ,A.LSTY_NPAY_PIAT                                                                           /* 종년도미지급원리금  */
                                  ,A.BFYY_NPAY_PIAT                                                                           /* 전년도미지급원리금  */
                                  ,A.NO_BEFO_DATA
                                  ,A.NO_NEXT_DATA
                                  ,A.NEXT_APPR_DATE
                                  ,A.BEFO_APPR_DATE
                                  ,A.LAG_LSTY_APPR_DATE                                                                        /* 직전배당발생일자                   */
                                  ,A.LAG_LSTY_NPAY_PIAT                                                                        /* 직후종년도미지급원리금             */
                                  ,A.LEAD_LSTY_NPAY_PIAT                                                                       /* 직후종년도미지급원리금             */
                                  ,A.LEAD_BFYY_NPAY_PIAT                                                                       /* 직후전년도미지급원리금             */
                                  ,A.LEAD_LSTY_APPR_DATE                                                                       /* 직후배당발생일자                   */
                                  ,A.LEAD_DVDN_SEQ_NO                                                                          /* 직후배당일련번호                   */
                                  ,A.LAG_DVDN_SEQ_NO                                                                           /* 이전이력 배당일련번호  2021-04-28  */
                                  ,B.NO
                                  ,A.CNTT_DATE
                                  ,A.CNTT_STAT_CODE
                                  ,A.CNTT_LAPS_DATE
                                  ,A.CNTT_ANPY_STDT
                                  ,A.ICCO_CHNC_DVSN
                                  ,A.ICSC_EXCC_DVSN
                                  ,A.JOIN_AGE
                                  ,A.PIAM_STTL_DATE                                                                            /* 정산일자 */
                                  ,A.STTL_DVSN
                                  ,A.PAYM_DATE
                                  ,A.CNTT_EXTN_DATE
                              FROM TB_PADVDRMS_TMP11 A
                                  ,TB_UVDUM001 B
                             WHERE CASE 
                                        WHEN A.STTL_DVSN = 1 AND A.LSTY_NPAY_PIAT >= A.LSTY_DVDN_PRCP +  A.BFYY_NPAY_PIAT AND A.PRCP_DVSN >= 5       THEN 2
                                        WHEN A.CNTT_STAT_CODE = '4' AND A.BEFO_APPR_DATE < A.CNTT_LAPS_DATE AND A.CNTT_LAPS_DATE <= A.LSTY_APPR_DATE THEN 2
                                        WHEN A.CNTT_STAT_CODE > '9' AND A.BEFO_APPR_DATE < A.CNTT_EXTN_DATE AND A.CNTT_EXTN_DATE <= A.LSTY_APPR_DATE THEN 2
                                        ELSE 1 END >= B.NO
                            )
                        SELECT '1' AS CNT
                        FROM (
                                SELECT '1'
                                      ,ROW_NUMBER() OVER (PARTITION BY T1.POLY_NO, T1.DVDN_KIND_CODE, T1.DVDN_RFDT, T1.DVDN_PRCP ORDER BY T1.RGST_PRGM_ID, T1.DVDN_PRCP_DVSN) ORDR_SEQ
                                  FROM TB_PADVDRMS_TMP2 T1
                                     WHERE T1.DVDN_PRCP > 0
                                     AND T1.DVDN_PRCP <  999999999999999
                             )
                         WHERE ORDR_SEQ = 1
                    )
                 UNION ALL 
                    SELECT 
                           1        AS GRP_NO
                         , 0     AS ASIS_VAL
                         , COUNT(1) AS TOBE_VAL
                      FROM TBL_SVPPRCDVOC
                 ) A
       GROUP BY GRP_NO
        )  A
;

   /* --------------- 집합검증( END ) --------------- */
   
   V_ROW_CNT := V_ROW_CNT + SQL%ROWCOUNT;
   
   COMMIT;   
   
   /* --------------- 중복검증 --------------- */   

DELETE FROM MIG_DATA_VRFCNTN_SVP
WHERE VRFC_GBN = '중복검증'
AND TOBE_TAB = V_TABLE_NAME;

COMMIT;
      
INSERT INTO MIG_DATA_VRFCNTN_SVP
SELECT NVL((SELECT MAX(SEQ_NO) + 1 FROM MIG_DATA_VRFCNTN_SVP), 1) AS SEQ_NO 
     , '중복검증'                                                 AS VRFC_GBN
     , '배당금발생 테이블중복검증'                                AS VRFC_NM
     , SYSDATE                                                    AS VRFC_DT
     , 'TBL_SVPPRCDVOC'                                           AS TOBE_TAB
     , NULL                                                       AS TOBE_COL
     , NULL                                                       AS ASIS_VAL
     , TOBE_VAL                                                   AS TOBE_VAL
     , NULL                                                       AS GRP_NO
     , NULL                                                       AS BREAK_ASIS1
     , NULL                                                       AS BREAK_TOBE1
     , NULL                                                       AS BREAK_ASIS2
     , NULL                                                       AS BREAK_TOBE2
     , NULL                                                       AS BREAK_ASIS3
     , NULL                                                       AS BREAK_TOBE3
  FROM ( 
         SELECT NVL(SUM(CNT), 0) AS TOBE_VAL 
           FROM ( SELECT /*+ FULL(A) PARALLEL(A 4) */ 
                         COUNT(1) AS CNT
                    FROM TBL_SVPPRCDVOC A 
                GROUP BY A.DVDD_OCRN_SUID
                  HAVING COUNT(1) > 1
                 )
        )
;

   /* --------------- 중복검증( END ) --------------- */   
   
    V_ROW_CNT := V_ROW_CNT + SQL%ROWCOUNT;
   
   COMMIT;   
     
   ------------------------------------------------------------------------------------------------------------------------------
   
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   
   EXCEPTION
      WHEN OTHERS THEN
      ROLLBACK;
   
   /* --------------- 오류로그( END ) --------------- */
   
   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);

END MIG_PRC_ALL_VER_TBL_SVPPRCDVOC;
----------------------------------
create or replace PROCEDURE MIG_PRC_B2EN_JOB
IS
BEGIN

	MIG_PRC_TBL_MONEY_PROV('0', 'MIG_PRC_TBL_MONEY_PROV');
	MIG_PRC_TBL_MONEY_PROV_ANCHOR('0', 'MIG_PRC_TBL_MONEY_PROV_ANCHOR');

END;
------------------------
create or replace PROCEDURE       MIG_PRC_B2EN_JOB_1
IS
	V_JOB_SEQ	NUMBER;
	
BEGIN

	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_RA_FP_DTL', 'MIG_PRC_TBL_RA_FP_DTL', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_RA_FP_DTL('0', 'MIG_PRC_TBL_RA_FP_DTL');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_RA_FP_DTL';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_RA_PLCY_SUPP_DTL', 'MIG_PRC_TBL_RA_PLCY_SUPP_DTL', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_RA_PLCY_SUPP_DTL('0', 'MIG_PRC_TBL_RA_PLCY_SUPP_DTL');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_RA_PLCY_SUPP_DTL';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_IRA_FUND_ITEM', 'MIG_PRC_TBL_IRA_FUND_ITEM', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_IRA_FUND_ITEM('0', 'MIG_PRC_TBL_IRA_FUND_ITEM');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_IRA_FUND_ITEM';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_IRA_FUND_DTL', 'MIG_PRC_TBL_IRA_FUND_DTL', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_IRA_FUND_DTL('0', 'MIG_PRC_TBL_IRA_FUND_DTL');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_IRA_FUND_DTL';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_IRA', 'MIG_PRC_TBL_IRA', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_IRA('0', 'MIG_PRC_TBL_IRA');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_IRA';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_RA', 'MIG_PRC_TBL_RA', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_RA('0', 'MIG_PRC_TBL_RA');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_RA';
	COMMIT;
	
	/* TBL_RA_TX */
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_RA_TX', 'MIG_PRC_MAPKEY_TBL_RA_TX_100', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_RA_TX_100('0', 'MIG_PRC_MAPKEY_TBL_RA_TX_100');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_RA_TX_100';
	COMMIT;
	
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_RA_TX', 'MIG_PRC_MAPKEY_TBL_RA_TX_900', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_RA_TX_900('0', 'MIG_PRC_MAPKEY_TBL_RA_TX_900');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_RA_TX_900';
	COMMIT;

	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_RA_TX', 'MIG_PRC_MAPKEY_TBL_RA_TX_FIX', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_RA_TX_FIX('0', 'MIG_PRC_MAPKEY_TBL_RA_TX_FIX');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_RA_TX_FIX';
	COMMIT;
	
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_RA_TX', 'MIG_PRC_TBL_RA_TX', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_RA_TX('0', 'MIG_PRC_TBL_RA_TX');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_RA_TX';
	COMMIT;
	------------------
	/* TBL_APPLICATION_PROPERTY */
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_APPLICATION_PROPERTY', 'MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_100', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_100('0', 'MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_100');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_100';
	COMMIT;
	
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_APPLICATION_PROPERTY', 'MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_900', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_900('0', 'MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_900');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_900';
	COMMIT;

	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_APPLICATION_PROPERTY', 'MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_FIX', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_FIX('0', 'MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_FIX');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_FIX';
	COMMIT;

	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_APPLICATION_PROPERTY', 'MIG_PRC_TBL_APPLICATION_PROPERTY', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_APPLICATION_PROPERTY('0', 'MIG_PRC_TBL_APPLICATION_PROPERTY');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_APPLICATION_PROPERTY';
	COMMIT;
	------------------
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_APPLICATION_SET_PROPERTY', 'MIG_PRC_TBL_APPLICATION_SET_PROPERTY', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_APPLICATION_SET_PROPERTY('0', 'MIG_PRC_TBL_APPLICATION_SET_PROPERTY');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_APPLICATION_SET_PROPERTY';
	COMMIT;
	
	/* TBL_APPLICATION_TX */
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_APPLICATION_TX', 'MIG_PRC_MAPKEY_TBL_APPLICATION_TX_100', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_APPLICATION_TX_100('0', 'MIG_PRC_MAPKEY_TBL_APPLICATION_TX_100');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_APPLICATION_TX_100';
	COMMIT;
	
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_APPLICATION_TX', 'MIG_PRC_MAPKEY_TBL_APPLICATION_TX_900', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_APPLICATION_TX_900('0', 'MIG_PRC_MAPKEY_TBL_APPLICATION_TX_900');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_APPLICATION_TX_900';
	COMMIT;
	
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_APPLICATION_TX', 'MIG_PRC_MAPKEY_TBL_APPLICATION_TX_FIX', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_APPLICATION_TX_FIX('0', 'MIG_PRC_MAPKEY_TBL_APPLICATION_TX_FIX');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_APPLICATION_TX_FIX';
	COMMIT;
	
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_APPLICATION_TX', 'MIG_PRC_TBL_APPLICATION_TX', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_APPLICATION_TX('0', 'MIG_PRC_TBL_APPLICATION_TX');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_APPLICATION_TX';
	COMMIT;
	------------------
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PREMIUM_PLAN', 'MIG_PRC_TBL_PREMIUM_PLAN', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_PREMIUM_PLAN('0', 'MIG_PRC_TBL_PREMIUM_PLAN');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PREMIUM_PLAN';
	COMMIT;
	
	/* TBL_APPLICATION_TX */
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PREMIUM_PLAN_TX', 'MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_100', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_100('0', 'MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_100');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_100';
	COMMIT;
	
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PREMIUM_PLAN_TX', 'MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_900', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_900('0', 'MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_900');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_900';
	COMMIT;
	
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PREMIUM_PLAN_TX', 'MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_FIX', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_FIX('0', 'MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_FIX');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_MAPKEY_TBL_PREMIUM_PLAN_TX_FIX';
	COMMIT;
	
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PREMIUM_PLAN_TX', 'MIG_PRC_TBL_PREMIUM_PLAN_TX', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_PREMIUM_PLAN_TX('0', 'MIG_PRC_TBL_PREMIUM_PLAN_TX');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PREMIUM_PLAN_TX';
	COMMIT;
	------------------

END;

------------------------------
create or replace PROCEDURE       MIG_PRC_B2EN_JOB_2
IS
	V_JOB_SEQ	NUMBER;
	
BEGIN

	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_MONEY_SCHEDULER', 'MIG_PRC_TBL_MONEY_SCHEDULER', SYSDATE, NULL);
	COMMIT;
--	MIG_PRC_TBL_MONEY_SCHEDULER('0', 'MIG_PRC_TBL_MONEY_SCHEDULER');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_MONEY_SCHEDULER';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_MONEY_SCHEDULER_STATUS', 'MIG_PRC_TBL_MONEY_SCHEDULER_STATUS', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_MONEY_SCHEDULER_STATUS('0', 'MIG_PRC_TBL_MONEY_SCHEDULER_STATUS');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_MONEY_SCHEDULER_STATUS';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_MONEY_PROV', 'MIG_PRC_TBL_MONEY_PROV', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_MONEY_PROV('0', 'MIG_PRC_TBL_MONEY_PROV');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_MONEY_PROV';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_MONEY_PROV_ANCHOR', 'MIG_PRC_TBL_MONEY_PROV_ANCHOR', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_MONEY_PROV_ANCHOR('0', 'MIG_PRC_TBL_MONEY_PROV_ANCHOR');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_MONEY_PROV_ANCHOR';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_MONEY_PROV_ELEMENT', 'MIG_PRC_TBL_MONEY_PROV_ELEMENT', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_MONEY_PROV_ELEMENT('0', 'MIG_PRC_TBL_MONEY_PROV_ELEMENT');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_MONEY_PROV_ELEMENT';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_MONEY_PROV_STATUS', 'MIG_PRC_TBL_MONEY_PROV_STATUS', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_MONEY_PROV_STATUS('0', 'MIG_PRC_TBL_MONEY_PROV_STATUS');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_MONEY_PROV_STATUS';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_MONTHLY_FINREV_COMP', 'MIG_PRC_TBL_MONTHLY_FINREV_COMP', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_MONTHLY_FINREV_COMP('0', 'MIG_PRC_TBL_MONTHLY_FINREV_COMP');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_MONTHLY_FINREV_COMP';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_MONTHLY_FINFR_RESERVE', 'MIG_PRC_TBL_MONTHLY_FINFR_RESERVE', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_MONTHLY_FINFR_RESERVE('0', 'MIG_PRC_TBL_MONTHLY_FINFR_RESERVE');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_MONTHLY_FINFR_RESERVE';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_MONTHLY_FIN_STATUS', 'MIG_PRC_TBL_MONTHLY_FIN_STATUS', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_MONTHLY_FIN_STATUS('0', 'MIG_PRC_TBL_MONTHLY_FIN_STATUS');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_MONTHLY_FIN_STATUS';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PREM_PAYMENT', 'MIG_PRC_TBL_PREM_PAYMENT', SYSDATE, NULL);
	COMMIT;
--	MIG_PRC_TBL_PREM_PAYMENT('0', 'MIG_PRC_TBL_PREM_PAYMENT');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PREM_PAYMENT';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PREM_PAYMENT_COMP', 'MIG_PRC_TBL_PREM_PAYMENT_COMP', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_PREM_PAYMENT_COMP('0', 'MIG_PRC_TBL_PREM_PAYMENT_COMP');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PREM_PAYMENT_COMP';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_VAO_PREM_COLL', 'MIG_PRC_TBL_VAO_PREM_COLL', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_VAO_PREM_COLL('0', 'MIG_PRC_TBL_VAO_PREM_COLL');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_VAO_PREM_COLL';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_VAO_PREM_COLL_VERSION', 'MIG_PRC_TBL_VAO_PREM_COLL_VERSION', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_VAO_PREM_COLL_VERSION('0', 'MIG_PRC_TBL_VAO_PREM_COLL_VERSION');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_VAO_PREM_COLL_VERSION';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PARTY_ROLE', 'MIG_PRC_TBL_PARTY_ROLE', SYSDATE, NULL);
	COMMIT;
--	MIG_PRC_TBL_PARTY_ROLE('0', 'MIG_PRC_TBL_PARTY_ROLE');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PARTY_ROLE';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_ROLE_IN_ACTUAL', 'MIG_PRC_TBL_ROLE_IN_ACTUAL', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_ROLE_IN_ACTUAL('0', 'MIG_PRC_TBL_ROLE_IN_ACTUAL');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_ROLE_IN_ACTUAL';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_AGREEMENT_RIA_REL', 'MIG_PRC_TBL_AGREEMENT_RIA_REL', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_AGREEMENT_RIA_REL('0', 'MIG_PRC_TBL_AGREEMENT_RIA_REL');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_AGREEMENT_RIA_REL';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_COL_PROPERTY', 'MIG_PRC_TBL_COL_PROPERTY', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_COL_PROPERTY('0', 'MIG_PRC_TBL_COL_PROPERTY');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_COL_PROPERTY';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PROPERTY', 'MIG_PRC_TBL_PROPERTY', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_PROPERTY('0', 'MIG_PRC_TBL_PROPERTY');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PROPERTY';
	COMMIT;

END;
--------------------------
create or replace PROCEDURE       MIG_PRC_B2EN_JOB_3
IS
	V_JOB_SEQ	NUMBER;
	
BEGIN

	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PAYMENT_PROCESSING', 'MIG_PRC_TBL_PAYMENT_PROCESSING', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_PAYMENT_PROCESSING('0', 'MIG_PRC_TBL_PAYMENT_PROCESSING');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PAYMENT_PROCESSING';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PAYMENT', 'MIG_PRC_TBL_PAYMENT', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_PAYMENT('0', 'MIG_PRC_TBL_PAYMENT');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PAYMENT';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PAYMENT_ELEMENT', 'MIG_PRC_TBL_PAYMENT_ELEMENT', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_PAYMENT_ELEMENT('0', 'MIG_PRC_TBL_PAYMENT_ELEMENT');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PAYMENT_ELEMENT';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PAYMENT_COMP', 'MIG_PRC_TBL_PAYMENT_COMP', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_PAYMENT_COMP('0', 'MIG_PRC_TBL_PAYMENT_COMP');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PAYMENT_COMP';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PAYMENT_COMP_ELEMENT', 'MIG_PRC_TBL_PAYMENT_COMP_ELEMENT', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_PAYMENT_COMP_ELEMENT('0', 'MIG_PRC_TBL_PAYMENT_COMP_ELEMENT');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PAYMENT_COMP_ELEMENT';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_PAYMENT_STATUS', 'MIG_PRC_TBL_PAYMENT_STATUS', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_PAYMENT_STATUS('0', 'MIG_PRC_TBL_PAYMENT_STATUS');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_PAYMENT_STATUS';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_DIVIDEND_PAYMENT_DETAIL', 'MIG_PRC_TBL_DIVIDEND_PAYMENT_DETAIL', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_DIVIDEND_PAYMENT_DETAIL('0', 'MIG_PRC_TBL_DIVIDEND_PAYMENT_DETAIL');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_DIVIDEND_PAYMENT_DETAIL';
	COMMIT;
	SELECT MIG_JOB_LOG_IMSI_SEQ.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
	INSERT INTO MIG_JOB_LOG_IMSI VALUES(V_JOB_SEQ, 'TBL_WITHHOLDING_TAX', 'MIG_PRC_TBL_WITHHOLDING_TAX', SYSDATE, NULL);
	COMMIT;
	MIG_PRC_TBL_WITHHOLDING_TAX('0', 'MIG_PRC_TBL_WITHHOLDING_TAX');
	UPDATE MIG_JOB_LOG_IMSI SET JOB_END_DATE = SYSDATE WHERE SEQ = V_JOB_SEQ AND PRC_NAME = 'MIG_PRC_TBL_WITHHOLDING_TAX';
	COMMIT;

END;

-------------------------
create or replace procedure            mig_prc_bf_verification
  ---------------------------------------------------------------
  -- 모듈 : mig_prc_bf_verification
  -- 용도 : 데이터검증BF 생성
  --
  -- 일자     이름   내용
  -- -------- ------ --------------------------------------------
  -- 20201110 신동민 최초작성
  ---------------------------------------------------------------
is
begin

  delete 
  from   mig_data_bf_verification
  where  logging_dt >= trunc(sysdate)
  and    logging_dt <  trunc(sysdate)+1;
  
insert into mig_data_bf_verification
  (logging_dt,vrfc_cls,vrfc_lvl1,vrfc_lvl2,vrfc_lvl3,vrfc_nm,tobe_tab,tobe_col,bas_val,chked_val,vrfc_dt,err_fg, dq_inv_tg_id, dq_inv_tg_exec_seq)
select trunc(sysdate) as logging_dt
       , a.vrfc_cls, a.vrfc_lvl1, a.vrfc_lvl2, a.vrfc_lvl3, a.vrfc_nm, a.tobe_tab, a.tobe_col, a.bas_val, a.chked_val, a.vrfc_dt
       , case when (a.vrfc_lvl1 = '논리검증' or a.vrfc_lvl3 in ('중복')) and a.chked_val = 0 then 0
              when a.vrfc_lvl1 = '비교검증' and a.bas_val = a.chked_val then 0
              else 1
         end err_fg 
       , dq_inv_tg_id, dq_inv_tg_exec_seq
  from  (select 'WF' vrfc_cls
              , case when vrfc_gbn in ('집합검증', '중복검증', '값검증') then '비교검증'
                     when SUBSTR(tobe_tab,5,3) IN ('BAC','VRI','INM','IPM') AND vrfc_gbn = '유효값검증' then '비교검증'  -- 입금,통합입출금,변액,통합안내장은 값검증을 유효값검증으로 로깅함
                     else '논리검증'
                 end vrfc_lvl1
              , case when vrfc_gbn in ('집합검증', '중복검증', '값검증') then '일괄'
                     when SUBSTR(tobe_tab,5,3) IN ('BAC','VRI','INM','IPM') AND vrfc_gbn = '유효값검증' then '일괄'  -- 입금,통합입출금,변액,통합안내장은 값검증을 유효값검증으로 로깅함
                     when vrfc_gbn in ('업무논리검증') then '업무논리'
                     when vrfc_gbn in ('상품논리검증') then '상품논리'   -- 추가함(11/25)
                     when vrfc_gbn in ('유효값검증', '날짜형식검증') then '메타논리'
                     when vrfc_gbn in ('기타') then '기타'
                     else '모델논리'
                end vrfc_lvl2
              , case when vrfc_gbn = 'RI검증' then '참조무결성'
                     when SUBSTR(tobe_tab,5,3) IN ('BAC','VRI','INM','IPM') AND vrfc_gbn = '유효값검증' then '값'  -- 입금,통합입출금,변액,통합안내장은 값검증을 유효값검증으로 로깅함
                     when vrfc_gbn like '%검증' then replace(vrfc_gbn, '검증')
                     else '기타'
                end vrfc_lvl3
              , CASE WHEN SUBSTR(tobe_tab,5,3) IN ('BAC','VRI','INM','IPM') AND vrfc_gbn = '유효값검증' THEN REPLACE(vrfc_nm, '유효값검증', 'ASIS vs. TOBE 값검증')
                     ELSE vrfc_nm
                 END vrfc_nm
              , tobe_tab, tobe_col
              , bas_val, chked_val
              , vrfc_dt
              , '' dq_inv_tg_id
              , NULL dq_inv_tg_exec_seq
         from  (select a.vrfc_gbn, a.vrfc_nm
                     , a.tobe_tab, a.tobe_col
                     , a.vrfc_dt
                     , a.asis_val bas_val
                     , a.tobe_val chked_val
                     , a.seq_no
                     , max(a.vrfc_dt) over (partition by a.vrfc_gbn, a.vrfc_nm, a.tobe_tab, a.tobe_col) last_vrfc_dt
                from   mig_data_verification a
                where  a.tobe_tab like 'TBL_%'
                and    a.vrfc_gbn not like '기타%'
               )
         where  vrfc_dt = last_vrfc_dt
         union all
         select 'DQ' chk_cls
              , q.chk_lvl1, q.chk_lvl2, q.chk_lvl3
              , a.job_nm, a.table_name, a.column_name
              , a.tot_cnt, a.err_cnt
              , a.dq_chk_time
              , a.inv_tg_id AS dq_inv_tg_id
              , a.inv_tg_exec_seq AS dq_inv_tg_exec_seq
         from  (select e.table_name, e.column_name, e.rule_type_id, e.rule_id
                     , c.*
                     , a.db_id, a.job_nm
                from  (select c.inv_tg_id
                            , d.start_time dq_chk_time
                            , c.tot_cnt
                            , c.err_cnt
                            , c.inv_tg_exec_seq
                            , c.inv_tg_exec_id
                            , d.job_instance_id
                            , d.end_time
                            , d.status
                            , d.exit_code
                            , row_number() over (partition by c.inv_tg_id order by d.start_time desc) rn
                            , c.job_id
                       from   dq0110t@dl_ddqm             c
                            , batch_job_execution@dl_ddqm d
                       where  d.status = 'COMPLETED'
                       and    d.exit_code = 'COMPLETED'
                       and    c.inv_tg_exec_id = d.job_execution_id
                       and    d.start_time is not null
                       and    d.end_time is not null
                      ) c
                join  (select e.inv_tg_id
                            , replace(e.tg_first_key, 'TRG02.') table_name
                            , e.tg_second_key column_name
                            , f.rule_type_id
                            , e.rule_id
                       from   dq0060t@dl_ddqm e
                            , dq0070t@dl_ddqm f
                       where  e.rule_id = f.rule_id
                         and  e.tg_first_key like 'TRG02.%'
                      ) e
                on     c.inv_tg_id = e.inv_tg_id
                left join dq0030t@dl_ddqm b
                on     c.job_id = b.job_id
                and    c.inv_tg_id = b.inv_tg_id
                and    b.db_id = '1002'
                left join dq0020t@dl_ddqm a
                on     c.job_id = a.job_id
                and    a.db_id = '1002'
                where  c.rn = 1
               ) a
         left join
               (select '1001' rule_type_id, '논리검증' chk_lvl1, '메타논리' chk_lvl2, '유효값'     chk_lvl3 from dual union all
                select '1002' rule_type_id, '논리검증' chk_lvl1, '메타논리' chk_lvl2, '숫자범위'   chk_lvl3 from dual union all
                select '1003' rule_type_id, '논리검증' chk_lvl1, '메타논리' chk_lvl2, '날짜형식'   chk_lvl3 from dual union all
                select '1004' rule_type_id, '논리검증' chk_lvl1, '메타논리' chk_lvl2, '문자열형식' chk_lvl3 from dual union all
                select '1005' rule_type_id, '논리검증' chk_lvl1, '메타논리' chk_lvl2, '유효값'     chk_lvl3 from dual union all
                select '1006' rule_type_id, '논리검증' chk_lvl1, '모델논리' chk_lvl2, '참조무결성' chk_lvl3 from dual union all
                select '1007' rule_type_id, '논리검증' chk_lvl1, '모델논리' chk_lvl2, '중복'       chk_lvl3 from dual union all
                select '1008' rule_type_id, '논리검증' chk_lvl1, '메타논리' chk_lvl2, '문자열형식' chk_lvl3 from dual union all
                select '1009' rule_type_id, '논리검증' chk_lvl1, '모델논리' chk_lvl2, '필수값'     chk_lvl3 from dual union all
                select '1010' rule_type_id, '논리검증' chk_lvl1, '기타'     chk_lvl2, '기타'       chk_lvl3 from dual union all
                select '1011' rule_type_id, '논리검증' chk_lvl1, '기타'     chk_lvl2, '기타'       chk_lvl3 from dual union all
                select '1012' rule_type_id, '논리검증' chk_lvl1, '기타'     chk_lvl2, '기타'       chk_lvl3 from dual union all
                select '1013' rule_type_id, '논리검증' chk_lvl1, '기타'     chk_lvl2, '기타'       chk_lvl3 from dual union all
                select '1017' rule_type_id, '논리검증' chk_lvl1, '기타'     chk_lvl2, '기타'       chk_lvl3 from dual union all
                select '1018' rule_type_id, '논리검증' chk_lvl1, '기타'     chk_lvl2, '기타'       chk_lvl3 from dual union all
                select '1014' rule_type_id, '논리검증' chk_lvl1, '기타'     chk_lvl2, '기타'       chk_lvl3 from dual union all
                select '1015' rule_type_id, '논리검증' chk_lvl1, '기타'     chk_lvl2, '기타'       chk_lvl3 from dual union all
                select '1016' rule_type_id, '논리검증' chk_lvl1, '기타'     chk_lvl2, '기타'       chk_lvl3 from dual union all
                select '1019' rule_type_id, '논리검증' chk_lvl1, '기타'     chk_lvl2, '기타'       chk_lvl3 from dual union all
                select '2001' rule_type_id, '논리검증' chk_lvl1, '업무논리' chk_lvl2, '업무논리'   chk_lvl3 from dual union all
                select '2002' rule_type_id, '논리검증' chk_lvl1, '모델논리' chk_lvl2, '이력무결성' chk_lvl3 from dual union all
                select '2003' rule_type_id, '논리검증' chk_lvl1, '모델논리' chk_lvl2, '참조무결성' chk_lvl3 from dual union all
                select '2004' rule_type_id, '논리검증' chk_lvl1, '업무논리' chk_lvl2, '업무논리'   chk_lvl3 from dual union all
                select '2005' rule_type_id, '논리검증' chk_lvl1, '업무논리' chk_lvl2, '업무논리'   chk_lvl3 from dual
               ) q
         on     a.rule_type_id = q.rule_type_id
         where  (a.job_nm not in ('JOB테스트_성민') or a.job_nm is null) -- 2021-01-07 job_nm이 null인 경우도 추출 필요
        ) a
  ;

  commit;

end;

----------------------
create or replace PROCEDURE        MIG_PRC_COPY_BAC_PDNA (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,   -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,   -- INFA 세션명
    I_SOUR_OWNER       VARCHAR2                  -- 소스 오너
)                                                                                                                         
IS                                                                                                                        

    V_BSWR_DVSN    VARCHAR2(3)    := NULL; -- 업무구분
    V_TABLE_ID     VARCHAR2(30)   := NULL; -- 테이블ID
    V_TAR_OWNER    VARCHAR2(10)   := NULL; -- 타겟 오너
    V_ETC_SQL      VARCHAR2(1000) := NULL; -- ETL SQL
	V_CNT_SQL	   VARCHAR2(2000) := NULL; -- 건수 SQL  --21.08.24 왕희원 추가

    
	V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL;
    
BEGIN                                                                                                                     

/*
    작성자 : 이낙규
    작성일자 : 2020-12-22
    용도 : 해당 테이블을 타겟DB(DICR)에 이관한다.
    전제조건 : 1. 타겟 오너명이 업무구분3자리 + 'OWN' 이어야함.
               2. 소스와 타겟의 테이블ID가 동일해야함.
               3. 소스와 타겟의 테이블 레이아웃이 동일해야함.
               4. INFA에서 생성한 세션명이 'MIG_PRC_ETL_' + 테이블ID 이어야함.

    작성자 : 이현진
    변경일자 : 2021-02-19
	용도 : INSERT MAPKEY@DICR SELECT FROM MAPKEY@DL_PDNA
    전제조건 : 1. 타겟 오너명이 업무구분3자리 + 'OWN' 이어야함.
               2. 소스와 타겟의 테이블ID가 동일해야함.
               3. 소스와 타겟의 테이블 레이아웃이 동일해야함.
               4. INFA에서 생성한 세션명이 'MIG_PRC_COPY_' + MAPKEY테이블ID 이어야함.
	
*/

    V_BSWR_DVSN := SUBSTR(I_SESSION_NAME, 25, 3);
    V_TAR_OWNER := I_SOUR_OWNER ; --'MIG02';  --V_BSWR_DVSN || 'OWN';                                                                 
    V_TABLE_ID  := SUBSTR(I_SESSION_NAME, 14);


    EXECUTE IMMEDIATE 'TRUNCATE TABLE '||V_TAR_OWNER||'.'||V_TABLE_ID ;

    /* ------------ 이관수행 ------------ */     

    SELECT
   'INSERT /*+ APPEND */ INTO #[V_TAR_OWNER].#[V_TABLE_ID]
    SELECT /*+ FULL(A) */ *
      FROM #[I_SOUR_OWNER].#[V_TABLE_ID]@DL_PDNA2 A
    '
    INTO V_ETC_SQL
    FROM DUAL
    ;
    
    V_ETC_SQL := REPLACE(V_ETC_SQL, '#[V_TAR_OWNER]', V_TAR_OWNER);
    V_ETC_SQL := REPLACE(V_ETC_SQL, '#[V_TABLE_ID]', V_TABLE_ID);
    V_ETC_SQL := REPLACE(V_ETC_SQL, '#[I_SOUR_OWNER]', I_SOUR_OWNER);

    DBMS_OUTPUT.PUT_LINE('V_ETC_SQL: ' || V_ETC_SQL);

    EXECUTE IMMEDIATE V_ETC_SQL;
	
    COMMIT;
	
	--건수기록
	V_CNT_SQL := 'SELECT /*+ PARALLEL(8) */ COUNT(1) FROM '||V_TAR_OWNER||'.'||V_TABLE_ID ;
	
	EXECUTE IMMEDIATE V_CNT_SQL INTO V_ROW_CNT;
    
--	DBMS_OUTPUT.PUT_LINE(V_CNT_SQL||'  '|| V_ROW_CNT);

	
    /* ------------- 작업로그 ---------- */                                                                     
--    V_ROW_CNT := SQL%ROWCOUNT;

    COMMIT;
    
    INSERT INTO MIG_ETL_GEN VALUES(I_SOUR_OWNER, V_TABLE_ID, V_TAR_OWNER, V_TABLE_ID, SYSDATE, V_ETC_SQL);
     
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_TAR_OWNER, V_TABLE_ID, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
          
EXCEPTION
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             
                                                                                                                          
    /* ------------- 오류로그(END  ) ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_TAR_OWNER, V_TABLE_ID, V_ROW_CNT, V_ERR_CNT, SQLERRM );
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);
                                                                                                                          
END;
---------------------------
create or replace PROCEDURE       MIG_PRC_COPY_MON
IS 

BEGIN

	INSERT /*+ APPEND */ INTO MIG_COPY_MON 
	SELECT SYSDATE RUN_TIME 
		 , A.SOUR_OWNER
		 , A.SOUR_TBL_ID
		 , A.TAR_OWNER
		 , A.TAR_TBL_ID
		 , A.ENTITY_NAME
		 , A.AS_BYTE
		 , CASE WHEN B.BYTES = 65536 THEN 0
		        ELSE B.BYTES
		   END AS TO_BYTE
	  FROM MIG_TABLE_LIST A 
		 , DBA_SEGMENTS@DL_PDNA B
	 WHERE A.TAR_OWNER = B.OWNER
	   AND A.TAR_TBL_ID = B.SEGMENT_NAME
	   AND B.SEGMENT_TYPE = 'TABLE' 
	   AND A.SOUR_OWNER IN ('DL_DMIG','PDNA.TRG02') 
	; 

	COMMIT; 

END;
-------------------------
create or replace PROCEDURE       MIG_PRC_DEC_TB_PAEXTLIA
(
--    I_PROC_START_DATE       DATE      DEFAULT NULL
--  , I_TABLE_NAME            VARCHAR2  DEFAULT NULL
--  , I_ADDR_COL_NM           VARCHAR2  DEFAULT NULL
    I_WHERE_STR             VARCHAR2  DEFAULT NULL
)
AS

    V_ERR_CODE NUMBER;
    V_ERR_MSG VARCHAR2(1000);

    V_TABLE_NAME VARCHAR2(30);
    V_ADDR_COL_NM VARCHAR2(30);

    V_SQL VARCHAR2(4000);
    V_DOMAIN_NAME VARCHAR2(50);
    V_START_DATE DATE;
    V_PROC_START_DATE DATE;
    V_INDEX NUMBER;
    V_COUNT NUMBER;
    --V_ROW_INDEX NUMBER;
    --V_WORK_GRP_COUNT NUMBER;

BEGIN
    --V_ROW_INDEX:= 1;
    --V_WORK_GRP_COUNT := 5000;

    V_INDEX := 1;
    V_PROC_START_DATE := SYSDATE;
    V_DOMAIN_NAME := 'ADDR_ENC_U8';

    /* PK INDEX, CONSTRAINT 삭제 */
    EXECUTE IMMEDIATE ('ALTER TABLE MIG02.DEC_TB_PAEXTLIA_TMP DROP CONSTRAINT PK_DEC_TB_PAEXTLIA_TMP');
    EXECUTE IMMEDIATE ('DROP INDEX MIG02.PK_DEC_TB_PAEXTLIA_TMP');

    EXECUTE IMMEDIATE ('TRUNCATE TABLE DEC_TB_PAEXTLIA_TMP');

    V_TABLE_NAME        := 'TB_PAEXTLIA';    --I_TABLE_NAME;
    V_ADDR_COL_NM       := 'LIIA_TELG_CTEN'; --I_ADDR_COL_NM;
    V_START_DATE        := SYSDATE;

    V_SQL := V_SQL || 'INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(T 8) */ INTO DEC_TB_PAEXTLIA_TMP T ( TELG_RECV_DATE, LIIA_TELG_SQNO, ADDR_ENC_KR, SEQ ) ';
    V_SQL := V_SQL || 'SELECT  /*+ USE_HASH(A X) PARALLEL(8) FULL(A) FULL(B) */  A.TELG_RECV_DATE, A.LIIA_TELG_SQNO, A.LIIA_TELG_CTEN, ROWNUM ';    
    V_SQL := V_SQL || '  FROM (SELECT /*+ PARALLEL(8) */ TELG_RECV_DATE,LIIA_TELG_SQNO,LIIA_TELG_CTEN ' ;
    V_SQL := V_SQL || '          FROM TB_PAEXTLIA  ';
    V_SQL := V_SQL || '       WHERE 1=1  ';
    V_SQL := V_SQL || '         AND TELG_RECV_DATE >= ''20200101'' ';
    V_SQL := V_SQL || '         AND TRIM(LIIA_TELG_CTEN) IS NOT NULL ) A ';
    V_SQL := V_SQL || '       LEFT OUTER JOIN DEC_TB_PAEXTLIA X ';
    V_SQL := V_SQL || '         ON A.LIIA_TELG_CTEN = X.ADDR_ENC_KR  ';    
    V_SQL := V_SQL || ' WHERE X.ADDR_ENC_KR  IS NULL ';   
    
    


    DBMS_OUTPUT.PUT_LINE (V_SQL);
    EXECUTE IMMEDIATE (V_SQL);

    /* PK INDEX, CONSTRAINT 재생성 */
    EXECUTE IMMEDIATE ('CREATE UNIQUE INDEX MIG02.PK_DEC_TB_PAEXTLIA_TMP ON MIG02.DEC_TB_PAEXTLIA_TMP (TELG_RECV_DATE ASC, LIIA_TELG_SQNO ASC)');
    EXECUTE IMMEDIATE ('ALTER TABLE MIG02.DEC_TB_PAEXTLIA_TMP ADD CONSTRAINT PK_DEC_TB_PAEXTLIA_TMP PRIMARY KEY(TELG_RECV_DATE, LIIA_TELG_SQNO) USING INDEX MIG02.PK_DEC_TB_PAEXTLIA_TMP');

    SELECT COUNT(1)
      INTO V_COUNT
      FROM DEC_TB_PAEXTLIA_TMP;

    INSERT INTO MIG_DEC_PAEXTLIA_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG)
    VALUES
    (V_DOMAIN_NAME, V_TABLE_NAME, V_ADDR_COL_NM, V_COUNT, 0, V_PROC_START_DATE, V_START_DATE, SYSDATE, 'SUCCESS', NULL, NULL) ;

    COMMIT;

    /* 신규 적재건이 없으면 종료 */
    IF V_COUNT = 0 THEN
        RETURN;
    END IF;

    --V_PROC_START_DATE := SYSDATE;
    --V_DOMAIN_NAME := 'ADDR_ENC_U8';
    --V_INDEX := 1;

    LOOP

        V_START_DATE := SYSDATE;

        /* 6~10은 예비이며 데이터가 추가되는 경우 자동으로 복호화 데이터가 UPDATE 됨. */
        UPDATE /*+ ENABLE_PARALLEL_DML APPEND PARALLEL (A 8) */
               (SELECT 1                              AS INDEX1
                     , INSTR(ADDR_ENC_KR, ' ', 1, 1 ) AS INDEX2
                     , INSTR(ADDR_ENC_KR, ' ', 1, 2 ) AS INDEX3
                     , INSTR(ADDR_ENC_KR, ' ', 1, 3 ) AS INDEX4
                     , INSTR(ADDR_ENC_KR, ' ', 1, 4 ) AS INDEX5
                     , INSTR(ADDR_ENC_KR, ' ', 1, 5 ) AS INDEX6
                     , INSTR(ADDR_ENC_KR, ' ', 1, 6 ) AS INDEX7
                     , INSTR(ADDR_ENC_KR, ' ', 1, 7 ) AS INDEX8
                     , INSTR(ADDR_ENC_KR, ' ', 1, 8 ) AS INDEX9
                     , INSTR(ADDR_ENC_KR, ' ', 1, 9 ) AS INDEX10
                     , INSTR(ADDR_ENC_KR, ' ', 1, 10) AS INDEX11
                     , X.*
                  FROM DEC_TB_PAEXTLIA_TMP X) A
           SET ADDR_DEC_KR1  = CASE WHEN INDEX1  = 0 THEN NULL ELSE DBSEC.DEC_ADDR@DL_PKLIQA( SUBSTRB(ADDR_ENC_KR, INDEX1     , CASE WHEN 0 >= INDEX2            - 1 THEN LENGTHB(ADDR_ENC_KR) ELSE INDEX2            - 1 END) ) END
             , ADDR_DEC_KR2  = CASE WHEN INDEX2  = 0 THEN NULL ELSE DBSEC.DEC_ADDR@DL_PKLIQA( SUBSTRB(ADDR_ENC_KR, INDEX2  + 1, CASE WHEN 0 >= INDEX3  - INDEX2  - 1 THEN LENGTHB(ADDR_ENC_KR) ELSE INDEX3  - INDEX2  - 1 END) ) END
             , ADDR_DEC_KR3  = CASE WHEN INDEX3  = 0 THEN NULL ELSE DBSEC.DEC_ADDR@DL_PKLIQA( SUBSTRB(ADDR_ENC_KR, INDEX3  + 1, CASE WHEN 0 >= INDEX4  - INDEX3  - 1 THEN LENGTHB(ADDR_ENC_KR) ELSE INDEX4  - INDEX3  - 1 END) ) END
             , ADDR_DEC_KR4  = CASE WHEN INDEX4  = 0 THEN NULL ELSE DBSEC.DEC_ADDR@DL_PKLIQA( SUBSTRB(ADDR_ENC_KR, INDEX4  + 1, CASE WHEN 0 >= INDEX5  - INDEX4  - 1 THEN LENGTHB(ADDR_ENC_KR) ELSE INDEX5  - INDEX4  - 1 END) ) END
             , ADDR_DEC_KR5  = CASE WHEN INDEX5  = 0 THEN NULL ELSE DBSEC.DEC_ADDR@DL_PKLIQA( SUBSTRB(ADDR_ENC_KR, INDEX5  + 1, CASE WHEN 0 >= INDEX6  - INDEX5  - 1 THEN LENGTHB(ADDR_ENC_KR) ELSE INDEX6  - INDEX5  - 1 END) ) END
             , ADDR_DEC_KR6  = CASE WHEN INDEX6  = 0 THEN NULL ELSE DBSEC.DEC_ADDR@DL_PKLIQA( SUBSTRB(ADDR_ENC_KR, INDEX6  + 1, CASE WHEN 0 >= INDEX7  - INDEX6  - 1 THEN LENGTHB(ADDR_ENC_KR) ELSE INDEX7  - INDEX6  - 1 END) ) END
             , ADDR_DEC_KR7  = CASE WHEN INDEX7  = 0 THEN NULL ELSE DBSEC.DEC_ADDR@DL_PKLIQA( SUBSTRB(ADDR_ENC_KR, INDEX7  + 1, CASE WHEN 0 >= INDEX8  - INDEX7  - 1 THEN LENGTHB(ADDR_ENC_KR) ELSE INDEX8  - INDEX7  - 1 END) ) END
             , ADDR_DEC_KR8  = CASE WHEN INDEX8  = 0 THEN NULL ELSE DBSEC.DEC_ADDR@DL_PKLIQA( SUBSTRB(ADDR_ENC_KR, INDEX8  + 1, CASE WHEN 0 >= INDEX9  - INDEX8  - 1 THEN LENGTHB(ADDR_ENC_KR) ELSE INDEX9  - INDEX8  - 1 END) ) END
             , ADDR_DEC_KR9  = CASE WHEN INDEX9  = 0 THEN NULL ELSE DBSEC.DEC_ADDR@DL_PKLIQA( SUBSTRB(ADDR_ENC_KR, INDEX9  + 1, CASE WHEN 0 >= INDEX10 - INDEX9  - 1 THEN LENGTHB(ADDR_ENC_KR) ELSE INDEX10 - INDEX9  - 1 END) ) END
             , ADDR_DEC_KR10 = CASE WHEN INDEX10 = 0 THEN NULL ELSE DBSEC.DEC_ADDR@DL_PKLIQA( SUBSTRB(ADDR_ENC_KR, INDEX10 + 1, CASE WHEN 0 >= INDEX11 - INDEX10 - 1 THEN LENGTHB(ADDR_ENC_KR) ELSE INDEX11 - INDEX10 - 1 END) ) END
         WHERE ADDR_DEC_KR1 IS NULL
           AND ROWNUM <= 5000
        ;
        --V_ROW_INDEX := V_ROW_INDEX + V_WORK_GRP_COUNT;

        V_COUNT := SQL%ROWCOUNT;

        INSERT INTO MIG_DEC_PAEXTLIA_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG)
        VALUES
        (V_DOMAIN_NAME, V_TABLE_NAME, 'ADDR_ENC_'||V_INDEX, 0, V_COUNT, V_PROC_START_DATE, V_START_DATE, SYSDATE, 'SUCCESS', NULL, NULL) ;

        COMMIT;

        V_INDEX := V_INDEX + 1;

        EXIT WHEN V_COUNT = 0;

    END LOOP;

    MERGE /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) PARALLEL(B 8) */
     INTO DEC_TB_PAEXTLIA A
    USING DEC_TB_PAEXTLIA_TMP B
       ON (    A.TELG_RECV_DATE = B.TELG_RECV_DATE
           AND A.LIIA_TELG_SQNO = B.LIIA_TELG_SQNO )
     WHEN MATCHED THEN
          UPDATE
             SET A.ADDR_ENC_KR    = B.ADDR_ENC_KR
               , A.ADDR_DEC_KR1   = B.ADDR_DEC_KR1
               , A.ADDR_DEC_KR2   = B.ADDR_DEC_KR2
               , A.ADDR_DEC_KR3   = B.ADDR_DEC_KR3
               , A.ADDR_DEC_KR4   = B.ADDR_DEC_KR4
               , A.ADDR_DEC_KR5   = B.ADDR_DEC_KR5
               , A.ADDR_DEC_KR6   = B.ADDR_DEC_KR6
               , A.ADDR_DEC_KR7   = B.ADDR_DEC_KR7
               , A.ADDR_DEC_KR8   = B.ADDR_DEC_KR8
               , A.ADDR_DEC_KR9   = B.ADDR_DEC_KR9
               , A.ADDR_DEC_KR10  = B.ADDR_DEC_KR10
               , A.ERR_YN         = B.ERR_YN
               , A.LAST_CHNG_DTTM = SYSDATE
     WHEN NOT MATCHED THEN
          INSERT (  A.TELG_RECV_DATE
                  , A.LIIA_TELG_SQNO
                  , A.ADDR_ENC_KR
                  , A.ADDR_DEC_KR1
                  , A.ADDR_DEC_KR2
                  , A.ADDR_DEC_KR3
                  , A.ADDR_DEC_KR4
                  , A.ADDR_DEC_KR5
                  , A.ADDR_DEC_KR6
                  , A.ADDR_DEC_KR7
                  , A.ADDR_DEC_KR8
                  , A.ADDR_DEC_KR9
                  , A.ADDR_DEC_KR10
                  , A.ERR_YN
                  , A.FRST_INPT_DTTM
                  , A.LAST_CHNG_DTTM
                 )
          VALUES (  B.TELG_RECV_DATE
                  , B.LIIA_TELG_SQNO
                  , B.ADDR_ENC_KR
                  , B.ADDR_DEC_KR1
                  , B.ADDR_DEC_KR2
                  , B.ADDR_DEC_KR3
                  , B.ADDR_DEC_KR4
                  , B.ADDR_DEC_KR5
                  , B.ADDR_DEC_KR6
                  , B.ADDR_DEC_KR7
                  , B.ADDR_DEC_KR8
                  , B.ADDR_DEC_KR9
                  , B.ADDR_DEC_KR10
                  , B.ERR_YN
                  , SYSDATE
                  , SYSDATE
                 )
    ;

    COMMIT;

EXCEPTION
    WHEN others THEN
      V_ERR_CODE := sqlcode;
      V_ERR_MSG  := SUBSTR(sqlerrm, 1, 200);

      INSERT INTO MIG_DEC_PAEXTLIA_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG)
      VALUES
      (V_DOMAIN_NAME, V_TABLE_NAME, V_ADDR_COL_NM, V_COUNT, 0, SYSDATE, V_START_DATE, SYSDATE, 'ERROR', V_ERR_CODE, V_ERR_MSG) ;

      COMMIT;
      RETURN;
END;
------------------------------
create or replace PROCEDURE       MIG_PRC_EMAIL_TEST
IS 
	V_VALUES1 VARCHAR2(4000); 
	V_CNT NUMBER;
BEGIN 

	LOOP 

		UPDATE /*+ PARALLEL (4) */ TBL_ICMCADCH10_TMP10
		   SET CHNG_BEFO_STATUS =  FN_EMAIL_DEC(CHNG_BEFO_VAL)
			 , CHNG_AFTR_STATUS =  FN_EMAIL_DEC(CHNG_AFTR_VAL)
		 WHERE CHNG_BEFO_STATUS IS NULL
		   AND ROWNUM <= 1000
		;	

		V_CNT := SQL%ROWCOUNT; 
		
		COMMIT; 
		
		EXIT WHEN V_CNT = 0; 

	END LOOP;

END;
---------------------------------
create or replace PROCEDURE       MIG_PRC_ETL_BAC_PDNA (I_WORKFLOW_RUN_ID NUMBER DEFAULT NULL,-- INFA 워크플로우실행ID
                                                        I_SESSION_NAME    VARCHAR2 DEFAULT NULL,-- INFA 세션명
                                                        I_SOUR_OWNER      VARCHAR2 -- 소스 오너
)
IS
  --    V_BSWR_DVSN    VARCHAR2(3)    := NULL; -- 업무구분
  V_TABLE_ID  VARCHAR2(30) := NULL; -- 테이블ID
  V_TAR_OWNER VARCHAR2(10) := NULL; -- 타겟 오너
  V_ETC_SQL   VARCHAR2(1000) := NULL; -- ETL SQL
  V_ROW_CNT   NUMBER := 0;
  V_ERR_CNT   NUMBER := 0;
  V_ERR_MSG   VARCHAR2(2000) := NULL;
BEGIN
    /*
    작성자 : 이낙규
    작성일자 : 2020-12-22
    용도 : 해당 테이블을 타겟DB(PDNA)에 이관한다.
    전제조건 : 1. 타겟 오너명이 업무구분3자리 + 'OWN' 이어야함.
               2. 소스와 타겟의 테이블ID가 동일해야함.
               3. 소스와 타겟의 테이블 레이아웃이 동일해야함.
               4. INFA에서 생성한 세션명이 'MIG_PRC_ETL_' + 테이블ID 이어야함.
*/
    V_TAR_OWNER := I_SOUR_OWNER;

    V_TABLE_ID := SUBSTR(I_SESSION_NAME, 14);

    /* ------------ 이관수행 ------------ */
    SELECT 'INSERT /*+ APPEND */ INTO #[V_TAR_OWNER].#[V_TABLE_ID]
    SELECT /*+ FULL(A) */ *
      FROM #[I_SOUR_OWNER].#[V_TABLE_ID]@DL_PDNA A
    '
      INTO V_ETC_SQL
      FROM DUAL;

    V_ETC_SQL := REPLACE(V_ETC_SQL, '#[V_TAR_OWNER]', V_TAR_OWNER);

    V_ETC_SQL := REPLACE(V_ETC_SQL, '#[V_TABLE_ID]', V_TABLE_ID);

    V_ETC_SQL := REPLACE(V_ETC_SQL, '#[I_SOUR_OWNER]', I_SOUR_OWNER);

    DBMS_OUTPUT.PUT_LINE('V_ETC_SQL: '
                         || V_ETC_SQL);

    EXECUTE IMMEDIATE V_ETC_SQL;

    /* ------------- 작업로그 ---------- */
    V_ROW_CNT := SQL%ROWCOUNT;

    COMMIT;

    INSERT INTO MIG_ETL_GEN
         VALUES(I_SOUR_OWNER,
                V_TABLE_ID,
                V_TAR_OWNER,
                V_TABLE_ID,
                SYSDATE,
                V_ETC_SQL);

    COMMIT;

    CMMASV.MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_TAR_OWNER, V_TABLE_ID, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG);
EXCEPTION
  WHEN OTHERS THEN
             ROLLBACK;

             /* ------------- 오류로그(END  ) ------------- */
             CMMASV.MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_TAR_OWNER, V_TABLE_ID, V_ROW_CNT, V_ERR_CNT, SQLERRM);

             RAISE_APPLICATION_ERROR(-20001, SQLERRM);
END;
-------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_BAC_PDNA_RANGE (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,   -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,   -- INFA 세션명 : 이관대상테이블명과 작업번호(나머지) 
    I_SOUR_OWNER       VARCHAR2              ,   -- 소스 오너
	ADD_TID            VARCHAR2  DEFAULT NULL,   -- 테이블명 변경 ('_X'),
	I_PART_CNT         NUMBER    DEFAULT 10      -- RANGE 파티션 이관의 분할작업수 : "PARTTITION_POSITION"을 이 수로 나누어 나머지가 SESSION_NAME 끝자리와 같은 PARTITION 에 대해 이관
)                                                                                                                         
IS                                                                                                                        

    V_BSWR_DVSN    VARCHAR2(3)    := NULL; -- 업무구분
    V_TARGET_TABLE VARCHAR2(20)   := NULL; -- 이관 TARGET 테이블ID (ADD_TID 로 변경가능)
	V_TABLE_NAME   VARCHAR2(20)   := NULL; -- 이관 SOURCE 테이블 (SELECT 테이블ID)
    V_TAR_OWNER    VARCHAR2(10)   := NULL; -- 타겟 오너
	V_JOB_NO       NUMBER         := NULL; -- 타겟 오너
	V_SQLTEXT      VARCHAR2(1000) := NULL; -- SQLTEXT

    V_RUN_CNT      NUMBER         := 0;
	V_INS_CNT      NUMBER         := 0;
    V_TOT_INS_CNT  NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL;
    V_SYN_CNT      NUMBER         := 0;
    	
	CURSOR C1 (V_TAR_OWNER VARCHAR2, V_TARGET_TABLE VARCHAR2, I_PART_CNT NUMBER, V_JOB_NO NUMBER)
	IS
	SELECT TABLE_OWNER, TABLE_NAME, PARTITION_NAME, PARTITION_POSITION
	  FROM ALL_TAB_PARTITIONS
	 WHERE TABLE_NAME = V_TABLE_NAME
	   AND TABLE_OWNER = V_TAR_OWNER
	   AND MOD(PARTITION_POSITION, I_PART_CNT) = V_JOB_NO
	ORDER BY PARTITION_POSITION
	;
    
BEGIN                                                                                                                     

/*

    작성자 : 류나영
    작성일자 : 2021-11-08
    용도 : 해당 테이블을 타겟DB(DICR)에 이관한다.
    전제조건 :  1. 소스 스키마는 변수로 받아야 함.
             2. 소스와 타겟의 테이블 레이아웃이 동일해야함.
             3. 소스와 타겟의 파티션 구조가 동일해야 함
             4. 소스 DB에는 반드시 "VW_테이블명_파티션명"의 뷰가 존재해야 함
			 5. 분할작업갯수와 분할작업NO 를 INPUT 으로 주어 실행시킨다
			    - 분할작업갯수 : I_PART_CNT : DEFAULT : 10 
				- 분할작업NO : I_PART_FLAG : 0~분할작업갯수-1 (SESSION_NAME 끝 한자리로 대체)
				- MOD(PARTITION_POSITION,분할작업갯수) = SESSION_NAME 끝 한자리 값과 일치하는 파티션을 이관함
                       
    TEST TABLE : MIG_RNY_PART_TEST
                      
*/

    V_BSWR_DVSN  := SUBSTR(I_SESSION_NAME, 17, 3);                                                              
--    V_TABLE_NAME  := SUBSTR(I_SESSION_NAME, 13, 14);
    V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 13, 17);  /* 임시 테스트테이블 용  MIG_PRC_ETL_테이블  */
	V_JOB_NO     := SUBSTR(I_SESSION_NAME, -1, 1);

    /* 스키마명 */
    SELECT  NVL((SELECT TABLE_OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = V_TABLE_NAME),V_BSWR_DVSN||'OWN')     
      INTO  V_TAR_OWNER
      FROM  DUAL
    ;
        
    DBMS_OUTPUT.PUT_LINE('SESSION='||I_SESSION_NAME||', TARGET OWNER='||V_TAR_OWNER||', TABLE_NAME='||V_TABLE_NAME);
    
	IF TRIM(ADD_TID) IS NULL 
		THEN V_TARGET_TABLE :=  V_TABLE_NAME ;
		ELSE V_TARGET_TABLE :=  V_TABLE_NAME||ADD_TID ;
    END IF;    
	
	FOR I IN C1 (V_TAR_OWNER, V_TABLE_NAME, I_PART_CNT, V_JOB_NO) LOOP
  
		BEGIN
		
		EXECUTE IMMEDIATE 'ALTER TABLE '||V_TAR_OWNER||'.'||V_TARGET_TABLE||' TRUNCATE PARTITION '||I.PARTITION_NAME||' DROP STORAGE';
		
		V_RUN_CNT := V_RUN_CNT + 1;
		V_SQLTEXT := 'INSERT /*+ APPEND */ INTO '||V_TAR_OWNER||'.'||V_TARGET_TABLE||' PARTITION ( '||I.PARTITION_NAME||' ) T
					  SELECT /*+ FULL(A) */ *
					  FROM '||I_SOUR_OWNER||'.VW_'||V_TABLE_NAME||'_'||I.PARTITION_NAME||'@DL_PDNA2 A';
					  
		DBMS_OUTPUT.PUT_LINE('RUN='||V_RUN_CNT||', POS='||I.PARTITION_POSITION||', PART_NAME='||I.PARTITION_NAME||', SQLTEXT '||V_SQLTEXT);				  
					  
		EXECUTE IMMEDIATE V_SQLTEXT;			  	  
		
		COMMIT;
	
		EXECUTE IMMEDIATE 'SELECT COUNT(1) FROM '||V_TAR_OWNER||'.'||V_TARGET_TABLE||' PARTITION ( '||I.PARTITION_NAME||' )' INTO V_INS_CNT;
	 
	    V_TOT_INS_CNT := V_TOT_INS_CNT + V_INS_CNT;
		
		DBMS_OUTPUT.PUT_LINE('PART INSERT='||V_INS_CNT||', TOTAL INSERT='||V_TOT_INS_CNT);
		
		COMMIT;

		EXCEPTION
		  WHEN OTHERS THEN
			ROLLBACK;
			V_ERR_MSG := SQLERRM;
			DBMS_OUTPUT.PUT_LINE(V_ERR_MSG);
		
		END;
  
	END LOOP;

--    /* ------------- 오류로그(END  ) ------------- */                                                                     
--
--    CMMASV.MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_TAR_OWNER, V_SEL_TID, V_ROW_CNT, V_ERR_CNT, SQLERRM );
--    RAISE_APPLICATION_ERROR(-20001, SQLERRM);
                                                                                                                          
END;
--------------------------------
create or replace PROCEDURE       MIG_PRC_ETL_CLM_PICR_DMIG0 (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   V_CHG_NM           VARCHAR2(30)   := NULL;

BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := 'MIG_ETL_CLM_PICR_DMIG';
   V_CHG_NM     := '노진호' ;
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));

   /* ------------------ 이행로직 -------------------- */


   /*************************** MAPKEY_TBL_CLMCAVINSO_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCAVINSO_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCAVINSO_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCAVINSO_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCAVINSO_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCAVRCRG_000 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCAVRCRG_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCAVRCRG_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCAVRCRG_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCAVRCRG_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCAVRPRT_000 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCAVRPRT_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCAVRPRT_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCAVRPRT_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCAVRPRT_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCAVSHRM_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCAVSHRM_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCAVSHRM_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCAVSHRM_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCAVSHRM_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCACDR_000 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCACDR_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCACDR_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCACDR_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCACDR_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCACTM_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCACTM_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCACTM_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCACTM_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCACTM_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCBBNT_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCBBNT_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCBBNT_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCBBNT_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCBBNT_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCBCTR_000 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCBCTR_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCBCTR_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCBCTR_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCBCTR_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCBNBN_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCBNBN_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCBNBN_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCBNBN_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCBNBN_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCBSAB_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCBSAB_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCBSAB_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCBSAB_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCBSAB_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCBYPS_000 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCBYPS_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCBYPS_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCBYPS_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCBYPS_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCDMRQ_000 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCDMRQ_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCDMRQ_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCDMRQ_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCDMRQ_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCDPCT_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCDPCT_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCDPCT_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCDPCT_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCDPCT_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCDSBY_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCDSBY_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCDSBY_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCDSBY_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCDSBY_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCFDOM_000 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCFDOM_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCFDOM_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCFDOM_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCFDOM_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCOCRC_000 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCOCRC_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCOCRC_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCOCRC_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCOCRC_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCOCRD_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCOCRD_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCOCRD_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCOCRD_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCOCRD_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCOCRS_000 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCOCRS_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCOCRS_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCOCRS_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCOCRS_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCPCNT_000 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCPCNT_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCPCNT_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCPCNT_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCPCNT_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCPCNT_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCPCNT_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCPCNT_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCPCNT_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCPCNT_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCPPAY_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCPPAY_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCPPAY_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCPPAY_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCPPAY_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCPYCT_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCPYCT_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCPYCT_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCPYCT_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCPYCT_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPKEY_TBL_CLMCRCRCPT_001 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCRCRCPT_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCRCRCPT_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCRCRCPT_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCRCRCPT_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 




   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

   EXCEPTION
      WHEN OTHERS THEN
      ROLLBACK;

   /* --------------- 오류로그( END ) --------------- */

   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);

END MIG_PRC_ETL_CLM_PICR_DMIG0;
-------------------------------------
create or replace PROCEDURE       MIG_PRC_ETL_CLM_PICR_DMIG1 (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   V_CHG_NM           VARCHAR2(30)   := NULL;

BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := 'MIG_ETL_CLM_PICR_DMIG';
   V_CHG_NM     := '노진호' ;
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));

   /* ------------------ 이행로직 -------------------- */

   /*************************** MIG_TBL_CLMCRCACDR *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TBL_CLMCRCACDR' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TBL_CLMCRCACDR SELECT * FROM MIG02.MIG_TBL_CLMCRCACDR@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TBL_CLMCRCACDR', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TBL_CLMCRCDMRQ *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TBL_CLMCRCDMRQ' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TBL_CLMCRCDMRQ SELECT * FROM MIG02.MIG_TBL_CLMCRCDMRQ@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TBL_CLMCRCDMRQ', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TBL_CLMCAVPRCM_005A *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TBL_CLMCAVPRCM_005A' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TBL_CLMCAVPRCM_005A SELECT * FROM MIG02.MIG_TBL_CLMCAVPRCM_005A@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TBL_CLMCAVPRCM_005A', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TBL_CLMCAVPRCM_005B *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TBL_CLMCAVPRCM_005B' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TBL_CLMCAVPRCM_005B SELECT * FROM MIG02.MIG_TBL_CLMCAVPRCM_005B@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TBL_CLMCAVPRCM_005B', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TBL_CLMCAVPRCM *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TBL_CLMCAVPRCM' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TBL_CLMCAVPRCM SELECT * FROM MIG02.MIG_TBL_CLMCAVPRCM@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TBL_CLMCAVPRCM', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 


   /*************************** MIG_TBL_CLMCRCOUTP *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TBL_CLMCRCOUTP' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TBL_CLMCRCOUTP SELECT * FROM MIG02.MIG_TBL_CLMCRCOUTP@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TBL_CLMCRCOUTP', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TB_ISAPLCJG *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TB_ISAPLCJG' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TB_ISAPLCJG SELECT * FROM MIG02.MIG_TB_ISAPLCJG@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TB_ISAPLCJG', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TB_PAESTCTA *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TB_PAESTCTA' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TB_PAESTCTA SELECT * FROM MIG02.MIG_TB_PAESTCTA@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TB_PAESTCTA', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TB_ISCJGINS0 *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TB_ISCJGINS0' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TB_ISCJGINS0 SELECT * FROM MIG02.MIG_TB_ISCJGINS0@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TB_ISCJGINS0', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TB_ISCJGINS *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TB_ISCJGINS' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TB_ISCJGINS SELECT * FROM MIG02.MIG_TB_ISCJGINS@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TB_ISCJGINS', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPCODE_ALL_CLM *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPCODE_ALL_CLM' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPCODE_ALL_CLM SELECT * FROM MIG02.MAPCODE_ALL_CLM@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPCODE_ALL_CLM', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPCODE_INDV_CLM *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPCODE_INDV_CLM' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPCODE_INDV_CLM SELECT * FROM MIG02.MAPCODE_INDV_CLM@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPCODE_INDV_CLM', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MAPCODE_TBL_CLMCRCSTDZ *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPCODE_TBL_CLMCRCSTDZ' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPCODE_TBL_CLMCRCSTDZ SELECT * FROM MIG02.MAPCODE_TBL_CLMCRCSTDZ@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPCODE_TBL_CLMCRCSTDZ', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TB_PYRCCODE *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TB_PYRCCODE' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TB_PYRCCODE SELECT * FROM MIG02.MIG_TB_PYRCCODE@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TB_PYRCCODE', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_DATA_VRFCNTN_CLM *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_DATA_VRFCNTN_CLM' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_DATA_VRFCNTN_CLM SELECT * FROM MIG02.MIG_DATA_VRFCNTN_CLM@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_DATA_VRFCNTN_CLM', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_DATA_BADCNTN_CLM *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_DATA_BADCNTN_CLM' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_DATA_BADCNTN_CLM SELECT * FROM MIG02.MIG_DATA_BADCNTN_CLM@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_DATA_BADCNTN_CLM', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TBL_CLMCRCOCRC_COUNT *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TBL_CLMCRCOCRC_COUNT' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TBL_CLMCRCOCRC_COUNT SELECT * FROM MIG02.MIG_TBL_CLMCRCOCRC_COUNT@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TBL_CLMCRCOCRC_COUNT', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /*************************** MIG_TBL_CLMCLDMPDS *******************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TBL_CLMCLDMPDS' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TBL_CLMCLDMPDS SELECT * FROM MIG02.MIG_TBL_CLMCLDMPDS@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TBL_CLMCLDMPDS', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /***************************               MIG_TBL_CLMCLDNDSR        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TBL_CLMCLDNDSR' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TBL_CLMCLDNDSR SELECT * FROM MIG02.MIG_TBL_CLMCLDNDSR@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TBL_CLMCLDNDSR', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 

   /***************************               MIG_TBL_CLMCLDODSR        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_TBL_CLMCLDODSR' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_TBL_CLMCLDODSR SELECT * FROM MIG02.MIG_TBL_CLMCLDODSR@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_TBL_CLMCLDODSR', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 


   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

   EXCEPTION
      WHEN OTHERS THEN
      ROLLBACK;

   /* --------------- 오류로그( END ) --------------- */

   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);

END MIG_PRC_ETL_CLM_PICR_DMIG1;
------------------------------
create or replace PROCEDURE       MIG_PRC_ETL_CLM_PICR_DMIG2 (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   V_CHG_NM           VARCHAR2(30)   := NULL;

BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := 'MIG_ETL_CLM_PICR_DMIG';
   V_CHG_NM     := '지윤식' ;
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));

   /* ------------------ 이행로직 -------------------- */

   /***************************               MAPKEY_TBL_CLMIFRAFFR_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRAFFR_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRAFFR_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRAFFR_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRAFFR_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMIFRAPLV_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRAPLV_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRAPLV_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRAPLV_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRAPLV_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMIFRBCAM_001        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRBCAM_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRBCAM_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRBCAM_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRBCAM_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMIFRDSCR_001        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRDSCR_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRDSCR_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRDSCR_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRDSCR_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT;
   
   /***************************               MAPKEY_TBL_CLMIFRHPIM_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRHPIM_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRHPIM_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRHPIM_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRHPIM_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT;    

   /***************************               MAPKEY_TBL_CLMIFRIJIR_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRIJIR_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRIJIR_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRIJIR_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRIJIR_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMIFRIJPP_001        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRIJPP_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRIJPP_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRIJPP_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRIJPP_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMIFRINAD_001        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRINAD_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRINAD_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRINAD_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRINAD_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT;  

   /***************************               MAPKEY_TBL_CLMIFRREIT_001        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRREIT_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRREIT_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRREIT_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRREIT_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMIFRRPCT_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRRPCT_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRRPCT_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRRPCT_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRRPCT_000', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMIFRSTCI_001        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMIFRSTCI_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMIFRSTCI_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMIFRSTCI_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMIFRSTCI_001', V_ROW_CNT,SYSDATE,V_CHG_NM) ;
   COMMIT;
 
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

   EXCEPTION
      WHEN OTHERS THEN
      ROLLBACK;

   /* --------------- 오류로그( END ) --------------- */

   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);

END MIG_PRC_ETL_CLM_PICR_DMIG2;
----------------------------------------
create or replace PROCEDURE       MIG_PRC_ETL_CLM_PICR_DMIG3 (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   V_CHG_NM           VARCHAR2(30)   := NULL;

BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := 'MIG_ETL_CLM_PICR_DMIG';
   V_CHG_NM     := '김유석' ;
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));

   /* ------------------ 이행로직 -------------------- */
   /***************************               DEC_TB_PAEXTLIA        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE DEC_TB_PAEXTLIA' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO DEC_TB_PAEXTLIA SELECT * FROM MIG02.DEC_TB_PAEXTLIA@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('DEC_TB_PAEXTLIA', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 

   /***************************               MIG_DEC_PAEXTLIA_LOG        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MIG_DEC_PAEXTLIA_LOG' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MIG_DEC_PAEXTLIA_LOG SELECT * FROM MIG02.MIG_DEC_PAEXTLIA_LOG@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MIG_DEC_PAEXTLIA_LOG', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 


   /***************************               MAPKEY_TBL_CLMCOPAPRV_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCOPAPRV_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCOPAPRV_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCOPAPRV_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCOPAPRV_000', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMCOPCOAP_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCOPCOAP_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCOPCOAP_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCOPCOAP_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCOPCOAP_000', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMCOPPTEC_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCOPPTEC_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCOPPTEC_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCOPPTEC_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCOPPTEC_000', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMCOPPRTT_001        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCOPPRTT_001' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCOPPRTT_001 SELECT * FROM MIG02.MAPKEY_TBL_CLMCOPPRTT_001@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCOPPRTT_001', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMCPSADVT_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCPSADVT_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCPSADVT_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCPSADVT_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCPSADVT_000', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMCPSOTMN_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCPSOTMN_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCPSOTMN_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCPSOTMN_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCPSOTMN_000', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMCPSPMGG_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMCPSPMGG_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMCPSPMGG_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMCPSPMGG_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMCPSPMGG_000', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 

   /***************************               MAPKEY_TBL_CLMMGAACTT_000        **************************************************/   
   V_ROW_CNT := 0 ; 
   EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_CLMMGAACTT_000' ;
   INSERT /*+ APPEND PARALLEL(8) */ INTO MAPKEY_TBL_CLMMGAACTT_000 SELECT * FROM MIG02.MAPKEY_TBL_CLMMGAACTT_000@DL_PICR ;
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   INSERT INTO MIG_ETL_CLM_PICR_DMIG VALUES ('MAPKEY_TBL_CLMMGAACTT_000', V_ROW_CNT,SYSDATE,'김유석') ;
   COMMIT; 



   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

   EXCEPTION
      WHEN OTHERS THEN
      ROLLBACK;

   /* --------------- 오류로그( END ) --------------- */

   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);

END MIG_PRC_ETL_CLM_PICR_DMIG3;

----------------------------
create or replace PROCEDURE             MIG_PRC_ETL_EXEC_LT (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,   -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,   -- INFA 세션명
    I_SOUR_OWNER       VARCHAR2                  -- 소스 오너
)                                                                                                                         
IS                                                                                                                        

    V_BSWR_DVSN    VARCHAR2(3)    := NULL; -- 업무구분
    V_TABLE_ID     VARCHAR2(20)   := NULL; -- 테이블ID
    V_TAR_OWNER    VARCHAR2(10)   := NULL; -- 타겟 오너
    V_ETC_SQL      VARCHAR2(1000) := NULL; -- ETL SQL

    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL;
    
BEGIN                                                                                                                     

/*
    작성자 : 이낙규
    작성일자 : 2021-02-09
    용도 : 대용량 테이블을 이관한다.
    전제조건 : 1. 타겟 오너명이 업무구분3자리 + 'OWN' 이어야함.
               2. 소스와 타겟의 테이블ID가 동일해야함.
               3. 소스와 타겟의 테이블 레이아웃이 동일해야함.
               4. INFA에서 생성한 세션명이 'MIG_PRC_ETL_' + 테이블ID 이어야함.
*/

--    V_TAR_OWNER := V_BSWR_DVSN || 'OWN'; 
      V_TAR_OWNER := 'MIG02';
    V_TABLE_ID  := SUBSTR(I_SESSION_NAME, 13);

    /* ------------ 이관수행 ------------ */     

    SELECT
   'INSERT /*+ APPEND PARALLEL(T 4) */ INTO #[V_TAR_OWNER].#[V_T_TABLE_ID] T 
SELECT /*+ FULL(A) PARALLEL(A 4) */  *
FROM #[I_SOUR_OWNER].#[V_S_TABLE_ID] A
    '
    INTO V_ETC_SQL
    FROM DUAL
    ;
    
    V_ETC_SQL := REPLACE(V_ETC_SQL, '#[V_TAR_OWNER]', V_TAR_OWNER);
    V_ETC_SQL := REPLACE(V_ETC_SQL, '#[V_S_TABLE_ID]', V_TABLE_ID);
    V_ETC_SQL := REPLACE(V_ETC_SQL, '#[V_T_TABLE_ID]', V_TABLE_ID || '_TEST');
    V_ETC_SQL := REPLACE(V_ETC_SQL, '#[I_SOUR_OWNER]', I_SOUR_OWNER);

    DBMS_OUTPUT.PUT_LINE('V_ETC_SQL: ' || V_ETC_SQL);

    EXECUTE IMMEDIATE V_ETC_SQL;
    
    /* ------------- 작업로그 ---------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;

    COMMIT;
   
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_TAR_OWNER, V_TABLE_ID, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
          
EXCEPTION
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             
                                                                                                                          
    /* ------------- 오류로그(END  ) ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_TAR_OWNER, V_TABLE_ID, V_ROW_CNT, V_ERR_CNT, SQLERRM );
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);
                                                                                                                          
END;
--------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_MAPCODE_CTS_MAPPING (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPACNT';
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPCODE_CTS_MAPPING';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-8. MAPCODE_CTS_MAPPING */
INSERT INTO MIG02.MAPCODE_CTS_MAPPING_X T
SELECT A.*
FROM   MIG02.MAPCODE_CTS_MAPPING@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;

------------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_MAPKEY_TBL_AGMT_PYMT_STATUS (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPACNT';
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_AGMT_PYMT_STATUS';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-7. MAPKEY_TBL_AGMT_PYMT_STATUS */
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MIG02.MAPKEY_TBL_AGMT_PYMT_STATUS_X T
SELECT /*+ PARALLEL(A,4) */ A.*
FROM   MIG99.MAPKEY_TBL_AGMT_PYMT_STATUS@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;
-----------------------------
create or replace PROCEDURE       MIG_PRC_ETL_MAPKEY_TBL_AGREEMENT (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPACNT';
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_AGREEMENT';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-1. MAPKEY_TBL_AGREEMENT */
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MIG02.MAPKEY_TBL_AGREEMENT_X T
SELECT /*+ PARALLEL(A,4) */ A.*
FROM   MIG99.MAPKEY_TBL_AGREEMENT_SMALL@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;
------------------------
create or replace PROCEDURE            MIG_PRC_ETL_MAPKEY_TBL_MONTHLY_FINREV_COMP (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPAFIN';
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_MONTHLY_FINREV_COMP';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-6. MAPKEY_TBL_MONTHLY_FINREV_COMP */
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MIG02.MAPKEY_TBL_MONTHLY_FINREV_COMP_X T
SELECT /*+ PARALLEL(A,4) */ A.*
FROM   MIG99.MAPKEY_TBL_MONTHLY_FINREV_COMP@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;

---------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_MAPKEY_TBL_PAYMENT (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPAFIN';
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_PAYMENT';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-3. MAPKEY_TBL_PAYMENT */
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MIG02.MAPKEY_TBL_PAYMENT_X T
SELECT /*+ PARALLEL(A,4) */ A.*
FROM   MIG99.MAPKEY_TBL_PAYMENT@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;
-------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_MAPKEY_TBL_PAYMENT_COMP (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPAFIN';
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_PAYMENT_COMP';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-4. MAPKEY_TBL_PAYMENT_COMP */
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MIG02.MAPKEY_TBL_PAYMENT_COMP_X T
SELECT /*+ PARALLEL(A,4) */ A.*
FROM   MIG99.MAPKEY_TBL_PAYMENT_COMP@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;
---------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_MAPKEY_TBL_PAYMENT_PROCESSING (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPAFIN';
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_PAYMENT_PROCESSING';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-2. MAPKEY_TBL_PAYMENT_PROCESSING */
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MIG02.MAPKEY_TBL_PAYMENT_PROCESSING_X T
SELECT /*+ PARALLEL(A,4) */ A.*
FROM   MIG99.MAPKEY_TBL_PAYMENT_PROCESSING@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;
------------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_MAPKEY_TBL_PAYMENT_PROCESSING_900 (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPAFIN';
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_PAYMENT_PROCESSING_900';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-2. MAPKEY_TBL_PAYMENT_PROCESSING */
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MIG02.MAPKEY_TBL_PAYMENT_PROCESSING_900_X T
SELECT /*+ PARALLEL(A,4) */ A.*
FROM   MIG99.MAPKEY_TBL_PAYMENT_PROCESSING_900@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;
------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_MAPKEY_TBL_POLICY_LOAN_PAYMENT (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPAFIN';
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_POLICY_LOAN_PAYMENT';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-5. MAPKEY_TBL_POLICY_LOAN_PAYMENT */
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MIG02.MAPKEY_TBL_POLICY_LOAN_PAYMENT_X T
SELECT /*+ PARALLEL(A,4) */ A.*
FROM   MIG99.MAPKEY_TBL_POLICY_LOAN_PAYMENT@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;
---------------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_MIG_TBL_POLOAN_PAYMENT_ELEMENT_990 (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPAFIN';
    V_TABLE_NAME   VARCHAR2(100)  := 'MIG_TBL_POLOAN_PAYMENT_ELEMENT_990';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-9. MIG_TBL_POLOAN_PAYMENT_ELEMENT_990 */
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MIG02.MIG_TBL_POLOAN_PAYMENT_ELEMENT_990_X T
SELECT /*+ PARALLEL(A,4) */ A.*
FROM   MIG99.MIG_TBL_POLOAN_PAYMENT_ELEMENT_990@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;
---------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_MIG_TBL_POLOAN_PAYM_COMP_ELEMENT_990 (
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,     -- INFA 세션명
    I_JOB_NM           VARCHAR2  DEFAULT 'TEST',   -- 작업설명
    I_TEST_YN          VARCHAR2  DEFAULT 'N',       -- Y:조회 0건
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8      
)
IS
    V_JOB_SEQ      NUMBER;
    V_OWNER        VARCHAR2(100)  := 'HPAFIN';
    V_TABLE_NAME   VARCHAR2(100)  := 'MIG_TBL_POLOAN_PAYM_COMP_ELEMENT_990';
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------MIG_PGM_CRE_LOGIC-------------- */

/* 1-10. MIG_TBL_POLOAN_PAYM_COMP_ELEMENT_990 */
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MIG02.MIG_TBL_POLOAN_PAYM_COMP_ELEMENT_990_X T
SELECT /*+ PARALLEL(A,4) */ A.*
FROM   MIG99.MIG_TBL_POLOAN_PAYM_COMP_ELEMENT_990@DL_PDNA A
--WHERE  1=1
--AND    ROWNUM <= 100
;

    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;
-------------------------------------
create or replace PROCEDURE       MIG_PRC_ETL_TABLE_COPY (
    I_WORKFLOW_RUN_ID    NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID
    I_SESSION_NAME       VARCHAR2  DEFAULT NULL,     -- INFA 세션명
	I_PARALLEL_YN        VARCHAR2  DEFAULT 'N',      -- PARALLEL 옵션 설정 
    I_POSTFIX            VARCHAR2  DEFAULT NULL      -- 테이블명 접미어 
)
IS
    V_OWNER        VARCHAR2(100); 
	V_POSTFIX      VARCHAR2(100); 
    V_TABLE_NAME   VARCHAR2(100); 
	V_SQL          CLOB; 
	V_PARALLEL     VARCHAR2(20)   := NULL; 
	
    V_ROW_CNT      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;
    V_ERR_MSG      VARCHAR2(2000) := NULL;

BEGIN

	/* 
	    작성자 : 정준철 
		기능 : SOURCE DBLINK (TRG02) 에서 TARGET OWNER 의 테이블로 복제 수행 
		작성일자 : 2021.02.18 
	*/ 

	V_TABLE_NAME      := SUBSTR(I_SESSION_NAME, 13); 
	V_OWNER           := SUBSTR(V_TABLE_NAME, 5, 3) || 'OWN'; 

    V_POSTFIX         := I_POSTFIX; 

    IF I_PARALLEL_YN = 'Y' THEN 
		V_PARALLEL := 'PARALLEL(4)'; 
	END IF; 

	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
	EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    
    ---------------   TABLE COPY SQL QUERY   --------------
	SELECT 'INSERT /*+ APPEND '||V_PARALLEL||' */ INTO '||V_OWNER||'.'||V_TABLE_NAME||V_POSTFIX||' A ( '||COLUMN_TXT||' ) 
	SELECT /*+ FULL(A) */ 
	       '||COLUMN_TXT||'
	  FROM TRG02.'||V_TABLE_NAME||'@DL_DMIG A
	' INTO V_SQL 
	  FROM (
			SELECT LISTAGG(COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY COLUMN_ID) COLUMN_TXT 
			  FROM ALL_TAB_COLUMNS A 
			 WHERE OWNER = V_OWNER
			   AND TABLE_NAME = V_TABLE_NAME
			   AND EXISTS ( SELECT '' FROM ALL_TAB_COLUMNS@DL_DMIG B 
			                 WHERE B.OWNER = 'TRG02' 
							   AND A.TABLE_NAME = B.TABLE_NAME 
							   AND A.COLUMN_NAME = B.COLUMN_NAME ) 
		   ) A 
	;

	EXECUTE IMMEDIATE (V_SQL); 
--	DBMS_OUTPUT.PUT_LINE (V_SQL); 
	
    /* ------------- 작업로그 ------------- */                                                                     
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                                                         
    COMMIT;

    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             

    /* ------------- 오류로그 ------------- */                                                                     
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );  
   	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);                                               

END;
--------------------------------------
create or replace PROCEDURE            MIG_PRC_ETL_TBL_INMINCDR01 ( 
    I_SRC_OWNER        VARCHAR2  DEFAULT 'MIG02',   -- 소스 오너
	I_TABLE_NAME       VARCHAR2  DEFAULT NULL,      -- 테이블명 변경 ('_X'),
	I_START_PART_NO    NUMBER    DEFAULT 0,         -- RANGE 파티션 이관 시작 PART_NO
	I_END_PART_NO      NUMBER    DEFAULT NULL       -- RANGE 파티션 이관 종료 PART_NO (NULL 일 경우 ALL_TAB_PARTITIONS 읽어서 MAX(POS)-1 을 세팅한다
)                                                                                                                         
IS    
    V_BSWR_DVSN    VARCHAR2(3)    := NULL; -- 업무구분
	V_SQLTEXT      VARCHAR2(1000) := NULL; -- SQLTEXT
	
	V_END_PART_NO  NUMBER         := 0;
	V_RUN_CNT      NUMBER         := 0;
	V_PART_NO      NUMBER         := 0;
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL;
    	
--	CURSOR C1 (V_TAR_OWNER VARCHAR2, V_TARGET_TABLE VARCHAR2, I_PART_CNT NUMBER, V_JOB_NO NUMBER)
--	IS
--	SELECT TABLE_OWNER, TABLE_NAME, PARTITION_NAME, PARTITION_POSITION
--	  FROM ALL_TAB_PARTITIONS
--	 WHERE TABLE_NAME = V_TABLE_NAME
--	   AND TABLE_OWNER = V_TAR_OWNER
--	   AND MOD(PARTITION_POSITION, I_PART_CNT) = V_JOB_NO
--	ORDER BY PARTITION_POSITION
--	;
    
BEGIN                                                                                                                     

/*
    작성자 : 이상헌
    작성일자 : 2021-11-10
    용도 : 특정테이블을 TRUNCATE & INSERT 방식으로 PDNA 에서 PICR (QICR, DICR) 로 이관한다.
	
	전제조건 : 1. 소스테이블은 500000 만건 단위로 PART_NO 로 PARTITION 되어 있어야 한다
	         2. 테이블명은 MIG02.테이블명_REWORK 으로 생성되어 있어야 한다
                      
*/

    V_BSWR_DVSN  := SUBSTR(I_TABLE_NAME, 5, 3);     
	
	IF I_END_PART_NO IS NULL
		THEN SELECT MAX(PARTITION_POSITION) - 1
			   INTO V_END_PART_NO
			   FROM ALL_TAB_PARTITIONS@DL_PDNA
			  WHERE TABLE_NAME = I_TABLE_NAME||'_REOWRK';
		ELSE V_END_PART_NO := I_END_PART_NO;
	END IF;	

	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
    EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

--    /* 스키마명 */
--    SELECT  NVL((SELECT TABLE_OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = I_TABLE_NAME),V_BSWR_DVSN||'OWN')     
--      INTO  V_TAR_OWNER
--      FROM  DUAL
--    ;
--        
--    DBMS_OUTPUT.PUT_LINE('SESSION='||I_SESSION_NAME||', TARGET OWNER='||V_TAR_OWNER||', TABLE_NAME='||V_TABLE_NAME);

    DBMS_OUTPUT.PUT_LINE('I_SRC_OWNER='||I_SRC_OWNER||', TABLE NAME='||I_TABLE_NAME||', START_PART_NO='||I_START_PART_NO||', END_PART_NO='||I_END_PART_NO);

	V_RUN_CNT := 0;
    	
	FOR I IN I_START_PART_NO..V_END_PART_NO LOOP
  
		BEGIN
		
		V_RUN_CNT := V_RUN_CNT + 1;
		V_PART_NO := I_START_PART_NO + V_RUN_CNT - 1;  
			
		V_SQLTEXT := 'INSERT /*+ APPEND PARALLEL(8) */ INTO INMOWN.TBL_INMINCDR01 SELECT * FROM MIG02.TBL_INMINCDR01_REWORK@DL_PDNA WHERE PART_NO = '||V_PART_NO;
					  
		DBMS_OUTPUT.PUT_LINE('RUN='||V_RUN_CNT||', SQLTEXT '||V_SQLTEXT);				  
					  
--		EXECUTE IMMEDIATE V_SQLTEXT;			  	  
		
		COMMIT;
	
		EXCEPTION
		  WHEN OTHERS THEN
			ROLLBACK;
			V_ERR_MSG := SQLERRM;
			DBMS_OUTPUT.PUT_LINE(V_ERR_MSG);
		
		END;
  
	END LOOP;

--    /* ------------- 오류로그(END  ) ------------- */                                                                     
--
--    CMMASV.MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_TAR_OWNER, V_SEL_TID, V_ROW_CNT, V_ERR_CNT, SQLERRM );
--    RAISE_APPLICATION_ERROR(-20001, SQLERRM);
                                                                                                                          
END;
---------------------------------
create or replace PROCEDURE            MIG_PRC_INFA_LOG_TEST
(
    I_WORKFLOW_RUN_ID  IN NUMBER,                -- INFA 워크플로우실행ID
    I_SESSION_NAME     IN VARCHAR2,              -- INFA 세션명
    I_OWNER            IN VARCHAR2,              -- 타겟테이블소유자
    I_TABLE_NAME       IN VARCHAR2,              -- 타겟테이블
    I_ROW_CNT          IN NUMBER   DEFAULT 0,    -- 성공건수
    I_ERR_CNT          IN NUMBER   DEFAULT 0,    -- 에러건수
    I_ERR_MSG          IN VARCHAR2 DEFAULT NULL  -- 에러메시지
)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  
  V_BYTES         NUMBER;
  
BEGIN

  BEGIN
    IF I_WORKFLOW_RUN_ID IS NULL OR I_SESSION_NAME IS NULL THEN
        RETURN;
    END IF;
  END;
  
  SELECT SUM(BYTES) BYTES
  INTO   V_BYTES
  FROM   DBA_SEGMENTS 
  WHERE  OWNER        = I_OWNER
  AND    SEGMENT_NAME = I_TABLE_NAME;
  
  UPDATE CMMASV.MIG_INFA_LOG X SET
         SUCCESSFUL_ROWS = I_ROW_CNT,
         FAILED_ROWS     = I_ERR_CNT,
         ERROR_MSG       = I_ERR_MSG,
         BYTES           = V_BYTES,
		 RESULT          = 'FAILED'
  WHERE  WORKFLOW_RUN_ID = I_WORKFLOW_RUN_ID
  AND    SESSION_NAME    = I_SESSION_NAME;
  
  COMMIT;
  
  EXCEPTION 
    WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
      ROLLBACK;
      
END MIG_PRC_INFA_LOG_TEST;
---------------------------------
create or replace PROCEDURE MIG_PRC_JOBLOG(
	I_JOB_GB	IN VARCHAR2,
	I_JOB_SEQ IN NUMBER,
	I_TABLE_NAME IN VARCHAR2,
	I_JOB_YN IN VARCHAR2,
	I_JOB_NAME IN VARCHAR2,
	I_ROW_CNT IN NUMBER
)
IS
	V_SQLERRM VARCHAR2(1000);
	V_ROW_CNT NUMBER := 0;
	
BEGIN

	IF	I_ROW_CNT = 0 THEN V_ROW_CNT := SQL%ROWCOUNT;
	ELSE V_ROW_CNT := I_ROW_CNT;
	END IF;
	
	IF I_JOB_YN = 'N' THEN V_SQLERRM := SQLERRM||' '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
	ELSIF I_JOB_YN = 'Y' THEN V_SQLERRM := '성공';
	END IF;
	
	IF I_JOB_GB = 'START' THEN
	INSERT INTO MIG_LOG_JOBLOG(JOB_SEQ, TABLE_NAME, JOB_STRT_DTM)
	VALUES(I_JOB_SEQ, I_TABLE_NAME, SYSDATE)
	; COMMIT;
	ELSIF I_JOB_GB = 'END' THEN
	UPDATE MIG_LOG_JOBLOG
	SET JOB_YN = I_JOB_YN
	   ,ROW_CNT = V_ROW_CNT
	   ,JOB_DESC = V_SQLERRM
	   ,JOB_END_DTM = SYSDATE
	WHERE JOB_SEQ = I_JOB_SEQ
	; COMMIT;
	END IF;
	
END MIG_PRC_JOBLOG;
---------------------------
create or replace PROCEDURE       MIG_PRC_KDW_TEST_01
IS

V_SQLTEXT CLOB;

BEGIN


V_SQLTEXT := 'CREATE TABLE temp_kdw_test_01
NOLOGGING
as
SELECT /*+ USE_HASH(A B) PARALLEL(a 4) PARALLEL(b 4)  */ 
       NVL(b.OCR_RECG_SCAN_SUID,0)                                 AS OCR_RECG_SCAN_SUID            /* 1  .OCR인식스캔SUID(NOT NULL) */
     , NVL(b.OCR_RECG_DCMT_SQNO,0)                                 AS OCR_RECG_DCMT_SQNO            /* 2  .OCR인식문서일련번호(NOT NULL) */
     , ROW_NUMBER() OVER (PARTITION BY NVL(b.OCR_RECG_SCAN_SUID,0),NVL(b.OCR_RECG_DCMT_SQNO,0) ORDER BY A.LAST_CHNG_DTTM, A.RECG_ITEM_SQNO)
                                                                    AS OCR_RECG_CELL_SQNO            /* 3  .OCR인식셀일련번호(NOT NULL) */
     , ''MIG_001''                                                    AS RGSR_EMNB                     /* 4  .등록자사원번호(NOT NULL) */
     , SYSDATE                                                      AS RGST_DTTM                     /* 5  .등록일시(NOT NULL) */
     , SUBSTRB(A.DOCU_ID||''^''||A.DOCU_DTAL_ID||''^''||A.DOCU_CLSF||''^''||A.RECG_ITEM_KEY||''^''||A.RECG_ITEM_SQNO,1,50)
                                                                    AS RGST_PRGM_ID                  /* 6  .등록프로그램ID(NOT NULL) */
     , A.LAST_CHMN_MPNO                                             AS LAST_CHNR_EMNB                /* 7  .최종변경자사원번호(NOT NULL) */
     , A.LAST_CHNG_DTTM                                             AS LAST_CHNG_DTTM                /* 8  .최종변경일시(NOT NULL) */
     , SUBSTRB(A.PGM_ID,1,50)                                       AS LAST_CHNG_PRGM_ID             /* 9  .최종변경프로그램ID(NOT NULL) */
     , ''N''                                                          AS DLTN_YN                       /* 10 .삭제여부(NOT NULL) */
     , NVL(A.DOCU_ID, ''@'')                                          AS OCR_DCMT_ID                   /* 11 .OCR문서ID(NOT NULL) */
     , NVL(A.DOCU_DTAL_ID, ''@'')                                     AS OCR_DCMT_DTL_ID               /* 12 .OCR문서세부ID(NOT NULL) */
     , 10000000000000 + nvl(REGEXP_REPLACE(A.PRSN_ACRP_SQNO,''[^0-9]''),0)
                                                                    AS CLAM_REPT_SUID                /* 13 .클레임접수SUID(NOT NULL) */
     , NVL(A.DOCU_CLSF, ''@'')                                        AS DCMT_CLSF_CODE                /* 14 .문서분류코드(NOT NULL) */
     , NVL(A.RECG_ITEM_KEY, ''@'')                                    AS RECG_ITM_KEY_VAL              /* 15 .인식항목키값(NOT NULL) */
     , NVL(A.RECG_ITEM_SQNO, 0)                                     AS OCR_RECG_ITM_SQNO             /* 16 .OCR인식항목일련번호(NOT NULL) */
     , A.RECG_ITEM_VAL                                              AS RECG_ITM_VAL                  /* 17 .인식항목값(NULL) */
     , A.RECG_PSTN_INFO                                             AS RECG_LOCT_INFO_VAL            /* 18 .인식위치정보값(NULL) */
     , A.RECG_ITEM_TOT                                              AS RECG_ITM_CNT                  /* 19 .인식항목수(NULL) */
     , A.RECG_RESL_DVCD                                             AS RECG_RSLT_DVSN_CODE           /* 20 .인식결과구분코드(NULL) */
  FROM TB_PAOCRCEL PARTITION(P2020) A        /* OCR인식셀정보 */
       LEFT OUTER JOIN temp_kdw_test01 b
      ON A.DOCU_ID = B.DOCU_ID
        AND A.DOCU_DTAL_ID = B.DOCU_DTAL_ID'
;

EXECUTE IMMEDIATE V_SQLTEXT;

END;
----------------------------
create or replace PROCEDURE       MIG_PRC_KDW_TEST_02
IS

V_SQLTEXT CLOB;

BEGIN


V_SQLTEXT := 'CREATE TABLE temp_kdw_test_02
NOLOGGING
as
SELECT /*+ USE_HASH(A B) PARALLEL(a 4) PARALLEL(b 4) pq_distribute(a none none) */ 
       NVL(b.OCR_RECG_SCAN_SUID,0)                                 AS OCR_RECG_SCAN_SUID            /* 1  .OCR인식스캔SUID(NOT NULL) */
     , NVL(b.OCR_RECG_DCMT_SQNO,0)                                 AS OCR_RECG_DCMT_SQNO            /* 2  .OCR인식문서일련번호(NOT NULL) */
     , ROW_NUMBER() OVER (PARTITION BY NVL(b.OCR_RECG_SCAN_SUID,0),NVL(b.OCR_RECG_DCMT_SQNO,0) ORDER BY A.LAST_CHNG_DTTM, A.RECG_ITEM_SQNO)
                                                                    AS OCR_RECG_CELL_SQNO            /* 3  .OCR인식셀일련번호(NOT NULL) */
     , ''MIG_001''                                                    AS RGSR_EMNB                     /* 4  .등록자사원번호(NOT NULL) */
     , SYSDATE                                                      AS RGST_DTTM                     /* 5  .등록일시(NOT NULL) */
     , SUBSTRB(A.DOCU_ID||''^''||A.DOCU_DTAL_ID||''^''||A.DOCU_CLSF||''^''||A.RECG_ITEM_KEY||''^''||A.RECG_ITEM_SQNO,1,50)
                                                                    AS RGST_PRGM_ID                  /* 6  .등록프로그램ID(NOT NULL) */
     , A.LAST_CHMN_MPNO                                             AS LAST_CHNR_EMNB                /* 7  .최종변경자사원번호(NOT NULL) */
     , A.LAST_CHNG_DTTM                                             AS LAST_CHNG_DTTM                /* 8  .최종변경일시(NOT NULL) */
     , SUBSTRB(A.PGM_ID,1,50)                                       AS LAST_CHNG_PRGM_ID             /* 9  .최종변경프로그램ID(NOT NULL) */
     , ''N''                                                          AS DLTN_YN                       /* 10 .삭제여부(NOT NULL) */
     , NVL(A.DOCU_ID, ''@'')                                          AS OCR_DCMT_ID                   /* 11 .OCR문서ID(NOT NULL) */
     , NVL(A.DOCU_DTAL_ID, ''@'')                                     AS OCR_DCMT_DTL_ID               /* 12 .OCR문서세부ID(NOT NULL) */
     , 10000000000000 + nvl(REGEXP_REPLACE(A.PRSN_ACRP_SQNO,''[^0-9]''),0)
                                                                    AS CLAM_REPT_SUID                /* 13 .클레임접수SUID(NOT NULL) */
     , NVL(A.DOCU_CLSF, ''@'')                                        AS DCMT_CLSF_CODE                /* 14 .문서분류코드(NOT NULL) */
     , NVL(A.RECG_ITEM_KEY, ''@'')                                    AS RECG_ITM_KEY_VAL              /* 15 .인식항목키값(NOT NULL) */
     , NVL(A.RECG_ITEM_SQNO, 0)                                     AS OCR_RECG_ITM_SQNO             /* 16 .OCR인식항목일련번호(NOT NULL) */
     , A.RECG_ITEM_VAL                                              AS RECG_ITM_VAL                  /* 17 .인식항목값(NULL) */
     , A.RECG_PSTN_INFO                                             AS RECG_LOCT_INFO_VAL            /* 18 .인식위치정보값(NULL) */
     , A.RECG_ITEM_TOT                                              AS RECG_ITM_CNT                  /* 19 .인식항목수(NULL) */
     , A.RECG_RESL_DVCD                                             AS RECG_RSLT_DVSN_CODE           /* 20 .인식결과구분코드(NULL) */
  FROM temp_TB_PAOCRCEL PARTITION(P2020) A        /* OCR인식셀정보 */
       LEFT OUTER JOIN temp_kdw_test01 b
      ON A.DOCU_ID = B.DOCU_ID
        AND A.DOCU_DTAL_ID = B.DOCU_DTAL_ID'
;

EXECUTE IMMEDIATE V_SQLTEXT;

END;
------------------------
create or replace PROCEDURE       MIG_PRC_LOAD_YN ---
IS
        V_JOB_SEQ    NUMBER;
        V_PGM_NAME   VARCHAR2(100) := 'LOAD_20201116';  ---
        V_CNT        NUMBER;
        V_ERR_CNT    NUMBER;
		V_BAS_DT     DATE := SYSDATE; 
		V_SQL        VARCHAR2(4000);
		
--	-- 테이블별 COM_YN 체크
--	CURSOR CURSOR_LOADYN  IS
--	SELECT TBL_ID, SCR
--	FROM VW_TBL_LOADYN_SCR
--	WHERE TBL_ID IN (SELECT TBL_ID FROM MIG_TBL_20201116 
--					 WHERE COM_YN = 'N'
--					 );	  
		
BEGIN

  
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';
    EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

    PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, TO_DATE('00010101', 'YYYYMMDD'), 'START', 0, NULL, NULL );
	COMMIT;
	
	
	
------------------------------------------------------------------------

	-- 고객 테이블 적재 진행 BYTES, BLOCKS UPDATE

	MERGE  INTO  MIG_TBL_20201116 A
	USING DBA_SEGMENTS@DL_DICR B  -- ICS
	ON (    B.OWNER = 'ICSOWN'
		AND A.TBL_ID =B.SEGMENT_NAME AND A.TBL_ID LIKE 'TBL_ICS%'
		AND A.COM_YN ='N'
		)
	WHEN MATCHED THEN
	  UPDATE SET A.BYTES_TARGET = B.BYTES, A.BLOCKS_TARGET = B.BLOCKS
	  ; 
	  
	COMMIT;  

	MERGE  INTO  MIG_TBL_20201116 A
	USING DBA_SEGMENTS@DL_DCUS B  -- ICM
	ON (    B.OWNER = 'ICMOWN'
	AND     A.TBL_ID =B.SEGMENT_NAME AND A.TBL_ID LIKE 'TBL_ICM%'
	AND A.COM_YN ='N'
		)
	WHEN MATCHED THEN
	  UPDATE SET A.BYTES_TARGET = B.BYTES, A.BLOCKS_TARGET = B.BLOCKS
	  ;  
	  
	COMMIT;	  
	  
----	 테이블별 COM_YN 체크

	-- COM_YN UPDATE

	MERGE  INTO  MIG_TBL_20201116 A
	USING VW_LOADYN_CHK B  
	ON (    A.TBL_ID =B.TBL_ID
	AND     B.CNT = 1
		)
	WHEN MATCHED THEN
	  UPDATE SET A.COM_YN = 'Y'
	WHERE  A.COM_YN ='N'	  
	  ;
	  
    COMMIT;	 


    FOR  ITEM IN 
	            (
					SELECT TBL_ID, REPLACE(REPLACE(REPLACE(SCR, ';', ''), 'COMMIT',''), '''', '''') AS SCR
					FROM MIG02.VW_TBL_LOADYN_SCR
					WHERE TBL_ID IN (SELECT TBL_ID FROM MIG_TBL_20201116 
									 WHERE COM_YN = 'N'
									 )				
				) LOOP
	             V_SQL := ITEM.SCR;
	             EXECUTE IMMEDIATE V_SQL;
	             COMMIT;
	END LOOP;
	
	
	
	-- COM_YN UPDATE

	MERGE  INTO  MIG_TBL_20201116 A
	USING VW_LOADYN_CHK B  
	ON (    A.TBL_ID =B.TBL_ID
	AND     B.CNT = 1
		)
	WHEN MATCHED THEN
	  UPDATE SET A.COM_YN = 'Y'
	WHERE  A.COM_YN ='N'	  
	  ;
	  
    COMMIT;	 
	
 

	  
-- TABLE CNT EXECUTE
--
    FOR  ITEM_CNT IN 
	            (

				SELECT A.TBL_ID, REPLACE(REPLACE(REPLACE(SCR, ';', ''), 'COMMIT',''), '''', '''') AS SCR
				FROM VW_TBL_LOADYN_CNT A , MIG_TBL_20201116 A1 --, VW_CHK_LOG B
				WHERE A.TBL_ID = A1.TBL_ID
				AND   A1.COM_YN = 'Y'   
                AND  A1.CNT_TARGET IS NULL				 			
				) LOOP
	    
		V_SQL := ITEM_CNT.SCR;
	    EXECUTE IMMEDIATE V_SQL;
	   COMMIT;
	END LOOP;
	
	
	
		-- TARGET CNT  UPDATE
	MERGE  INTO  MIG_TBL_20201116 A
	USING VW_CHK_LOG  B  
	ON (    A.COM_YN ='Y'
	AND     A.TBL_ID =B.TBL_ID
	AND     B.CNT >= 0
	AND     B.TYPE = 'LOAD_CNT'
		)
	WHEN MATCHED THEN
	  UPDATE SET A.CNT_TARGET = B.CNT
	  ;

    COMMIT;
				 
-------------------------------------------------------------------

  V_CNT := SQL%ROWCOUNT;
  
    PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, SYSDATE, 'END', V_CNT, NULL, NULL );
	
    COMMIT;

	
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
   --PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, SYSDATE, 'END', V_CNT, SQLCODE, SQLERRM );
   PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, SYSDATE, 'END', V_CNT, SQLCODE,  SQLERRM || V_SQL );
   COMMIT;

    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

END;
------------------------------
create or replace PROCEDURE       MIG_PRC_MAPCODE_ALL_CLM (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;

BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := 'MAPCODE_ALL_CLM';
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));

   /* ------------------ 이행로직 -------------------- */

MIG_PRC_TRUNCATE('MAPCODE_ALL_CLM');

INSERT /*+ APPEND PARALLEL(T 4) */  INTO MAPCODE_ALL_CLM T (
SELECT TRIM(CODE_ENNM)
     , TRIM(CODE_KRNM)
     , TRIM(ASIS_CODE_ENNM)
     , TRIM(ASIS_CODE_KRNM)
     , TRIM(ASIS_VAL)
     , TRIM(ASIS_VAL_NM)
     , TRIM(TOBE_VAL)
     , TRIM(TOBE_VAL_NM)
     , TRIM(REMARK)
     , TRIM(RGSR_NM)
     , SYSDATE       RGST_DTTM
  FROM (SELECT X.*
             , ROW_NUMBER() OVER (PARTITION BY TRIM(X.CODE_ENNM),TRIM(X.ASIS_CODE_ENNM),TRIM(X.ASIS_VAL) ORDER BY ORD,X.TOBE_VAL) RN  
          FROM (SELECT A.TOBE_CODE_ID            CODE_ENNM
                     , A.TOBE_CODE_ID_NM         CODE_KRNM
                     , A.ASIS_CODE_ID            ASIS_CODE_ENNM
                     , A.ASIS_CODE_ID_NM         ASIS_CODE_KRNM
                     , A.ASIS_CODE_VAL           ASIS_VAL
                     , A.ASIS_CODE_VAL_NM        ASIS_VAL_NM
                     , A.TOBE_CODE_VAL           TOBE_VAL
                     , A.TOBE_CODE_VAL_NM        TOBE_VAL_NM
                     , '메타코드매핑'            REMARK
                     , '노진호'                  RGSR_NM
                     , NULL                      RGST_DTTM
                     , 1                         ORD
                  FROM VW_MAP_EDTL  A 
                       INNER JOIN VW_CMM_CODE B 
                         ON A.TOBE_CODE_ID       = B.INTG_CODE_ID
                        AND A.TOBE_CODE_ID_NM    = B.INTG_CODE_NM
                        AND A.TOBE_CODE_VAL      = B.INTG_CODE_VAL
                 UNION ALL 
                SELECT CODE_ENNM
                     , CODE_KRNM
                     , ASIS_CODE_ENNM
                     , ASIS_CODE_KRNM
                     , ASIS_VAL
                     , ASIS_VAL_NM
                     , TOBE_VAL
                     , TOBE_VAL_NM
                     , REMARK
                     , RGSR_NM
                     , RGST_DTTM
                     , 2            ORD
                  FROM MAPCODE_INDV_CLM A
                 UNION ALL
                SELECT 'PMMI_RCPT_ITM_LRNK_CODE' AS CODE_ENNM
                     , '실손영수증항목하위코드'  AS CODE_KRNM
                     , 'PMMI_ITEM_DTCD'          AS ASIS_CODE_ENNM
                     , '실손항목세부코드'        AS ASIS_CODE_KRNM
                     , A.PMMI_ITEM_DTCD          AS ASIS_VAL
                     , A.PMMI_ITEM_DTNM          AS ASIS_VAL_NM
                     , A.PMMI_ITEM_DTCD          AS TOBE_VAL
                     , A.PMMI_ITEM_DTNM          AS TOBE_VAL_NM
                     , '개별코드매핑'            AS REMARK
                     , '노진호'                  AS RGSR_NM
                     , SYSDATE                   AS RGST_DTTM
                     , 3         ORD
                  FROM (SELECT  PMMI_ITEM_DTCD,MAX(TRIM(PMMI_ITEM_DTNM)) PMMI_ITEM_DTNM FROM TB_PAMRIITM WHERE TRIM(PMMI_ITEM_DTCD) IS NOT NULL GROUP BY PMMI_ITEM_DTCD )  A
                 ) X
         )
  WHERE RN = 1 
  )
;

   /* --------------- 작업로그( END ) --------------- */

   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

   EXCEPTION
      WHEN OTHERS THEN
      ROLLBACK;

   /* --------------- 오류로그( END ) --------------- */

   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);

END MIG_PRC_MAPCODE_ALL_CLM;
----------------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_ADDR_ENC_001
(
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL      -- INFA 워크플로우실행ID
  , I_SESSION_NAME     VARCHAR2  DEFAULT NULL      -- INFA 세션명
  , I_PARAM3           VARCHAR2  DEFAULT NULL      -- NULL
  , I_PARAM4           VARCHAR2  DEFAULT NULL      -- NULL
  , I_PARAM5           VARCHAR2  DEFAULT NULL      -- NULL
  , I_PARAM6           VARCHAR2  DEFAULT NULL      -- NULL
  , I_PARAM7           VARCHAR2  DEFAULT NULL      -- NULL
  , I_PARAM8           VARCHAR2  DEFAULT NULL      -- NULL
)
AS 
    V_ERR_CODE NUMBER; 
    V_ERR_MSG VARCHAR2(1000); 
	V_PROC_START_DATE DATE; 
BEGIN
	
	V_PROC_START_DATE := SYSDATE; 
	
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'ADDRESS', 'ADDR_LINE_ONE' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSSCM700', 'HOUS_ADDR_DTAL' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSSCM700', 'WKPL_ADDR_DTAL' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSSCM710', 'HOUS_ADDR_DTAL' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSSCM710', 'WKPL_ADDR_DTAL' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAFIMARM', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAFIMRIE', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAFIMRII', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAFIMRIR', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAFIMRVR', 'REVR_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PARBFDET', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAELFINF', 'ADDR_2' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PATRMCND', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PACLPCAM', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PASUSCRB', 'ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_NCUDWRQT', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CPLNDCUT', 'WHOL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_ISRPTCNP', 'SEND_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_NCMEDPAR', 'VSMD_HOPE_DTAD' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_NCTBLDSR', 'AGNT_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_NCTBLDSR', 'AGN2_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSAML010 ', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSAML010 ', 'AGNT_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSAML010 ', 'AGN2_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSAML020 ', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSAML020 ', 'AGNT_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSAML020 ', 'AGN2_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_ISRPT060', 'SEND_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PATRMCND', 'CURT_DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSBNCCHG', 'HOUS_ADDR_2' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSBNCCHG', 'WKPL_ADDR_2' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSBNCCHG', 'POLY_RCVP_ADR2' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PATRMCND', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_NCINVCIV', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAEXTPCP', 'REVR_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_NCTBLDSC', 'ENGL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAADTRVR', 'REVR_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAAGEDMD', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAPMICSH', 'REVR_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAPMIPBH', 'RECV_ADDR_2' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAETHCST', 'CUST_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAMSS016', 'ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAMSS060', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAREC021', 'CUST_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPTA006', 'ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAMSS012', 'ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAMSS084', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAECM003', 'WKPL_DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAECM004', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAECM016', 'XCLC_CS_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAECM029', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAECM034', 'SEND_ADDR' ); 
	
	-- 2020.11.27 추가 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPPE015', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPPE016', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPPE017', 'SEND_DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAADTDEH', 'REVR_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PAADTDET', 'REVR_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSAML040', 'CUST_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSAML040', 'MAIN_SPLR_CNNO' ); 
	
	-- 2021.01.04 추가 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_PABNC012', 'RQST_BRCH_RSAD' ); 

	-- 2021.02.15 추가 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAECM019', 'CUST_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPPE126', 'ADDR_2' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPPE128', 'ADDR_2' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPTA011', 'ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPCO015', 'ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAMSS023', 'ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAETH070', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAMSS084', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MAVSM005', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPPE015', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_RICSTCOC', 'CHGM_DMCP_ADR2' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_RICSTCOC', 'HDOF_ADDR_2' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_RICSTCOC', 'CHGM_MAIL_ADDR' ); 

	-- 2021.03.23 추가 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPED103', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_SMPED150', 'DTAL_ADDR' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_BOBNCCLI', 'DTAL_ADDR_1' ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_BOBNCCLI', 'DTAL_ADDR_2' ); 
	
	-- 2021.04.30 추가 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE, 'TB_UVORG101', 'ADDR_2' ); 


    -- ### 주소 암호화값 변환 대상만 ### -- 
	--01. 고객정보변경
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_CSSCM030', 'DTAL_ADDR', ' AND ADDR_KDCD IN (''11'',''12'',''13'',''14'',''21'',''22'',''23'') '  ); 
	MIG_PRC_MAPKEY_ADDR_ENC_002 ( V_PROC_START_DATE,  'TB_MACIM100', 'DTAL_ADDR' ); 

	

EXCEPTION 
    WHEN others THEN 
      V_ERR_CODE := sqlcode; 
      V_ERR_MSG  := SUBSTR(sqlerrm, 1, 200); 
--	  RAISE_APPLICATION_ERROR (V_ERR_CODE, V_ERR_MSG) ; 
		DBMS_OUTPUT.PUT_LINE (V_ERR_CODE); 
		DBMS_OUTPUT.PUT_LINE (V_ERR_MSG); 
		
END;
-------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_ADDR_ENC_002
(
    I_PROC_START_DATE       DATE      DEFAULT NULL 
  , I_TABLE_NAME            VARCHAR2  DEFAULT NULL
  , I_ADDR_COL_NM           VARCHAR2  DEFAULT NULL
  , I_WHERE_STR             VARCHAR2  DEFAULT NULL 
)
AS 

    V_ERR_CODE NUMBER; 
    V_ERR_MSG VARCHAR2(1000); 

	V_TABLE_NAME VARCHAR2(30); 
      V_ADDR_COL_NM VARCHAR2(30); 

	V_SQL VARCHAR2(4000); 
	V_DOMAIN_NAME VARCHAR2(50); 
	V_START_DATE DATE; 
	V_PROC_START_DATE DATE; 
	V_INDEX NUMBER; 
	V_COUNT NUMBER; 
	
BEGIN 
	V_INDEX := 1; 
	V_PROC_START_DATE := SYSDATE; 
	V_DOMAIN_NAME := 'ADDR_ENC'; 

	EXECUTE IMMEDIATE ('TRUNCATE TABLE MAPKEY_ADDR_ENC_TMP1');  

	V_TABLE_NAME        := I_TABLE_NAME;
	V_ADDR_COL_NM       := I_ADDR_COL_NM; 
	V_START_DATE        := SYSDATE; 
	
	V_SQL :=          'INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL (A 8) */ INTO MAPKEY_ADDR_ENC_TMP1 ( ADDR_ENC_KR )   '; 
	V_SQL := V_SQL || 'SELECT DISTINCT A.'||V_ADDR_COL_NM||'   '; 
	V_SQL := V_SQL || '  FROM '||V_TABLE_NAME||' A   '; 
	V_SQL := V_SQL || ' WHERE 1=1   '; 
	V_SQL := V_SQL || '   AND TRIM(A.'||V_ADDR_COL_NM||') IS NOT NULL  '; 
	V_SQL := V_SQL || I_WHERE_STR;
	V_SQL := V_SQL || '   AND NOT EXISTS ( SELECT '''' FROM MAPKEY_ADDR_ENC X   '; 
	V_SQL := V_SQL || '                     WHERE A.'||V_ADDR_COL_NM||' = X.ADDR_ENC_KR )   '; 

--	DBMS_OUTPUT.PUT_LINE (V_SQL); 

	EXECUTE IMMEDIATE (V_SQL); 

	V_COUNT := SQL%ROWCOUNT; 

	INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG) 
	VALUES 
	(V_DOMAIN_NAME, V_TABLE_NAME, V_ADDR_COL_NM, V_COUNT, 0, V_PROC_START_DATE, V_START_DATE, SYSDATE, 'SUCCESS', NULL, NULL) ; 

	COMMIT; 

	V_PROC_START_DATE := SYSDATE; 
	V_DOMAIN_NAME := 'ADDR_ENC_U8';
	V_INDEX := 1; 

	LOOP 
	
		V_START_DATE := SYSDATE; 

		UPDATE /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ MAPKEY_ADDR_ENC_TMP1 A 
		   SET ADDR_ENC_U8 = FN_ADDR_SEC (TRIM(ADDR_ENC_KR)) 
		 WHERE ( ADDR_ENC_U8 IS NULL ) 
		   AND ROWNUM <= 5000
		; 

		V_COUNT := SQL%ROWCOUNT; 

        INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG) 
		VALUES 
		(V_DOMAIN_NAME, V_TABLE_NAME, 'ADDR_ENC_'||V_INDEX, 0, V_COUNT, V_PROC_START_DATE, V_START_DATE, SYSDATE, 'SUCCESS', NULL, NULL) ; 

		COMMIT; 
		V_INDEX := V_INDEX + 1; 
		
		EXIT WHEN V_COUNT = 0; 
	
	END LOOP;  


	INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL (A 8) */ INTO MAPKEY_ADDR_ENC ( ADDR_ENC_KR, ADDR_ENC_U8 ) 
	SELECT /*+ PARALLEL (8) */ 
	       DISTINCT 
		   ADDR_ENC_KR
		 , ADDR_ENC_U8
      FROM MAPKEY_ADDR_ENC_TMP1 A 
	 WHERE NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC X 
	                     WHERE A.ADDR_ENC_KR = X.ADDR_ENC_KR ) 
    ; 
	
	COMMIT; 
	
EXCEPTION 
    WHEN others THEN 
      V_ERR_CODE := sqlcode; 
      V_ERR_MSG  := SUBSTR(sqlerrm, 1, 200); 
	  
      INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG) 
      VALUES 
      (V_DOMAIN_NAME, V_TABLE_NAME, V_ADDR_COL_NM, V_COUNT, 0, SYSDATE, V_START_DATE, SYSDATE, 'ERROR', V_ERR_CODE, V_ERR_MSG) ; 
	  COMMIT; 
	  RETURN; 
END;
----------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_POLICY_NUMBER_010 (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   
BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
   
   /* ------------------ ERR LOG ----------------------
    -- DROP TABLE ERR$TABLE_NAME PURGE;
    -- CALL DBMS_ERRLOG.CREATE_ERROR_LOG('TRG_TABLE_NAME', 'ERR$TABLE_NAME');
    -- LOG ERRORS INTO ERR$TABLE_NAME REJECT LIMIT UNLIMITED
   ------------------------------------------------ */
   /* ------------------ 초기적재 -------------------- */

   /* ------------------ 이행로직 -------------------- */

MIG_PRC_TRUNCATE('MAPKEY_POLICY_NUMBER');

INSERT /*+ APPEND PARALLEL(T 4) */ INTO MAPKEY_POLICY_NUMBER T
( POLY_NO
, VALD_DVSN_CODE)
SELECT /*+ PARALLEL(A 4)*/
	   A.ASIS_PK_COL1 AS POLY_NO
	 , A.VALD_DVSN_CODE
  FROM MAPKEY_TBL_AGREEMENT A
 WHERE 1=1
   AND A.VALD_DVSN_CODE = '1'
   AND A.DEL_YN = 'N'
 GROUP BY A.ASIS_PK_COL1, A.VALD_DVSN_CODE 
;

   /* --------------- 작업로그( END ) --------------- */
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   
EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   /* --------------- 오류로그( END ) --------------- */
   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
   
END MIG_PRC_MAPKEY_POLICY_NUMBER_010;
--------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_RRNO_ENC ---
IS
        V_JOB_SEQ    NUMBER;
        V_PGM_NAME   VARCHAR2(100) := 'MAPKEY_RRNO_ENC_0818';  ---
        V_CNT        NUMBER;
        V_ERR_CNT    NUMBER;
		V_BAS_DT     DATE := SYSDATE; 
BEGIN

  
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';
    EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

    PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, TO_DATE('00010101', 'YYYYMMDD'), 'START', 0, NULL, NULL );
	COMMIT;
	
	
	
------------------------------------------------------------------------


	UPDATE   MAPKEY_RRNO_ENC_0904 
	SET RRNO_ENC_U8 =  DBSEC.spin_crypto.spinenc('P001', DBSEC.spin_crypto.spindec@DL_MIG('P001', RRNO_ENC_KR ) )
	WHERE RRNO_ENC_U8 IS NULL
	AND ROWNUM <= 20000
	;	


-------------------------------------------------------------------

  V_CNT := SQL%ROWCOUNT;
  
    PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, SYSDATE, 'END', V_CNT, NULL, NULL );
	
    COMMIT;

	
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, SYSDATE, 'END', V_CNT, SQLCODE, SQLERRM );
	COMMIT;

    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

END;
--------------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_RRNO_ENCR ---
(
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL      -- INFA 워크플로우실행ID  추가
  , I_SESSION_NAME     VARCHAR2  DEFAULT NULL      -- INFA 세션명         추가
  , I_PARAM3           VARCHAR2  DEFAULT NULL      -- 이행구분(사전이행, 본이행)
  , I_PARAM4           VARCHAR2  DEFAULT NULL 
  , I_PARAM5           VARCHAR2  DEFAULT NULL 
  , I_PARAM6           VARCHAR2  DEFAULT NULL 
  , I_PARAM7           VARCHAR2  DEFAULT NULL 
  , I_PARAM8           VARCHAR2  DEFAULT NULL     
)
IS
        V_JOB_SEQ    NUMBER;
        V_PGM_NAME   VARCHAR2(100) := 'MAPKEY_RRNO_ENCR';  ---
        V_CNT        NUMBER;
		V_INDEX      NUMBER; 
        V_ERR_CNT    NUMBER;
		V_BAS_DT     DATE := SYSDATE; 
		V_PROC_START_DATE DATE := SYSDATE; 
		V_START_DATE DATE; 
BEGIN

  
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';
    EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

    PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, TO_DATE('00010101', 'YYYYMMDD'), 'START', 0, NULL, NULL );
	COMMIT;
	
	V_INDEX := 1; 
	
------------------------------------------------------------------------

	LOOP 
	
		V_START_DATE := SYSDATE; 

		UPDATE MAPKEY_RRNO_ENCR
		   SET RRNO_ENC =  DBSEC.spin_crypto.spinenc('P001', RRNO_NUMBER)
		 WHERE RRNO_ENC IS NULL
		   AND ROWNUM <= 20000
		;	
		
		V_CNT := SQL%ROWCOUNT; 

        INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG) 
		VALUES 
		('RRNO_ENCR', 'MAPKEY_RRNO_ENCR', 'RRNO_ENC_'||V_INDEX, 0, V_CNT, V_PROC_START_DATE, V_START_DATE, SYSDATE, 'SUCCESS', NULL, NULL) ; 

		COMMIT; 
		V_INDEX := V_INDEX + 1; 
		
		EXIT WHEN V_CNT = 0; 
	
	END LOOP;  
	
-------------------------------------------------------------------

    PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, SYSDATE, 'END', V_CNT, NULL, NULL );
	
    COMMIT;

	
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, SYSDATE, 'END', V_CNT, SQLCODE, SQLERRM );
	COMMIT;

    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

END;
---------------------------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_AGMT_PYMT_STATUS_010 (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   
BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
   
   /* ------------------ 이행로직 -------------------- */

MIG_PRC_TRUNCATE('MAPKEY_TBL_AGMT_PYMT_STATUS');

INSERT /*+ APPEND  PARALLEL(T 4)*/ INTO MAPKEY_TBL_AGMT_PYMT_STATUS T
SELECT /*+ FULL(A) PARALLEL(A 4) */
       A.POLY_NO
     , A.JOIN_GOOD_NO
     , A.AGREEMENT_ID
     , A.AGREEMENT_NUMBER
     , A.AGREEMENT_ANCHOR_ID
     , A.JNGD_HSNO
     , A.AGMT_PYMT_STATE_CODE
     , A.AGMT_PYMT_STATE_REASON_CODE
     , A.ASIS_TAB
     , A.ASIS_PK_COL1
     , A.ASIS_PK_COL2
     , A.ASIS_PK_COL3
     , A.ASIS_PK_COL4
     , A.PGM_ID
     , A.LAST_CHMN_MPNO
     , A.LAST_CHNG_DTTM
     , A.STRT_ON
     , A.END_ON
     , A.END_AT
     , A.AGMT_PYMT_STATUS_ID
     , A.FLAG
     , A.VALD_DVSN_CODE
--     , MAX(TO_TIMESTAMP(A.STRT_DT)) OVER(PARTITION BY AGREEMENT_NUMBER)                             AS CREATED_AT
--      , MAX(A.END_AT) OVER(PARTITION BY AGREEMENT_NUMBER)                                            AS REPLACED_AT
  FROM (SELECT A.POLY_NO
             , A.JOIN_GOOD_NO 
             , A.AGREEMENT_ID
             , A.AGREEMENT_NUMBER
             , A.AGREEMENT_ANCHOR_ID
             , A.JNGD_HSNO
             , A.AGMT_PYMT_STATE_CODE
             , A.AGMT_PYMT_STATE_REASON_CODE
             , A.ASIS_TAB
             , NVL(A.ASIS_PK_COL1,'999')                                                            AS ASIS_PK_COL1
             , NVL(A.ASIS_PK_COL2,'999')                                                            AS ASIS_PK_COL2
             , NVL(A.ASIS_PK_COL3,'999')                                                            AS ASIS_PK_COL3
             , NVL(A.ASIS_PK_COL4,'999')                                                            AS ASIS_PK_COL4
             , A.PGM_ID
             , A.LAST_CHMN_MPNO
             , A.LAST_CHNG_DTTM
             , A.STRT_DATE                                                                          AS STRT_ON 
             , A.END_DATE                                                                           AS END_ON
             , A.STRT_DT
             , A.END_DT
             , CASE WHEN A.END_DT = '99991231' 
                    THEN TO_TIMESTAMP('99991231235959.999')
                    ELSE TO_TIMESTAMP(A.END_DT) END                                                 AS END_AT
             , A.FLAG 
             , F.AGMT_PYMT_STATUS_ID  
             , A.VALD_DVSN_CODE
        FROM (/* POLICY LEVEL */
              SELECT /*+ */
                     A.POLY_NO
                    , NULL                                                                          AS JOIN_GOOD_NO 
                    , A.AGREEMENT_ID
                    , A.AGREEMENT_NUMBER
                    , A.AGREEMENT_ANCHOR_ID
                    , A.STRT_DATE
                    , A.END_DATE
                    , A.JNGD_HSNO
                    , A.AGMT_PYMT_STATE_CODE
                    , A.AGMT_PYMT_STATE_REASON_CODE
                    , A.ASIS_TAB
                    , A.ASIS_PK_COL1
                    , A.ASIS_PK_COL2
                    , A.ASIS_PK_COL3
                    , A.ASIS_PK_COL4
                    , A.PGM_ID
                    , A.LAST_CHMN_MPNO
                    , A.LAST_CHNG_DTTM
                    , A.VALD_DVSN_CODE
                    , TO_CHAR(A.STRT_DATE,'YYYYMMDD')                                               AS STRT_DT
                    , TO_CHAR(A.END_DATE,'YYYYMMDD')                                                AS END_DT
                    , 'P'                                                                           AS FLAG 
                    , A.SEQ
               FROM MAPKEY_TBL_AGMT_PYMT_STATUS_700 A 
              WHERE 1=1
              UNION ALL 
              /* COVERAGE LEVEL */
              SELECT /*+ */
                     A.POLY_NO
                    , A.JOIN_GOOD_NO
                    , A.AGREEMENT_ID
                    , A.AGREEMENT_NUMBER
                    , A.AGREEMENT_ANCHOR_ID
                    , A.STRT_DATE
                    , A.END_DATE
                    , A.JNGD_HSNO
                    , A.AGMT_PYMT_STATE_CODE
                    , A.AGMT_PYMT_STATE_REASON_CODE
                    , A.ASIS_TAB
                    , A.ASIS_PK_COL1
                    , A.ASIS_PK_COL2
                    , A.ASIS_PK_COL3
                    , A.ASIS_PK_COL4
                    , A.PGM_ID
                    , A.LAST_CHMN_MPNO
                    , A.LAST_CHNG_DTTM
                    , A.VALD_DVSN_CODE
                    , TO_CHAR(A.STRT_DATE,'YYYYMMDD')                                               AS STRT_DT
                    , TO_CHAR(A.END_DATE,'YYYYMMDD')                                                AS END_DT
                    , 'C'                                                                           AS FLAG 
                    , A.SEQ
                 FROM MAPKEY_TBL_AGMT_PYMT_STATUS_600 A 
                WHERE 1=1) A
        JOIN MAPKEY_TBL_AGMT_PYMT_STATUS_FIX F 
          ON A.POLY_NO          = F.POLY_NO 
         AND A.VALD_DVSN_CODE   = F.VALD_DVSN_CODE
         AND A.ASIS_TAB         = F.ASIS_TAB
         AND A.ASIS_PK_COL1     = F.ASIS_PK_COL1
         AND A.ASIS_PK_COL2     = F.ASIS_PK_COL2
         AND A.ASIS_PK_COL3     = F.ASIS_PK_COL3
         AND A.ASIS_PK_COL4     = F.ASIS_PK_COL4
         AND A.AGREEMENT_NUMBER = F.AGREEMENT_NUMBER
         AND A.STRT_DATE        = F.STRT_DATE
         AND A.END_DATE         = F.END_DATE
         AND A.SEQ              = F.SEQ
       WHERE 1=1) A 
 WHERE 1=1
;

   /* --------------- 작업로그( END ) --------------- */
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   
EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   /* --------------- 오류로그( END ) --------------- */
   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
   
END MIG_PRC_MAPKEY_TBL_AGMT_PYMT_STATUS_010;
------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_AGMT_PYMT_STATUS_700_010 (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   
BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
   
   /* ------------------ ERR LOG ----------------------
    -- DROP TABLE ERR$_MAPKEY_TBL_AGMT_PYMT_STATUS_700 PURGE;
    -- CALL DBMS_ERRLOG.CREATE_ERROR_LOG('MAPKEY_TBL_AGMT_PYMT_STATUS_700', 'ERR$_MAPKEY_TBL_AGMT_PYMT_STATUS_700');
    -- LOG ERRORS INTO ERR$_MAPKEY_TBL_AGMT_PYMT_STATUS_700 REJECT LIMIT UNLIMITED
   ------------------------------------------------ */
   /* ------------------ 초기적재 -------------------- */

   /* ------------------ 이행로직 -------------------- */

/*    7. Coverage 기준으로 Policy 생성
*/
MIG_PRC_TRUNCATE('MAPKEY_TBL_AGMT_PYMT_STATUS_700');

INSERT /*+ APPEND  PARALLEL(T 4)*/ INTO MAPKEY_TBL_AGMT_PYMT_STATUS_700 T
SELECT /*+ PARALLEL(A 4) */
       A.*
     , NVL(LEAD(A.STRT_DATE) OVER(PARTITION BY A.POLY_NO 
                                      ORDER BY A.STRT_DATE, A.JNGD_HSNO),TO_DATE('99991231','YYYYMMDD')) AS END_DATE
  FROM (SELECT /*+ PARALLEL(A 4) PARALLEL(B 4) LEADING(A) */
               A.POLY_NO
             , A.JOIN_GOOD_NO
             , B.AGREEMENT_ID
             , B.AGREEMENT_NUMBER
             , B.AGREEMENT_ANCHOR_ID
             , A.STRT_DATE                                                                          AS STRT_DATE
             , RANK() OVER(PARTITION BY A.POLY_NO, A.STRT_DATE 
                               ORDER BY A.PRIORITY, A.ASIS_PK_COL2, A.JNGD_HSNO, B.AGREEMENT_ID )   AS RNO
             , A.JNGD_HSNO
             , A.AGMT_PYMT_STATE_CODE
             , A.AGMT_PYMT_STATE_REASON_CODE
             , A.ASIS_TAB
             , A.ASIS_PK_COL1
             , A.ASIS_PK_COL2
             , A.ASIS_PK_COL3
             , A.ASIS_PK_COL4
             , A.PGM_ID
             , A.LAST_CHMN_MPNO
             , A.LAST_CHNG_DTTM
             , A.VALD_DVSN_CODE
             , A.SEQ
          FROM MAPKEY_TBL_AGMT_PYMT_STATUS_600 A
          JOIN MAPKEY_TBL_AGREEMENT B 
            ON A.POLY_NO    = B.ASIS_PK_COL1
           AND A.STRT_DATE >= B.STRT_DATE_DT 
           AND A.STRT_DATE <  B.END_DATE_DT
           AND B.FLAG       = 'P' 
         WHERE 1=1 ) A
 WHERE 1=1
   AND A.RNO = 1
;

   /* --------------- 작업로그( END ) --------------- */
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   
EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   /* --------------- 오류로그( END ) --------------- */
   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
   
END MIG_PRC_MAPKEY_TBL_AGMT_PYMT_STATUS_700_010;
-----------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_AGMT_PYMT_STATUS_FIX_010 (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   
BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));

   /* ------------------ 초기적재 -------------------- */
    IF I_PARAM3 = 'INIT' THEN
    /* 0. MAPKEY 테이블 초기화(개발단계에서는 KEY를 초기화후 재생성 해야함) */
    MIG_PRC_TRUNCATE('MAPKEY_TBL_AGMT_PYMT_STATUS_FIX');
    END IF;    
	
   /* ------------------ 이행로직 -------------------- */

/* 키고정테이블 생성 
   - 키고정테이블은 이력에 따른 ID를 별도 채번하지 않고, 동일한ID를 부여함--> 최종으로는 ID UNIQUE하게 TBL_PARTY_ROLE생성
     A.AGREEMENT_NUMBER,A.INSU_NO,A.CUST_ROLE_CODE,A.CUST_ROLE_HSNO // STRT_DATE 제외했을 때 >>> DISTINCT CUST_ID = 1 
*/
-- EXECUTE MIG_PRC_TRUNCATE('MAPKEY_TBL_AGMT_PYMT_STATUS_FIX');

INSERT /*+ APPEND PARALLEL(T 4)*/ INTO MAPKEY_TBL_AGMT_PYMT_STATUS_FIX T
WITH MAX_ID AS ( SELECT /*+ PARALLEL(F 4) */ 
                        NVL(MAX(AGMT_PYMT_STATUS_ID),100000000000)                                  AS MAX_ID 
                   FROM MAPKEY_TBL_AGMT_PYMT_STATUS_FIX F ) 
SELECT /*+ PARALLEL(A 4) */
       A.ASIS_TAB
     , A.ASIS_PK_COL1
     , A.ASIS_PK_COL2
     , A.ASIS_PK_COL3
     , A.ASIS_PK_COL4
     , A.AGREEMENT_NUMBER
     , A.STRT_DATE
     , A.END_DATE
     , A.SEQ
     , A.POLY_NO
     , A.VALD_DVSN_CODE
     , M.MAX_ID + RANK() OVER(ORDER BY A.ASIS_TAB, A.ASIS_PK_COL1, A.ASIS_PK_COL2, A.ASIS_PK_COL3, A.ASIS_PK_COL4, A.AGREEMENT_NUMBER, A.STRT_DATE, A.END_DATE, A.SEQ) AS AGMT_PYMT_STATUS_ID
  FROM (/* POLICY LEVEL */
        SELECT /*+ */
               A.ASIS_TAB
             , A.ASIS_PK_COL1
             , A.ASIS_PK_COL2
             , A.ASIS_PK_COL3
             , A.ASIS_PK_COL4
             , A.AGREEMENT_NUMBER
             , A.STRT_DATE
             , A.END_DATE
             , A.SEQ
             , A.POLY_NO
             , A.VALD_DVSN_CODE
          FROM MAPKEY_TBL_AGMT_PYMT_STATUS_700 A 
        UNION ALL 
        /* COVERAGE LEVEL */
        SELECT /*+ */
               A.ASIS_TAB
             , A.ASIS_PK_COL1
             , A.ASIS_PK_COL2
             , A.ASIS_PK_COL3
             , A.ASIS_PK_COL4
             , A.AGREEMENT_NUMBER
             , A.STRT_DATE
             , A.END_DATE
             , A.SEQ
             , A.POLY_NO
             , A.VALD_DVSN_CODE
          FROM MAPKEY_TBL_AGMT_PYMT_STATUS_600 A ) A
  LEFT OUTER JOIN MAPKEY_TBL_AGMT_PYMT_STATUS_FIX B 
    ON A.POLY_NO          = B.POLY_NO 
   AND A.VALD_DVSN_CODE   = B.VALD_DVSN_CODE
   AND A.ASIS_TAB         = B.ASIS_TAB
   AND A.ASIS_PK_COL1     = B.ASIS_PK_COL1
   AND A.ASIS_PK_COL2     = B.ASIS_PK_COL2
   AND A.ASIS_PK_COL3     = B.ASIS_PK_COL3
   AND A.ASIS_PK_COL4     = B.ASIS_PK_COL4
   AND A.AGREEMENT_NUMBER = B.AGREEMENT_NUMBER
   AND A.STRT_DATE        = B.STRT_DATE
   AND A.END_DATE         = B.END_DATE
   AND A.SEQ              = B.SEQ
  JOIN MAX_ID M 
    ON 1=1 
 WHERE 1=1 
   AND B.AGMT_PYMT_STATUS_ID IS NULL
;

   /* --------------- 작업로그( END ) --------------- */
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   
EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   /* --------------- 오류로그( END ) --------------- */
   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
   
END MIG_PRC_MAPKEY_TBL_AGMT_PYMT_STATUS_FIX_010;
--------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_AGREEMENT_HQI_032_010 (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   
BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   
   V_TABLE_NAME := 'MAPKEY_TBL_AGREEMENT_HQI_032'; --SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
   
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
   
   /* ------------------ 이행로직 -------------------- */

MIG_PRC_TRUNCATE(V_TABLE_NAME);




INSERT /*+ APPEND PARALLEL(4) */  INTO MAPKEY_TBL_AGREEMENT_HQI_032  -- COVERAGE 청약서발행 이벤트 원천 집합  4813043
	(
	   ASIS_TAB
	 , ASIS_PK_COL1
	 , ASIS_PK_COL2
	 , ASIS_PK_COL3
	 , ASIS_PK_COL4
	 , HIST_NO_MIG
	 , AGREEMENT_ID
	 , ORIGIN_AGREEMENT_ID
	 , LAST_CHMN_MPNO
	 , LAST_CHNG_DTTM
	 , TABL_SEPR_DVSN
	 , LOAD_AT
	 , STRT_DATE_ORI
	 , END_DATE_ORI
	 , STRT_DATE
	 , END_DATE
	 , STRT_DATE_CHR
	 , END_DATE_CHR
	 , STRT_DATE_DT
	 , END_DATE_DT
	 , STRT_DATE_AT
	 , END_DATE_AT
	 , END_DATE_AT_S1
	 , IRKD_CODE_DTAL
	 , IRKD_CODE_ITEM
	 , GOOD_CODE_DTAL
	 , GOOD_CODE_ITEM
	 , GOOD_RELN_CODE
	 , CNTT_STAT_CODE
	 , CNTT_STAT_DTCD
	 , BEFO_CTS_CODE
	 , BEFO_CTS_DTCD
	 , SUM_PREM
	 , SUM_ORIG_PREM
	 , CLLT_ORGN_CODE
	 , CLLT_LP_PRNO
	 , UPDT_DVSN_CODE
	 , FRST_CNTT_DATE
	 , CNTT_DATE
	 , CNTT_ANPY_STDT
	 , CNTT_END_DATE
	 , CNTT_EXTN_DATE
	 , CNTT_LAPS_DATE
	 , SALE_CHNL_CODE
	 , JNGD_UPDT_EYCT
	 , CRDD_AFTR_CNYN
	 , CNCL_OBJT_STDT
	 , OLD_JNGD_HSNO
	 , JNGD_DLNG_DVCD
	 , BEFO_JNGD_NO
	 , FRST_CRTY_ADPR
	 , SCND_ANPY_STDT
	 , DCSN_GUPY_TERM
	 , DCSN_GUPY_TMDV
	 , ANNT_TYPE_CODE
	 , INQR_LMIT_RQYN
	 , KIND_NM
	 , TLAID
	 , FLAG
	 , SEQ_FLAG
	 , DEL_YN
	 , PK_DATA
	 , PK_DATA_MIG
	 , ID
	 , CREATE_AT
	 , CREATOR_ID
	 , CREATOR_IP
	 , MODIFIER_ID
	 , MODIFIER_IP
	 , UPDATE_AT
	 , LOCK_NO
	 , SPEC_UUID
	 , AGREEMENT_NUMBER
	 , POLICY_NUMBER
	 , AGMT_STATE_CODE
	 , AGMT_STATE_DTL_CODE
	 , AGMT_STATE_DTL_REASON_CODE
	 , BEFO_AGMT_STATE_CODE
	 , BEFO_AGMT_STATE_DTL_CODE
	 , BEFO_AGMT_STATE_DTL_REASON_CODE
	 , START_AT
	 , END_AT
	 , EXTERNAL_REFERENCE
	 , INDEX_IN_ACTUAL
	 , ORIGINAL_START_AT
	 , PRODUCT_ADD_TYPE_CODE
	 , PRODUCT_CODE
	 , PRODUCT_DETAIL_CODE
	 , PRODUCT_TYPE_CODE
	 , PRODUCT_TYPE_DETAIL_CODE
	 , PSM_CODE
	 , AGREEMENT_ANCHOR_ID
	 , TOP_LEVEL_AGREEMENT_ID
	 , TARGET_AGREEMENT_ID
	 , ORIGIN_PARENT_AGREEMENT_ID
	 , KIND_ID
	 , MAJOR_VERSION
	 , MINOR_VERSION
	 , BEFO_MAJOR_VERSION
	 , BEFO_MINOR_VERSION
	 , REQ_KIND_ID
	 , REQ_KIND_NAME
	 , REQ_KIND_DISP_NAME
	 , REQ_KIND_UUID
	 , VALD_DVSN_CODE
	 , MIN_HIST_NO
	 , MAX_HIST_NO
	 , DEN_RANK_SEQ
	 , CNT_SEQ
	 , MIN_AID
	 , MAX_AID
	 , CREATE_PRGM_ID
	 , LAST_MODIFIED_PRGM_ID
	 , PLAN_NO                    --추가 속성
	 , ANUM_CODE                  --추가 속성
	 , DRCT_INPT_YN               --추가 속성
	 , FRPL_CODE
	)
	SELECT  --/*+ LEADING(X H) PARALLEL(X 4) PARALLEL(H 4) USE_HASH(H) */
	   'TB_ISAPLCJG'		 					               AS ASIS_TAB
	 , H.POLY_NO                                               AS ASIS_PK_COL1
	 , H.JOIN_GOOD_NO                                          AS ASIS_PK_COL2
	 , H.JNGD_HSNO                                             AS ASIS_PK_COL3
	 , '999'                                                   AS ASIS_PK_COL4
	 , '999'                                                   AS HIST_NO_MIG
	 ,  0                                                      AS AGREEMENT_ID          -- 11, 21, 31 집합 합친후 채번
	 ,  0                                                      AS ORIGIN_AGREEMENT_ID  --'증권번호 기준으로 최초 agreement_id'
	 ,  H.LAST_CHMN_MPNO                                       AS LAST_CHMN_MPNO
	 ,  H.LAST_CHNG_DTTM                                       AS LAST_CHNG_DTTM
	 ,  H.TABL_SEPR_DVSN	                                   AS TABL_SEPR_DVSN --테이블분할구분
	 ,  SYSDATE                                                AS LOAD_AT        --MIG적재일자
	 ,  X.STRT_DATE_ORI   	                                   AS STRT_DATE_ORI  --시작일자 원본
	 ,  NULL                                                   AS END_DATE_ORI   --종료일자 원본
	 ,  X.STRT_DATE                                            AS STRT_DATE
	 ,  NULL                                                   AS END_DATE
	 ,  X.STRT_DATE                                            AS STRT_DATE_CHR
	 ,  NULL                                                   AS END_DATE_CHR
	 ,  X.STRT_DATE_DT                                         AS STRT_DATE_DT
	 ,  NULL                                                   AS END_DATE_DT
	 ,  NULL                                                   AS STRT_DATE_AT
	 ,  NULL                                                   AS END_DATE_AT
	 ,  NULL                                                   AS END_DATE_AT_S1
	 ,  X.IRKD_CODE_DTAL                                       AS IRKD_CODE_DTAL --보험종류코드_세
	 ,  X.IRKD_CODE_ITEM                                       AS IRKD_CODE_ITEM --보험종류코드_목
	 ,  H.GOOD_CODE_DTAL                                       AS GOOD_CODE_DTAL
	 ,  H.GOOD_CODE_ITEM                                       AS GOOD_CODE_ITEM
	 ,  H.GOOD_RELN_CODE                                       AS GOOD_RELN_CODE
	 ,  H.CNTT_STAT_CODE                                       AS CNTT_STAT_CODE
	 ,  H.CNTT_STAT_DTCD                                       AS CNTT_STAT_DTCD
	 ,  H.BEFO_CTS_CODE                                        AS BEFO_CTS_CODE
	 ,  H.BEFO_CTS_DTCD                                        AS BEFO_CTS_DTCD
	 ,  H.PREM                                                 AS SUM_PREM       --합계보험료  1P : 합계보험료 / 2C : 보험료 / 3B : 2C의 보험료
	 ,  H.ORIG_PREM                                            AS SUM_ORIG_PREM  --합계원보험료 1P : 합계원보험료 / 2C : 원보험료 / 3B : 2C의 원보험료
	 , NULL                                                    AS CLLT_ORGN_CODE --모집기관코드
	 , NULL                                                    AS CLLT_LP_PRNO   --모잡설계사고유번호
	 , NULL                                                    AS UPDT_DVSN_CODE
	 , H.FRST_CNTT_DATE                                        AS FRST_CNTT_DATE
	 , H.CNTT_DATE                                             AS CNTT_DATE      --  P : CNTT_DATE(계약일자), C : CNTT_DATE(계약일자), B : NULL 
	 , H.ANNT_PAYM_STDT                                        AS CNTT_ANPY_STDT --  P : ANTT_ANPY_STDT(연금개시일자), C : ANNT_PAYM_STDT(연금지급개시일자), B : NULL
	 , H.EXPR_DATE                                             AS CNTT_END_DATE  --  P : CNTT_END_DATE(계약만기일자), C : EXPR_DATE(만기일자), B : NULL 
	 , H.EXTN_DATE                                             AS CNTT_EXTN_DATE --  P : CNTT_EXTN_DATE(계약소멸일자), C : EXTN_DATE(소멸일자), B : NULL 
	 , H.LAPS_DATE                                             AS CNTT_LAPS_DATE --  P : CNTT_LAPS_DATE(계약실효일자), C : LAPS_DATE(실효일자), B : NULL
	 , X.SALE_CHNL_CODE                                        AS SALE_CHNL_CODE	 
	 , H.JNGD_UPDT_EYCT                                        AS JNGD_UPDT_EYCT  /* P : NULL, C : 가입상품갱신경과년수, B : NULL */
	 , 'N'                                                     AS CRDD_AFTR_CNYN   -- P : NULL, C : 당일이후취소여부, B : NULL 당일이후취소여부(STRT_DATE > END_DATE인 이력)
	 , H.CNCL_OBJT_STDT                                        AS CNCL_OBJT_STDT  /* P : NULL, C : 최소대상시작일자, B : NULL */
	 , H.OLD_JNGD_HSNO                                         AS OLD_JNGD_HSNO   /* P : NULL, C : 구가입상품이력번호, B : NULL */
	 , H.JNGD_DLNG_DVCD                                        AS JNGD_DLNG_DVCD  /* P : NULL, C : 가입상품별처리구분코드, B : NULL */
	 , H.BEFO_JNGD_NO                                          AS BEFO_JNGD_NO    /* P : NULL, C : 직전가입상품번호, B : NULL */		 
	 , NULL                                                    AS FRST_CRTY_ADPR  --1P : NULL / 2C : NULL / 3B : 초기집중형추가지급율
	 , NULL                                                    AS SCND_ANPY_STDT  --1P : NULL / 2C : NULL / 3B : 제2연금지급시작일자
	 , NULL                                                    AS DCSN_GUPY_TERM  --1P : NULL / 2C : NULL / 3B : 확정보증지급기간
	 , NULL                                                    AS DCSN_GUPY_TMDV  --1P : NULL / 2C : NULL / 3B : 확정보증지급기간구분
	 , NULL                                                    AS ANNT_TYPE_CODE  --1P : NULL / 2C : NULL / 3B : 연금지급형태코드
	 , NULL                                                    AS INQR_LMIT_RQYN  --POLICY만 존재함(APPLICATION_PROPERTY에서 사용) 조회제한신청여부  --가입설계 필요여부 확인필요	 
	 , NULL                                                    AS KIND_NM         -- 'Kind명(Unit Product)'
	 , NULL                                                    AS TLAID           --'TLAID : BENEFIT면 COVERAGE의 AID를 P/C는 자신의 AID를 적용'
	 , 'C'                                                     AS FLAG            -- 'P-POLICY,C-COVERAGE,B-BENEFIT'
	 , '2C'                                                    AS SEQ_FLAG        --'P/C/B의 정렬을 위한 1P/2C/3B';
	 , 'N'                                                     AS DEL_YN          --'1P : 삭제여부 / 2C : 삭제여부 / 3B : 삭제여부'
	 , H.POLY_NO||'^'||H.JOIN_GOOD_NO ||'^'|| H.JNGD_HSNO ||'^003'     AS PK_DATA      --'ASIS_TAB의 PK DATA'
	 , H.POLY_NO||'^'||H.JOIN_GOOD_NO ||'^'|| H.JNGD_HSNO ||'^003'     AS PK_DATA_MIG --'복제이력을 적용한 PK DATA_MIG :: HIST_NO_MIG 적용'
	 , NULL                                                    AS ID  --'AGREEMENT ID'
	 , SYSDATE                                                 AS CREATE_AT -- '등록일자 : 현재 MIG생성일자'
	 , 'MIG_032'                                               AS CREATOR_ID 
	 , H.POLY_NO||'^'||H.JOIN_GOOD_NO ||'^'|| H.JNGD_HSNO ||'^003'
	                                                           AS CREATOR_IP -- '등록자IP'
	 , H.LAST_CHMN_MPNO                                        AS MODIFIER_ID
	 , NULL                                                    AS MODIFIER_IP
	 , H.LAST_CHNG_DTTM                                        AS UPDATE_AT
	 , 0                                                       AS LOCK_NO  -- '잠금번호:MIG는 0으로 처리';
	 , NULL                                                    AS SPEC_UUID -- 'Agreement Spec에 대한 식별자 : ''Unit Product''에 대한 uuid 산출'	                            
	 , CASE WHEN X.ANUM_CODE = 'J' THEN 'C' ||SUBSTR(X.AGREEMENT_NUMBER,2) ||LPAD(H.JOIN_GOOD_NO,3,'0')                           -- 증권번호 2020.12.03 수정
			WHEN X.ANUM_CODE = 'P' THEN 'C' ||SUBSTR(X.AGREEMENT_NUMBER,2) ||LPAD(H.GOOD_CODE_DTAL,4,'0')||LPAD(H.GOOD_CODE_ITEM,3,'0')  -- 설계번호 2020.12.03 수정
	   END	                                                   AS AGREEMENT_NUMBER 
	 , X.POLICY_NUMBER                                         AS POLICY_NUMBER
	 , '101'                                                   AS AGMT_STATE_CODE            -- 101 가입설계
	 , '003'                                                   AS AGMT_STATE_DTL_CODE        -- 003 청약서발행
	 , '000'                                                   AS AGMT_STATE_DTL_REASON_CODE -- 000 없음
	 , NULL                                                    AS BEFO_AGMT_STATE_CODE
	 , NULL                                                    AS BEFO_AGMT_STATE_DTL_CODE
	 , NULL                                                    AS BEFO_AGMT_STATE_DTL_REASON_CODE
	 , NULL                                                    AS START_AT -- '시작일시'
	 , NULL                                                    AS END_AT   -- 종료일시
	 , NULL                                                    AS EXTERNAL_REFERENCE
	 , NULL                                                    AS INDEX_IN_ACTUAL
	 , NULL                                                    AS ORIGINAL_START_AT  -- 최초시작일자
	 
	 , NULL                                                    AS PRODUCT_ADD_TYPE_CODE -- '상품부가구분코드(COVERAGE의 경우 GOOD_RELN_CODE-2,3:의무부가(01), 4,5:선택부가(02))'
	 , H.GOOD_CODE_DTAL                                        AS PRODUCT_CODE
	 , H.GOOD_CODE_ITEM                                        AS PRODUCT_DETAIL_CODE --상품상세코드
	 ,  '2'                                                    AS PRODUCT_TYPE_CODE   -- 상품유형코드 P:1 C:2 B:3
	 , NULL                                                    AS PRODUCT_TYPE_DETAIL_CODE -- '상품유형상세코드(COVERAGE의 경우 GOOD_RELN_CODE-1:주계약(1), 2,3,4,5:특약(2)'
	 , NULL                                                    AS PSM_CODE -- '1P : 보종 PSM_CODE / 2C : 상품 PSM_CODE / 3B : 2C의 상품 PSM_CODE'	 
	 ,  0                                                      AS AGREEMENT_ANCHOR_ID
	 ,  0                                                      AS TOP_LEVEL_AGREEMENT_ID
	 , NULL                                                    AS TARGET_AGREEMENT_ID
	 , NULL                                                    AS ORIGIN_PARENT_AGREEMENT_ID
	 , NULL                                                    AS KIND_ID  -- PSM_CODE를 통하여 구함
	 , 0                                                       AS MAJOR_VERSION          -- 확인필요
	 , 1                                                       AS MINOR_VERSION          -- 확인필요
	 , NULL                                                    AS BEFO_MAJOR_VERSION
	 , NULL                                                    AS BEFO_MINOR_VERSION
	 , '136'                                                   AS REQ_KIND_ID
	 , 'ISSUE_APPLICATION_FORM'                                AS REQ_KIND_NAME
	 , '청약서발행'                                               AS REQ_KIND_DISP_NAME
	 , NULL                                                    AS REQ_KIND_UUID
	 , H.VALD_DVSN_CODE                                        AS VALD_DVSN_CODE -- PSM대상여부(1:대상,2:비대상) 확인필요
	 , NULL                                                    AS MIN_HIST_NO    --MIN 이력번호(복제원본기준)
	 , NULL                                                    AS MAX_HIST_NO    -- MAX 이력번호(복제원본기준
	 , NULL                                                    AS DEN_RANK_SEQ   --복제된 이력의 순번-200722-POLICY만적용(dense_rank() over (partition by pk_data order by pk_date, strt_date))
	 , NULL                                                    AS CNT_SEQ        -- 복제된 이력은 건수-200722-POLICY만적용(count(*) over (partition by pk_data))
	 , NULL                                                    AS MIN_AID        -- 복제된 후 AGREEMENT_NUMBER의 MIN AGREEMENT_ID(min(ID) over (partition by agreement_number))
	 , NULL                                                    AS MAX_AID        -- 복제된 후 AGREEMENT_NUMBER의 MAX AGREEMENT_ID(max(id) over (partition by agreement_number))
	 , NULL                                                    AS CREATE_PRGM_ID
	 , NULL                                                    AS LAST_MODIFIED_PRGM_ID
	 , X.PLAN_NO                                               AS PLAN_NO
	 , X.ANUM_CODE	 	                                       AS ANUM_CODE
	 , X.DRCT_INPT_YN                                          AS DRCT_INPT_YN
	 ,
       CASE WHEN X.FRPL_CODE = '1' AND X.IRKD_CODE_DTAL = H.GOOD_CODE_DTAL THEN   '1'
	        WHEN X.FRPL_CODE = '1' AND X.IRKD_CODE_DTAL <> H.GOOD_CODE_DTAL THEN  '0'
			WHEN X.FRPL_CODE = '2' THEN '2' 
			ELSE   '0'
	   END	 
	                                                           AS FRPL_CODE
	--	  FROM TB_NCAPLCI1 P	  --청약서발행			
	--	  JOIN TB_ISAPLCTT C	  --계약			
	--		ON P.SRDO_PUBL_DATE >= TO_CHAR(ADD_MONTHS(TO_DATE( '20201008', 'YYYYMMDD'), -3), 'YYYYMMDD')  			
	--	   AND P.VALD_DVSN_CODE = '1' AND C.VALD_DVSN_CODE = '1'				
	--	   AND P.POLY_NO = C.POLY_NO
	--		   JOIN									
	  FROM MAPKEY_TBL_AGREEMENT_HQI_031  X
		 , 				   
		    SELECT /*+ LEADING(X Z) PARALLEL(X 4) PARALLEL(Z 4) USE_HASH(Z) PQ_DISTIRIBUTE(Z PARTITION NONE) */
		           Z.*				   
				 , MIN(Z.JNGD_HSNO) OVER (PARTITION BY Z.POLY_NO, Z.JOIN_GOOD_NO) MIN_HIST_NO				
				 , MIN(Z.STRT_DATE) OVER (PARTITION BY Z.POLY_NO) MIN_STRT_DATE	
			  FROM TB_ISAPLCJG	Z    --가입상품			
			     , MAPKEY_TBL_AGREEMENT_HQI_031  X
			 WHERE 1=1 -- VALD_DVSN_CODE = '1'				
			 AND   Z.DEL_YN = 'N'    -- ADDED		 
			 AND X.POLICY_NUMBER  = Z.POLY_NO	
		     AND X.VALD_DVSN_CODE = Z.VALD_DVSN_CODE
		     AND X.CNTT_STAT_CODE IN ('6', '7' ) ----계약 레벨 데이터에서 최초 상태가 6(청약서발행), 7(청약서접수)인 건만 대상으로 함. 가입상품레벨에서는 체크하지 않음	   	 
		   ) H	
	  WHERE   
--	            X.POLICY_NUMBER  = H.POLY_NO				
--	       AND X.VALD_DVSN_CODE = H.VALD_DVSN_CODE
		   AND H.JNGD_HSNO = H.MIN_HIST_NO					 
		   AND H.STRT_DATE = H.MIN_STRT_DATE	
--		   AND X.CNTT_STAT_CODE IN ('6', '7' )	

	;

   /* --------------- 작업로그( END ) --------------- */
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   
EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   /* --------------- 오류로그( END ) --------------- */
   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
   
END ;
----------------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_100_010(
    I_WORKFLOW_RUN_ID	NUMBER		DEFAULT NULL, 	-- INFA 워크플로우실행ID
	I_SESSION_NAME		VARCHAR2	DEFAULT NULL,  	-- INFA 세션명
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- PARAMETER3
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8
)
AUTHID CURRENT_USER IS
	V_OWNER				VARCHAR2(100)  := NULL;
	V_TABLE_NAME		VARCHAR2(100)  := NULL;
	V_ROW_CNT			NUMBER         := 0;
	V_SQLERRM           VARCHAR2(1000) := NULL;
	
BEGIN
	/* --------------- 작업로그(START) --------------- */
	EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
	EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
	V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
	SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
	
	/* ------------------ 이행로직 ----------------------
	로직 설명
	
	[작업테이블]
	MAPKEY_TBL_APPLICATION_PROPERTY_100
	MAPKEY_TBL_APPLICATION_PROPERTY_900
	MAPKEY_TBL_APPLICATION_PROPERTY_FIX
	
	------------------------------------------------ */
	
	IF I_PARAM3 = 'INIT' THEN
		/* 0. MAPKEY 테이블 초기화(개발단계에서는 KEY를 초기화후 재생성 해야함) */
		MIG_PRC_TRUNCATE('MAPKEY_TBL_APPLICATION_PROPERTY_FIX');
	END IF;
	
	/* 2. TBL_APPLICATION_PROPERTY MAPKEY 생성 */
	EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_APPLICATION_PROPERTY_100';
	
	INSERT /*+ APPEND PARALLEL(A 4) */ INTO MAPKEY_TBL_APPLICATION_PROPERTY_100 A
	WITH WT_UUID AS
	(
	SELECT  A.KIND     AS APPLICATION_KIND_NAME
		  , B.KIND     AS APPLICATION_PROPERTY_KIND_NAME
		  , B.PSM_CODE AS PSM_CODE
		  , B.UUID
		  , A.KIND_ID AS APPLICATION_KIND_ID
		  , B.KIND_ID AS APPLICATION_PROPERTY_KIND_ID
	FROM    MAPCODE_PSM A
		  , MAPCODE_PSM B
	WHERE   1=1
	AND     A.DOMAIN = 'Application Component'
	AND     A.UUID = B.PARENT_UUID
	)
	SELECT  /*+ PARALLEL(4) */
			CAST(ASIS_TAB                           AS VARCHAR2(40))  AS ASIS_TAB      
		  , CAST(ASIS_PK_COL1                       AS VARCHAR2(40))  AS ASIS_PK_COL1  
		  , CAST(ASIS_PK_COL2                       AS VARCHAR2(40))  AS ASIS_PK_COL2  
		  , CAST(ASIS_PK_COL3                       AS VARCHAR2(40))  AS ASIS_PK_COL3  
		  , CAST(ASIS_PK_COL4                       AS VARCHAR2(40))  AS ASIS_PK_COL4  
		  , CAST(ASIS_PK_COL_NM                     AS VARCHAR2(40))  AS ASIS_PK_COL_NM
		  , CAST(ASIS_DATA_COL                      AS VARCHAR2(40))  AS ASIS_DATA_COL 
		  , CAST(NULL                               AS NUMBER  (19))  AS ID
		  , CAST(SYSDATE                            AS TIMESTAMP   )  AS CREATE_AT
		  , CAST(CREATOR_ID                         AS VARCHAR2(100)) AS CREATOR_ID
		  , CAST(CREATOR_IP                         AS VARCHAR2(100)) AS CREATOR_IP
		  , CAST(LAST_MODIFIED_AT                   AS TIMESTAMP    ) AS LAST_MODIFIED_AT
		  , CAST(LAST_MODIFIER_ID                   AS VARCHAR2(100)) AS LAST_MODIFIER_ID
		  , CAST(NULL                               AS VARCHAR2(100)) AS LAST_MODIFIER_IP
		  , CAST(A.START_AT                         AS TIMESTAMP    ) AS BASE_TX_AT
		  , CAST(NULL                               AS VARCHAR2(255)) AS BASE_TX_NUMBER
		  , CAST(0                                  AS NUMBER  (  1)) AS IS_REPLACED
		  , CAST(A.START_AT                         AS TIMESTAMP    ) AS START_AT
		  , TO_TIMESTAMP(A.END_AT, 'YYYYMMDDHH24MISSFF3') AS END_AT
		  , CAST(NULL                               AS NUMBER(24,12)) AS AMOUNT
		  , CAST(NULL                               AS NUMBER  ( 10)) AS AMOUNT_SCALE
		  , CAST(NULL                               AS NUMBER(24,12)) AS BIGDECIMAL_VALUE
		  , CAST(BOOLEAN_VALUE                      AS NUMBER  (  1)) AS BOOLEAN_VALUE
		  , CAST(NULL                               AS NUMBER(24,12)) AS CURRENCY_AMOUNT
		  , CAST(NULL                               AS VARCHAR2( 10)) AS CURRENCY_AMOUNT_CURRENCY_CODE
		  , CAST(NULL                               AS NUMBER  ( 10)) AS CURRENCY_AMOUNT_SCALE
		  , CAST(NULL                               AS TIMESTAMP    ) AS DATETIME_VALUE
		  , CAST(NULL                               AS DATE         ) AS DATE_VALUE
		  , CAST(NULL                               AS VARCHAR2(255)) AS DESCRIPTION
		  , CAST(NULL                               AS FLOAT        ) AS DOUBLE_VALUE
		  , CAST(INTEGER_VALUE                      AS NUMBER  ( 10)) AS INTEGER_VALUE
		  , CAST(0                                  AS NUMBER  ( 38)) AS LOCK_NO
		  , CAST(NULL                               AS NUMBER  ( 19)) AS LONG_VALUE
		  , CAST(NULL                               AS NUMBER(24,12)) AS MEASURE_AMOUNT
		  , CAST(NULL                               AS VARCHAR2( 10)) AS MEASURE_AMOUNT_CODE
		  , CAST(NULL                               AS NUMBER  ( 10)) AS MEASURE_AMOUNT_SCALE
		  , CAST(PERCENTAGE_AMOUNT                  AS NUMBER(24,12)) AS PERCENTAGE_AMOUNT
		  , CAST(PERCENTAGE_AMOUNT_SCALE            AS NUMBER  ( 10)) AS PERCENTAGE_AMOUNT_SCALE
		  , CAST(STRING_VALUE                       AS VARCHAR2(255)) AS STRING_VALUE
		  , CAST(AP_ID                              AS NUMBER  ( 19)) AS AP_ID
		  , CAST(START_AT                           AS VARCHAR2(  8)) AS STRT_DATE
		  , CAST(END_AT                             AS VARCHAR2(  8)) AS END_DATE
		  , CAST(SPEC_UUID                          AS VARCHAR2(255)) AS SPEC_UUID
		  , CAST(APPLICATION_KIND_ID                AS VARCHAR2(255)) AS APPLICATION_KIND_ID
		  , CAST(APPLICATION_PROPERTY_KIND_ID       AS VARCHAR2(255)) AS APPLICATION_PROPERTY_KIND_ID
	FROM   (
			/* GrpNo=1 / TB_ISAPLCTT, TB_ISAPLCHS :: 계약 */
			SELECT  'TB_ISAPLCHS'       AS ASIS_TAB
				  , A.ASIS_PK_COL1      AS ASIS_PK_COL1
				  , A.ASIS_PK_COL2      AS ASIS_PK_COL2
				  , A.ASIS_PK_COL3      AS ASIS_PK_COL3
				  , A.ASIS_PK_COL4      AS ASIS_PK_COL4
				  , A.ASIS_PK_COL_NM    AS ASIS_PK_COL_NM
				  , 'INQR_LMIT_RQYN'    AS ASIS_DATA_COL
				  , 'MIG_001'            AS CREATOR_ID
				  , A.ASIS_PK_COL1 || '^' || A.ASIS_PK_COL2 || '^' || A.ASIS_PK_COL3 || '^' || A.ASIS_PK_COL4 AS CREATOR_IP
				  , B.LAST_CHNG_DTTM    AS LAST_MODIFIED_AT
				  , B.LAST_CHMN_MPNO    AS LAST_MODIFIER_ID
				  , A.STRT_DATE         AS START_AT
				  , CASE WHEN A.END_DATE = '99991231' THEN '99991231235959999'					
						 ELSE A.END_DATE 			
					END AS END_AT
				  , CASE WHEN INQR_LMIT_RQYN = 'Y' THEN 1 ELSE 0 END AS BOOLEAN_VALUE
				  , NULL                AS PERCENTAGE_AMOUNT
				  , NULL                AS PERCENTAGE_AMOUNT_SCALE
				  , NULL                AS INTEGER_VALUE
				  , NULL                AS STRING_VALUE
				  , ID                  AS AP_ID
				  , T_UUID.UUID         AS SPEC_UUID
				  , T_UUID.APPLICATION_KIND_ID          AS APPLICATION_KIND_ID
				  , T_UUID.APPLICATION_PROPERTY_KIND_ID AS APPLICATION_PROPERTY_KIND_ID
				  , A.PSM_CODE
			FROM    MAPKEY_TBL_APPLICATION A
				  , TB_ISAPLCHS B
				  , WT_UUID T_UUID
			WHERE   1=1
			AND     A.ASIS_TAB = 'TB_ISAPLCHS'
			AND     A.ASIS_PK_COL1 = B.POLY_NO
			AND     A.ASIS_PK_COL2 = B.HIST_NO
			AND     T_UUID.APPLICATION_KIND_NAME(+) = 'I00001'
			AND     T_UUID.PSM_CODE(+) = A.PSM_CODE
			AND     T_UUID.APPLICATION_PROPERTY_KIND_NAME(+) = 'INQY_LIMT_APLC_YN'
			) A
	;
	
	/* --------------- 작업로그( END ) --------------- */
	V_ROW_CNT := SQL%ROWCOUNT;
	COMMIT;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	
EXCEPTION
	WHEN OTHERS THEN
	ROLLBACK;
	/* --------------- 오류로그( END ) --------------- */
	V_SQLERRM := SQLERRM;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
	
END MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_100_010;
-------------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_100_020(
    I_WORKFLOW_RUN_ID	NUMBER		DEFAULT NULL, 	-- INFA 워크플로우실행ID
	I_SESSION_NAME		VARCHAR2	DEFAULT NULL,  	-- INFA 세션명
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- PARAMETER3
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8
)
AUTHID CURRENT_USER IS
	V_OWNER				VARCHAR2(100)  := NULL;
	V_TABLE_NAME		VARCHAR2(100)  := NULL;
	V_ROW_CNT			NUMBER         := 0;
	V_SQLERRM           VARCHAR2(1000) := NULL;
	
BEGIN
	/* --------------- 작업로그(START) --------------- */
	EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
	EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
	V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
	SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
	
	/* ------------------ 이행로직 ----------------------
	로직 설명
	
	[작업테이블]
	MAPKEY_TBL_APPLICATION_PROPERTY_100
	MAPKEY_TBL_APPLICATION_PROPERTY_900
	MAPKEY_TBL_APPLICATION_PROPERTY_FIX
	
	------------------------------------------------ */
	
	/* 2. TBL_APPLICATION_PROPERTY MAPKEY 생성 */
	INSERT /*+ APPEND PARALLEL(A 4) */ INTO MAPKEY_TBL_APPLICATION_PROPERTY_100 A
	WITH WT_UUID AS
	(
	SELECT  A.KIND     AS APPLICATION_KIND_NAME
		  , B.KIND     AS APPLICATION_PROPERTY_KIND_NAME
		  , B.PSM_CODE AS PSM_CODE
		  , B.UUID
		  , A.KIND_ID AS APPLICATION_KIND_ID
		  , B.KIND_ID AS APPLICATION_PROPERTY_KIND_ID
	FROM    MAPCODE_PSM A
		  , MAPCODE_PSM B
	WHERE   1=1
	AND     A.DOMAIN = 'Application Component'
	AND     A.UUID = B.PARENT_UUID
	)
	SELECT  /*+ PARALLEL(4) */
			CAST(ASIS_TAB                           AS VARCHAR2(40))  AS ASIS_TAB      
		  , CAST(ASIS_PK_COL1                       AS VARCHAR2(40))  AS ASIS_PK_COL1  
		  , CAST(ASIS_PK_COL2                       AS VARCHAR2(40))  AS ASIS_PK_COL2  
		  , CAST(ASIS_PK_COL3                       AS VARCHAR2(40))  AS ASIS_PK_COL3  
		  , CAST(ASIS_PK_COL4                       AS VARCHAR2(40))  AS ASIS_PK_COL4  
		  , CAST(ASIS_PK_COL_NM                     AS VARCHAR2(40))  AS ASIS_PK_COL_NM
		  , CAST(ASIS_DATA_COL                      AS VARCHAR2(40))  AS ASIS_DATA_COL 
		  , CAST(NULL                               AS NUMBER  (19))  AS ID
		  , CAST(SYSDATE                            AS TIMESTAMP   )  AS CREATE_AT
		  , CAST(CREATOR_ID                         AS VARCHAR2(100)) AS CREATOR_ID
		  , CAST(CREATOR_IP                         AS VARCHAR2(100)) AS CREATOR_IP
		  , CAST(LAST_MODIFIED_AT                   AS TIMESTAMP    ) AS LAST_MODIFIED_AT
		  , CAST(LAST_MODIFIER_ID                   AS VARCHAR2(100)) AS LAST_MODIFIER_ID
		  , CAST(NULL                               AS VARCHAR2(100)) AS LAST_MODIFIER_IP
		  , CAST(A.START_AT                         AS TIMESTAMP    ) AS BASE_TX_AT
		  , CAST(NULL                               AS VARCHAR2(255)) AS BASE_TX_NUMBER
		  , CAST(0                                  AS NUMBER  (  1)) AS IS_REPLACED
		  , CAST(A.START_AT                         AS TIMESTAMP    ) AS START_AT
		  , TO_TIMESTAMP(A.END_AT, 'YYYYMMDDHH24MISSFF3') AS END_AT
		  , CAST(NULL                               AS NUMBER(24,12)) AS AMOUNT
		  , CAST(NULL                               AS NUMBER  ( 10)) AS AMOUNT_SCALE
		  , CAST(NULL                               AS NUMBER(24,12)) AS BIGDECIMAL_VALUE
		  , CAST(BOOLEAN_VALUE                      AS NUMBER  (  1)) AS BOOLEAN_VALUE
		  , CAST(NULL                               AS NUMBER(24,12)) AS CURRENCY_AMOUNT
		  , CAST(NULL                               AS VARCHAR2( 10)) AS CURRENCY_AMOUNT_CURRENCY_CODE
		  , CAST(NULL                               AS NUMBER  ( 10)) AS CURRENCY_AMOUNT_SCALE
		  , CAST(NULL                               AS TIMESTAMP    ) AS DATETIME_VALUE
		  , CAST(NULL                               AS DATE         ) AS DATE_VALUE
		  , CAST(NULL                               AS VARCHAR2(255)) AS DESCRIPTION
		  , CAST(NULL                               AS FLOAT        ) AS DOUBLE_VALUE
		  , CAST(INTEGER_VALUE                      AS NUMBER  ( 10)) AS INTEGER_VALUE
		  , CAST(0                                  AS NUMBER  ( 38)) AS LOCK_NO
		  , CAST(NULL                               AS NUMBER  ( 19)) AS LONG_VALUE
		  , CAST(NULL                               AS NUMBER(24,12)) AS MEASURE_AMOUNT
		  , CAST(NULL                               AS VARCHAR2( 10)) AS MEASURE_AMOUNT_CODE
		  , CAST(NULL                               AS NUMBER  ( 10)) AS MEASURE_AMOUNT_SCALE
		  , CAST(PERCENTAGE_AMOUNT                  AS NUMBER(24,12)) AS PERCENTAGE_AMOUNT
		  , CAST(PERCENTAGE_AMOUNT_SCALE            AS NUMBER  ( 10)) AS PERCENTAGE_AMOUNT_SCALE
		  , CAST(STRING_VALUE                       AS VARCHAR2(255)) AS STRING_VALUE
		  , CAST(AP_ID                              AS NUMBER  ( 19)) AS AP_ID
		  , CAST(START_AT                           AS VARCHAR2(  8)) AS STRT_DATE
		  , CAST(END_AT                             AS VARCHAR2(  8)) AS END_DATE
		  , CAST(SPEC_UUID                          AS VARCHAR2(255)) AS SPEC_UUID
		  , CAST(APPLICATION_KIND_ID                AS VARCHAR2(255)) AS APPLICATION_KIND_ID
		  , CAST(APPLICATION_PROPERTY_KIND_ID       AS VARCHAR2(255)) AS APPLICATION_PROPERTY_KIND_ID
	FROM   (
			/* GrpNo=2 / TB_ISAPLCI2(POLICY) :: 계약부속정보 */
			SELECT  A.ASIS_TAB
				  , A.ASIS_PK_COL1
				  , A.ASIS_PK_COL2
				  , A.ASIS_PK_COL3
				  , A.ASIS_PK_COL4
				  , A.ASIS_PK_COL_NM
				  , A.ASIS_DATA_COL
				  , 'MIG_003'            AS CREATOR_ID
				  , A.ASIS_PK_COL1 || '^' || A.ASIS_PK_COL2 || '^' || A.ASIS_PK_COL3 || '^' || A.ASIS_PK_COL4 AS CREATOR_IP
				  , A.LAST_MODIFIED_AT
				  , A.LAST_MODIFIER_ID
				  , A.START_AT
				  , CASE WHEN A.END_AT = '99991231' THEN '99991231235959999'			
						 ELSE A.END_AT 			
					END AS END_AT	
				  , A.BOOLEAN_VALUE
				  , A.PERCENTAGE_AMOUNT
				  , A.PERCENTAGE_AMOUNT_SCALE
				  , A.INTEGER_VALUE
				  , A.STRING_VALUE
				  , A.AP_ID
				  , T_UUID.UUID     AS SPEC_UUID
				  , T_UUID.APPLICATION_KIND_ID          AS APPLICATION_KIND_ID
				  , T_UUID.APPLICATION_PROPERTY_KIND_ID AS APPLICATION_PROPERTY_KIND_ID
				  , A.PSM_CODE
			FROM   (			  
					SELECT  ASIS_TAB
						  , ASIS_PK_COL1
						  , ASIS_PK_COL2
						  , ASIS_PK_COL3
						  , ASIS_PK_COL4
						  , ASIS_PK_COL_NM
						  , COL1  AS ASIS_DATA_COL
						  , UPDATE_DATE  AS LAST_MODIFIED_AT
						  , MODIFIER_ID  AS LAST_MODIFIER_ID
						  , CASE COL1
							WHEN 'CMNC_RSCS_APLC_YN'          THEN 'I00001'
							WHEN 'REJT_MSGE_AGRM_YN'          THEN 'I00001'
							WHEN 'BNFC_DSGN_AGRM_YN'          THEN 'I00001'
	--                        WHEN 'RDR_PREM_ATMT_WTMN_PAYM_YN' THEN 'I00012'
							ELSE ''
							END                 AS APPLICATION_KIND_NAME          /* 신청정보유형코드 */
						  , COL1               AS APPLICATION_PROPERTY_KIND_NAME /* 신청정보속성상세유형코드 */
						  , STRT_DATE          AS START_AT
						  , END_DATE           AS END_AT		
						  , CASE WHEN COL1 IN ('CMNC_RSCS_APLC_YN','REJT_MSGE_AGRM_YN','BNFC_DSGN_AGRM_YN'/*,'RDR_PREM_ATMT_WTMN_PAYM_YN'*/) THEN DATA1 END AS BOOLEAN_VALUE
						  , NULL               AS PERCENTAGE_AMOUNT
						  , NULL               AS PERCENTAGE_AMOUNT_SCALE
						  , NULL               AS INTEGER_VALUE
						  , NULL               AS STRING_VALUE
						  , AP_ID               AS AP_ID
						  , PSM_CODE
					FROM   (
							SELECT  'TB_ISAPLCI2_P'    AS ASIS_TAB
								  , A.ASIS_PK_COL1     AS ASIS_PK_COL1
								  , A.ASIS_PK_COL2     AS ASIS_PK_COL2
								  , A.ASIS_PK_COL3     AS ASIS_PK_COL3
								  , A.ASIS_PK_COL4     AS ASIS_PK_COL4
								  , A.ASIS_PK_COL_NM   AS ASIS_PK_COL_NM
								  , B.LAST_CHMN_MPNO   AS MODIFIER_ID
								  , B.LAST_CHNG_DTTM   AS UPDATE_DATE
								  , CASE WHEN B.COMM_TRMT_RQYN = 'Y' THEN 1 ELSE 0 END AS CMNC_RSCS_APLC_YN            /* 통신해지신청여부          - BOOLEAN_VALUE */
								  , CASE WHEN B.REJT_MSG_AGYN  = 'Y' THEN 1 ELSE 0 END AS REJT_MSGE_AGRM_YN            /* 거절메시지동의여부        - BOOLEAN_VALUE */
								  , CASE WHEN B.BNFC_ASMT_AGYN = 'Y' THEN 1 ELSE 0 END AS BNFC_DSGN_AGRM_YN            /* 수익자지정동의여부        - BOOLEAN_VALUE */
	--                         	  , CASE WHEN B.SPPR_AUWD_PYOT = 'Y' THEN 1 ELSE 0 END AS RDR_PREM_ATMT_WTMN_PAYM_YN  /* 특약보험료자동인출납입여부- BOOLEAN_VALUE */
								  , ID                 AS AP_ID
								  , A.STRT_DATE        AS STRT_DATE
								  , A.END_DATE         AS END_DATE
								  , A.PSM_CODE
							FROM    MAPKEY_TBL_APPLICATION A
								  , TB_ISAPLCI2 B
							WHERE   1=1
							AND     A.ASIS_TAB = 'TB_ISAPLCTT'   -- MAPKEY_TBL_APPLICATION sql파일의 20191204수정사항 참조
							AND     A.ASIS_PK_COL1 = B.POLY_NO
							) A
					UNPIVOT (DATA1 FOR COL1 IN (CMNC_RSCS_APLC_YN, REJT_MSGE_AGRM_YN, BNFC_DSGN_AGRM_YN/*, RDR_PREM_ATMT_WTMN_PAYM_YN*/))
					) A
				  , WT_UUID T_UUID
			WHERE   1=1
			AND     T_UUID.APPLICATION_KIND_NAME(+) = A.APPLICATION_KIND_NAME
			AND     T_UUID.PSM_CODE(+) = A.PSM_CODE
			AND     T_UUID.APPLICATION_PROPERTY_KIND_NAME(+) = CASE WHEN SUBSTR(A.APPLICATION_PROPERTY_KIND_NAME,-6) = '_SCALE' 
																	THEN REPLACE(A.APPLICATION_PROPERTY_KIND_NAME,'_SCALE','')
																	ELSE A.APPLICATION_PROPERTY_KIND_NAME
															   END
			) A
	;
	
	/* --------------- 작업로그( END ) --------------- */
	V_ROW_CNT := SQL%ROWCOUNT;
	COMMIT;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	
EXCEPTION
	WHEN OTHERS THEN
	ROLLBACK;
	/* --------------- 오류로그( END ) --------------- */
	V_SQLERRM := SQLERRM;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
	
END MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_100_020;
----------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_100_030(
    I_WORKFLOW_RUN_ID	NUMBER		DEFAULT NULL, 	-- INFA 워크플로우실행ID
	I_SESSION_NAME		VARCHAR2	DEFAULT NULL,  	-- INFA 세션명
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- PARAMETER3
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8
)
AUTHID CURRENT_USER IS
	V_OWNER				VARCHAR2(100)  := NULL;
	V_TABLE_NAME		VARCHAR2(100)  := NULL;
	V_ROW_CNT			NUMBER         := 0;
	V_SQLERRM           VARCHAR2(1000) := NULL;
	
BEGIN
	/* --------------- 작업로그(START) --------------- */
	EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
	EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
	V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
	SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
	
	/* ------------------ 이행로직 ----------------------
	로직 설명
	
	[작업테이블]
	MAPKEY_TBL_APPLICATION_PROPERTY_100
	MAPKEY_TBL_APPLICATION_PROPERTY_900
	MAPKEY_TBL_APPLICATION_PROPERTY_FIX
	
	------------------------------------------------ */
	
	/* 2. TBL_APPLICATION_PROPERTY MAPKEY 생성 */
	INSERT /*+ APPEND PARALLEL(A 4) */ INTO MAPKEY_TBL_APPLICATION_PROPERTY_100 A
	WITH WT_UUID AS
	(
	SELECT  A.KIND     AS APPLICATION_KIND_NAME
		  , B.KIND     AS APPLICATION_PROPERTY_KIND_NAME
		  , B.PSM_CODE AS PSM_CODE
		  , B.UUID
		  , A.KIND_ID AS APPLICATION_KIND_ID
		  , B.KIND_ID AS APPLICATION_PROPERTY_KIND_ID
	FROM    MAPCODE_PSM A
		  , MAPCODE_PSM B
	WHERE   1=1
	AND     A.DOMAIN = 'Application Component'
	AND     A.UUID = B.PARENT_UUID
	)
	SELECT  /*+ PARALLEL(4) */
			CAST(ASIS_TAB                           AS VARCHAR2(40))  AS ASIS_TAB      
		  , CAST(ASIS_PK_COL1                       AS VARCHAR2(40))  AS ASIS_PK_COL1  
		  , CAST(ASIS_PK_COL2                       AS VARCHAR2(40))  AS ASIS_PK_COL2  
		  , CAST(ASIS_PK_COL3                       AS VARCHAR2(40))  AS ASIS_PK_COL3  
		  , CAST(ASIS_PK_COL4                       AS VARCHAR2(40))  AS ASIS_PK_COL4  
		  , CAST(ASIS_PK_COL_NM                     AS VARCHAR2(40))  AS ASIS_PK_COL_NM
		  , CAST(ASIS_DATA_COL                      AS VARCHAR2(40))  AS ASIS_DATA_COL 
		  , CAST(NULL                               AS NUMBER  (19))  AS ID
		  , CAST(SYSDATE                            AS TIMESTAMP   )  AS CREATE_AT
		  , CAST(CREATOR_ID                         AS VARCHAR2(100)) AS CREATOR_ID
		  , CAST(CREATOR_IP                         AS VARCHAR2(100)) AS CREATOR_IP
		  , CAST(LAST_MODIFIED_AT                   AS TIMESTAMP    ) AS LAST_MODIFIED_AT
		  , CAST(LAST_MODIFIER_ID                   AS VARCHAR2(100)) AS LAST_MODIFIER_ID
		  , CAST(NULL                               AS VARCHAR2(100)) AS LAST_MODIFIER_IP
		  , CAST(A.START_AT                         AS TIMESTAMP    ) AS BASE_TX_AT
		  , CAST(NULL                               AS VARCHAR2(255)) AS BASE_TX_NUMBER
		  , CAST(0                                  AS NUMBER  (  1)) AS IS_REPLACED
		  , CAST(A.START_AT                         AS TIMESTAMP    ) AS START_AT
		  , TO_TIMESTAMP(A.END_AT, 'YYYYMMDDHH24MISSFF3') AS END_AT
		  , CAST(NULL                               AS NUMBER(24,12)) AS AMOUNT
		  , CAST(NULL                               AS NUMBER  ( 10)) AS AMOUNT_SCALE
		  , CAST(NULL                               AS NUMBER(24,12)) AS BIGDECIMAL_VALUE
		  , CAST(BOOLEAN_VALUE                      AS NUMBER  (  1)) AS BOOLEAN_VALUE
		  , CAST(NULL                               AS NUMBER(24,12)) AS CURRENCY_AMOUNT
		  , CAST(NULL                               AS VARCHAR2( 10)) AS CURRENCY_AMOUNT_CURRENCY_CODE
		  , CAST(NULL                               AS NUMBER  ( 10)) AS CURRENCY_AMOUNT_SCALE
		  , CAST(NULL                               AS TIMESTAMP    ) AS DATETIME_VALUE
		  , CAST(NULL                               AS DATE         ) AS DATE_VALUE
		  , CAST(NULL                               AS VARCHAR2(255)) AS DESCRIPTION
		  , CAST(NULL                               AS FLOAT        ) AS DOUBLE_VALUE
		  , CAST(INTEGER_VALUE                      AS NUMBER  ( 10)) AS INTEGER_VALUE
		  , CAST(0                                  AS NUMBER  ( 38)) AS LOCK_NO
		  , CAST(NULL                               AS NUMBER  ( 19)) AS LONG_VALUE
		  , CAST(NULL                               AS NUMBER(24,12)) AS MEASURE_AMOUNT
		  , CAST(NULL                               AS VARCHAR2( 10)) AS MEASURE_AMOUNT_CODE
		  , CAST(NULL                               AS NUMBER  ( 10)) AS MEASURE_AMOUNT_SCALE
		  , CAST(PERCENTAGE_AMOUNT                  AS NUMBER(24,12)) AS PERCENTAGE_AMOUNT
		  , CAST(PERCENTAGE_AMOUNT_SCALE            AS NUMBER  ( 10)) AS PERCENTAGE_AMOUNT_SCALE
		  , CAST(STRING_VALUE                       AS VARCHAR2(255)) AS STRING_VALUE
		  , CAST(AP_ID                              AS NUMBER  ( 19)) AS AP_ID
		  , CAST(START_AT                           AS VARCHAR2(  8)) AS STRT_DATE
		  , CAST(END_AT                             AS VARCHAR2(  8)) AS END_DATE
		  , CAST(SPEC_UUID                          AS VARCHAR2(255)) AS SPEC_UUID
		  , CAST(APPLICATION_KIND_ID                AS VARCHAR2(255)) AS APPLICATION_KIND_ID
		  , CAST(APPLICATION_PROPERTY_KIND_ID       AS VARCHAR2(255)) AS APPLICATION_PROPERTY_KIND_ID
	FROM   (
			/* GrpNo=3 / TB_ISAPLCI2(COVERAGE) :: 계약부속정보 */
			SELECT  A.ASIS_TAB
				  , A.ASIS_PK_COL1
				  , A.ASIS_PK_COL2
				  , A.ASIS_PK_COL3
				  , A.ASIS_PK_COL4
				  , A.ASIS_PK_COL_NM
				  , A.ASIS_DATA_COL
				  , 'MIG_004'            AS CREATOR_ID
				  , A.ASIS_PK_COL1 || '^' || A.ASIS_PK_COL2 || '^' || A.ASIS_PK_COL3 || '^' || A.ASIS_PK_COL4 AS CREATOR_IP
				  , A.LAST_MODIFIED_AT 
				  , A.LAST_MODIFIER_ID
				  , A.START_AT
				  , CASE WHEN A.END_AT = '99991231' THEN '99991231235959999'			
						 ELSE A.END_AT 			
					END AS END_AT	
				  , A.BOOLEAN_VALUE
				  , A.PERCENTAGE_AMOUNT
				  , A.PERCENTAGE_AMOUNT_SCALE
				  , A.INTEGER_VALUE
				  , A.STRING_VALUE
				  , A.AP_ID
				  , T_UUID.UUID    AS SPEC_UUID
				  , T_UUID.APPLICATION_KIND_ID          AS APPLICATION_KIND_ID
				  , T_UUID.APPLICATION_PROPERTY_KIND_ID AS APPLICATION_PROPERTY_KIND_ID
				  , A.PSM_CODE
			FROM   (
					SELECT  ASIS_TAB
						  , ASIS_PK_COL1
						  , ASIS_PK_COL2
						  , ASIS_PK_COL3
						  , ASIS_PK_COL4
						  , ASIS_PK_COL_NM
						  , COL1        AS ASIS_DATA_COL
						  , UPDATE_DATE AS LAST_MODIFIED_AT 
						  , MODIFIER_ID AS LAST_MODIFIER_ID
						  , CASE COL1
								 WHEN 'ATMT_REJN_AGRM_YN'              THEN 'I00010'
	--                             WHEN 'STTP_ACVL_ATMT_TRNS_YN'         THEN 'I00002'
	--                             WHEN 'AUTO_CNVR_OPTN_GOAL_ENRT'       THEN 'I00002'
	--                             WHEN 'AUTO_CNVR_OPTN_GOAL_ENRT_SCALE' THEN 'I00002' -- 미존재
								 ELSE ''
							END                AS APPLICATION_KIND_NAME          /* 신청정보유형코드 */
						  , CASE WHEN COL1 = 'AUTO_CVOT_TGPR_SCALE' THEN 'AUTO_CNVR_OPTN_GOAL_ENRT' ELSE COL1 END AS APPLICATION_PROPERTY_KIND_NAME /* 신청정보속성상세유형코드 */
						  , STRT_DATE          AS START_AT
						  , END_DATE           AS END_AT
						  , CASE WHEN COL1 IN ('ATMT_REJN_AGRM_YN'/*,'STTP_ACVL_ATMT_TRNS_YN'*/) THEN DATA1 END AS BOOLEAN_VALUE
	--                 	  , CASE WHEN COL1 = 'AUTO_CNVR_OPTN_GOAL_ENRT'                      THEN DATA1 END AS PERCENTAGE_AMOUNT
	--                 	  , CASE WHEN COL1 = 'AUTO_CNVR_OPTN_GOAL_ENRT_SCALE'                THEN DATA1 END AS PERCENTAGE_AMOUNT_SCALE
						  , '' AS PERCENTAGE_AMOUNT
						  , '' AS PERCENTAGE_AMOUNT_SCALE
						  , NULL  AS INTEGER_VALUE
						  , NULL               AS STRING_VALUE
						  , AP_ID
						  , PSM_CODE
					FROM   (
							SELECT  'TB_ISAPLCI2_C'    AS ASIS_TAB
								  , A.ASIS_PK_COL1     AS ASIS_PK_COL1
								  , A.ASIS_PK_COL2     AS ASIS_PK_COL2
								  , A.ASIS_PK_COL3     AS ASIS_PK_COL3
								  , A.ASIS_PK_COL4     AS ASIS_PK_COL4
								  , A.ASIS_PK_COL_NM   AS ASIS_PK_COL_NM
								  , B.LAST_CHMN_MPNO   AS MODIFIER_ID
								  , B.LAST_CHNG_DTTM   AS UPDATE_DATE
								  , CASE WHEN B.AUTO_REJN_AGYN = 'Y' THEN 1 ELSE 0 END AS ATMT_REJN_AGRM_YN              /* 자동재가입동의여부       - BOOLEAN_VALUE           */
	--                          	  , CASE WHEN B.STTP_ACAT_ATYN = 'Y' THEN 1 ELSE 0 END AS STTP_ACVL_ATMT_TRNS_YN         /* 주식형적립금자동이전여부 - BOOLEAN_VALUE           */
	--                          	  , B.AUTO_CVOT_TGPR                                      AS AUTO_CNVR_OPTN_GOAL_ENRT       /* 오토전환옵션목표수익률   - PERCENTAGE_AMOUNT       */
	--                          	  , LENGTH(MOD(B.AUTO_CVOT_TGPR,1))-1                   AS AUTO_CNVR_OPTN_GOAL_ENRT_SCALE /* 오토전환옵션목표수익률   - PERCENTAGE_AMOUNT_SCALE */
								  , ID                 AS AP_ID
								  , A.STRT_DATE
								  , A.END_DATE
								  , A.PSM_CODE
	--							  , KIND_ID
							 FROM   MAPKEY_TBL_APPLICATION A
								  , TB_ISAPLCI2 B
							 WHERE  1=1
							 AND A.ASIS_TAB = 'TB_ISAPLCI2_C'
							 AND A.ASIS_PK_COL1 = B.POLY_NO
							 ) A
					UNPIVOT (DATA1 FOR COL1 IN (ATMT_REJN_AGRM_YN/*, STTP_ACVL_ATMT_TRNS_YN, AUTO_CNVR_OPTN_GOAL_ENRT, AUTO_CNVR_OPTN_GOAL_ENRT_SCALE*/))
					) A
				  , WT_UUID T_UUID
			WHERE   1 =1 
			AND     T_UUID.APPLICATION_KIND_NAME(+) = A.APPLICATION_KIND_NAME
			AND     T_UUID.PSM_CODE(+) = A.PSM_CODE
			AND     T_UUID.APPLICATION_PROPERTY_KIND_NAME(+) = CASE WHEN SUBSTR(A.APPLICATION_PROPERTY_KIND_NAME,-6) = '_SCALE' 
																	THEN REPLACE(A.APPLICATION_PROPERTY_KIND_NAME,'_SCALE','')
																	ELSE A.APPLICATION_PROPERTY_KIND_NAME
															   END   
			) A
	;
	
	/* --------------- 작업로그( END ) --------------- */
	V_ROW_CNT := SQL%ROWCOUNT;
	COMMIT;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	
EXCEPTION
	WHEN OTHERS THEN
	ROLLBACK;
	/* --------------- 오류로그( END ) --------------- */
	V_SQLERRM := SQLERRM;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
	
END MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_100_030;
------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_900_010(
    I_WORKFLOW_RUN_ID	NUMBER		DEFAULT NULL, 	-- INFA 워크플로우실행ID
	I_SESSION_NAME		VARCHAR2	DEFAULT NULL,  	-- INFA 세션명
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- PARAMETER3
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8
)
AUTHID CURRENT_USER IS
	V_OWNER				VARCHAR2(100)  := NULL;
	V_TABLE_NAME		VARCHAR2(100)  := NULL;
	V_ROW_CNT			NUMBER         := 0;
	V_SQLERRM           VARCHAR2(1000) := NULL;
	
BEGIN
	/* --------------- 작업로그(START) --------------- */
	EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
	EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
	V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
	SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
	
	/* ------------------ 이행로직 ----------------------
	로직 설명
	
	[작업테이블]
	MAPKEY_TBL_APPLICATION_PROPERTY_100
	MAPKEY_TBL_APPLICATION_PROPERTY_900
	MAPKEY_TBL_APPLICATION_PROPERTY_FIX
	
	------------------------------------------------ */
	
	/* 2. TBL_APPLICATION_PROPERTY MAPKEY 생성 */
	EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_APPLICATION_PROPERTY_900';
	INSERT  /*+ APPEND PARALLEL(A 4) */ INTO MAPKEY_TBL_APPLICATION_PROPERTY_900 A
	SELECT  /*+ FULL(A) FULL(B) PARALLEL(A 4) PARALLEL(B 4) */
			A.ASIS_TAB
		  , A.ASIS_PK_COL1
		  , A.ASIS_PK_COL2
		  , A.ASIS_PK_COL3
		  , A.ASIS_PK_COL4
		  , A.ASIS_PK_COL_NM
		  , A.ASIS_DATA_COL
		  , NVL(B.ID, (SELECT NVL(MAX(ID),100000000000) FROM MAPKEY_TBL_APPLICATION_PROPERTY_FIX) +
			ROW_NUMBER() OVER(ORDER BY B.ID, A.ASIS_TAB, A.ASIS_PK_COL1, A.ASIS_PK_COL2, A.ASIS_PK_COL3, A.ASIS_PK_COL4, A.ASIS_PK_COL_NM, A.ASIS_DATA_COL)) AS ID
		  , A.CREATE_AT
		  , A.CREATOR_ID
		  , A.CREATOR_IP
		  , A.LAST_MODIFIED_AT
		  , A.LAST_MODIFIER_ID
		  , A.LAST_MODIFIER_IP
		  , A.BASE_TX_AT
		  , NVL(B.ID, (SELECT NVL(MAX(ID),100000000000) FROM MAPKEY_TBL_APPLICATION_PROPERTY_FIX) +
			ROW_NUMBER() OVER(ORDER BY B.ID, A.ASIS_TAB, A.ASIS_PK_COL1, A.ASIS_PK_COL2, A.ASIS_PK_COL3, A.ASIS_PK_COL4, A.ASIS_PK_COL_NM, A.ASIS_DATA_COL)) AS BASE_TX_NUMBER
		  , A.IS_REPLACED
		  , A.START_AT
		  , A.END_AT
		  , A.LOCK_NO
		  , A.AMOUNT
		  , A.AMOUNT_SCALE
		  , A.BIGDECIMAL_VALUE
		  , A.BOOLEAN_VALUE
		  , A.CURRENCY_AMOUNT
		  , A.CURRENCY_AMOUNT_CURRENCY_CODE
		  , A.CURRENCY_AMOUNT_SCALE
		  , A.DATETIME_VALUE
		  , A.DATE_VALUE
		  , A.DESCRIPTION
		  , A.INTEGER_VALUE
		  , A.PERCENTAGE_AMOUNT
		  , A.PERCENTAGE_AMOUNT_SCALE
		  , A.SPEC_UUID
		  , A.STRING_VALUE
		  , A.AP_ID
		  , A.APPLICATION_KIND_ID
		  , A.APPLICATION_PROPERTY_KIND_ID
	FROM    MAPKEY_TBL_APPLICATION_PROPERTY_100 A
		  , MAPKEY_TBL_APPLICATION_PROPERTY_FIX B
	WHERE   1 = 1
	AND     A.ASIS_TAB       = B.ASIS_TAB      (+)
	AND     A.ASIS_PK_COL1   = B.ASIS_PK_COL1  (+)
	AND     A.ASIS_PK_COL2   = B.ASIS_PK_COL2  (+)
	AND     A.ASIS_PK_COL3   = B.ASIS_PK_COL3  (+)
	AND     A.ASIS_PK_COL4   = B.ASIS_PK_COL4  (+)
	AND     A.ASIS_PK_COL_NM = B.ASIS_PK_COL_NM(+)
	AND     A.ASIS_DATA_COL  = B.ASIS_DATA_COL (+)
	AND     A.SPEC_UUID IS NOT NULL
	;
	
	/* --------------- 작업로그( END ) --------------- */
	V_ROW_CNT := SQL%ROWCOUNT;
	COMMIT;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	
EXCEPTION
	WHEN OTHERS THEN
	ROLLBACK;
	/* --------------- 오류로그( END ) --------------- */
	V_SQLERRM := SQLERRM;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
	
END MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_900_010;
-----------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_FIX_010(
    I_WORKFLOW_RUN_ID	NUMBER		DEFAULT NULL, 	-- INFA 워크플로우실행ID
	I_SESSION_NAME		VARCHAR2	DEFAULT NULL,  	-- INFA 세션명
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- PARAMETER3
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8
)
AUTHID CURRENT_USER IS
	V_OWNER				VARCHAR2(100)  := NULL;
	V_TABLE_NAME		VARCHAR2(100)  := NULL;
	V_ROW_CNT			NUMBER         := 0;
	V_SQLERRM           VARCHAR2(1000) := NULL;
	
BEGIN
	/* --------------- 작업로그(START) --------------- */
	EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
	EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
	V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
	SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
	
	/* ------------------ 이행로직 ----------------------
	로직 설명
	
	[작업테이블]
	MAPKEY_TBL_APPLICATION_PROPERTY_100
	MAPKEY_TBL_APPLICATION_PROPERTY_900
	MAPKEY_TBL_APPLICATION_PROPERTY_FIX
	
	------------------------------------------------ */
	
	/* 3. MAPKEY 고정 */
	EXECUTE IMMEDIATE 'TRUNCATE TABLE MAPKEY_TBL_APPLICATION_PROPERTY_FIX';
	INSERT  /*+ APPEND PARALLEL(A 4) */ INTO MAPKEY_TBL_APPLICATION_PROPERTY_FIX A
	SELECT  /*+ FULL(A) PARALLEL(A 4) */
	        ASIS_TAB
	      , ASIS_PK_COL1
		  , ASIS_PK_COL2
		  , ASIS_PK_COL3
		  , ASIS_PK_COL4
		  , ASIS_PK_COL_NM
		  , ASIS_DATA_COL
		  , CREATOR_ID
		  , ID
	FROM    MAPKEY_TBL_APPLICATION_PROPERTY_900 A
	;
	
	/* --------------- 작업로그( END ) --------------- */
	V_ROW_CNT := SQL%ROWCOUNT;
	COMMIT;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	
EXCEPTION
	WHEN OTHERS THEN
	ROLLBACK;
	/* --------------- 오류로그( END ) --------------- */
	V_SQLERRM := SQLERRM;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
	
END MIG_PRC_MAPKEY_TBL_APPLICATION_PROPERTY_FIX_010;
----------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_ICMCTTCT10_011_TB_NCUDWRQT ---
(
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL      -- INFA 워크플로우실행ID  추가
  , I_SESSION_NAME     VARCHAR2  DEFAULT NULL      -- INFA 세션명         추가
  , I_PARAM3           VARCHAR2  DEFAULT NULL      -- 이행구분(사전이행, 본이행)
  , I_PARAM4           VARCHAR2  DEFAULT NULL 
  , I_PARAM5           VARCHAR2  DEFAULT NULL 
  , I_PARAM6           VARCHAR2  DEFAULT NULL 
  , I_PARAM7           VARCHAR2  DEFAULT NULL 
  , I_PARAM8           VARCHAR2  DEFAULT NULL     
)
IS
        V_JOB_SEQ    NUMBER;
        V_PGM_NAME   VARCHAR2(100) := 'TB_NCUDWRQT_ADDR';  ---주소 
        V_CNT        NUMBER;
        V_ERR_CNT    NUMBER;
		V_BAS_DT     DATE ; 
		V_OWNER      VARCHAR2(20) ;                      -- 추가   		
BEGIN

    V_BAS_DT      := SYSDATE;      

    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';
    EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

	MIG_PRC_TRUNCATE('TB_NCUDWRQT_ADDR_001');
	MIG_PRC_TRUNCATE('TB_NCUDWRQT_ADDR');
	
------------------------------------------------------------------------
	INSERT /*+ APPEND */ INTO TB_NCUDWRQT_ADDR_001
	SELECT /*+ PARALLEL (4) */ 
		   DISTINCT 
		   A.DTAL_ADDR 
		 , B.ADDR_ENC_U8 
		 , DBSEC.DEC_ADDR(B.ADDR_ENC_U8) DEC_ADDR 
	  FROM TB_NCUDWRQT A 
		 , MAPKEY_ADDR_ENC B 
	WHERE A.DTAL_ADDR IS NOT NULL 
	  AND A.DTAL_ADDR = B.ADDR_ENC_KR (+) 
	;
	
	COMMIT; 

	INSERT /*+ APPEND */ INTO TB_NCUDWRQT_ADDR 
	SELECT DTAL_ADDR
		 , DEC_ADDR
		 , TRIM(SUBSTR(DEC_ADDR, 1, S1 -1)) AS ZIP_01
		 , TRIM(SUBSTR(DEC_ADDR, S1 + 1, S2 - S1 - 1)) AS ZIP_02 
		 , TRIM(SUBSTR(DEC_ADDR, S2 + 1, S3 - S2 - 1)) AS BASE_ADDR 
		 , DBSEC.ENC_ADDR(TRIM(SUBSTR(DEC_ADDR, S3 + 1)), 'select') AS ENC_DTAL_ADDR 
	  FROM (
			SELECT A.* 
				 , INSTR(DEC_ADDR, '/') AS S1
				 , INSTR(DEC_ADDR, '/', 1, 2) AS S2
				 , INSTR(DEC_ADDR, '/', 1, 3) AS S3 
			  FROM TB_NCUDWRQT_ADDR_001 A
		   )
     WHERE LENGTH(TRIM(SUBSTR(DEC_ADDR, 1, S1 -1))) <= 10
	; 	
	
------------------------------------------------------------------------
    V_CNT := SQL%ROWCOUNT;  

  
	SELECT NVL((SELECT TABLE_OWNER FROM USER_SYNONYMS WHERE  SYNONYM_NAME =  V_PGM_NAME), (SELECT USERNAME FROM USER_USERS) )
	INTO V_OWNER
	FROM DUAL
	;	--추가: OWNER 자동할당 (1.SYNONYM 기준, 2.접속 OWNER 기준)
	
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER , V_PGM_NAME,  V_CNT, 0,  NULL);  --추가 

    COMMIT;

	
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
--    PROC_MIG_LOG(V_BAS_DT, V_PGM_NAME, SYSDATE, 'END', V_CNT, SQLCODE, SQLERRM );
	
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER , V_PGM_NAME, 0, 0, SQLERRM);	--추가
	
	COMMIT;

    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

    RAISE_APPLICATION_ERROR(-20001, 'JOB FAILED');  -- INFA FAIL처리
END;
------------------------
create or replace PROCEDURE       MIG_PRC_MAPKEY_TBL_PAYMENT_COMP_010(
    I_WORKFLOW_RUN_ID	NUMBER		DEFAULT NULL, 	-- INFA 워크플로우실행ID
	I_SESSION_NAME		VARCHAR2	DEFAULT NULL,  	-- INFA 세션명
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- PARAMETER3
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8
)
AUTHID CURRENT_USER IS
	V_OWNER				VARCHAR2(100)  := NULL;
	V_TABLE_NAME		VARCHAR2(100)  := NULL;
	V_ROW_CNT			NUMBER         := 0;
	V_SQLERRM           VARCHAR2(1000) := NULL;
	
BEGIN
	/* --------------- 작업로그(START) --------------- */
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
	EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
	V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
	SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
	
	/* ------------------ 프로그램설명 ----------------------
	로직 설명
	
	[작업테이블]
	MAPKEY_TBL_APPLICATION_PROPERTY_100
	MAPKEY_TBL_APPLICATION_PROPERTY_900
	MAPKEY_TBL_APPLICATION_PROPERTY_FIX
	
	------------------------------------------------ */
	
	/* ------------------ 이행로직 -------------------- */

/* 2. TBL_PAYMENT_COMP MAPKEY 생성 */
--TRUNCATE TABLE MAPKEY_TBL_PAYMENT_COMP;
MIG_PRC_TRUNCATE('MAPKEY_TBL_PAYMENT_COMP');
INSERT /*+ APPEND PARALLEL(T,4) */ INTO MAPKEY_TBL_PAYMENT_COMP T
WITH WI_MAPKEY_FIX AS
(
SELECT MAX(A.ID)                                                                                    AS ID
FROM   MAPKEY_TBL_PAYMENT_COMP_FIX A
)
SELECT 
       A.ASIS_TAB
     , A.ASIS_PK_COL1
     , A.ASIS_PK_COL2
     , A.ASIS_PK_COL3
     , A.ASIS_PK_COL4
     , A.ASIS_PK_COL5
     , A.POLY_NO
     , A.VALD_DVSN_CODE
     , NVL(B.ID, 100000000000) + ROWNUM                                                             AS ID
     , A.PAYMENT_ID                                                                                 AS PAYMENT_ID
     , A.RCST_ITEM_DVSN
FROM  (
       SELECT /*+ PARALLEL(A,4) */
              A.ASIS_TAB
            , A.ASIS_PK_COL1
            , A.ASIS_PK_COL2
            , A.ASIS_PK_COL3
            , A.ASIS_PK_COL4
            , A.ASIS_PK_COL5
            , A.POLY_NO
            , A.VALD_DVSN_CODE
            , A.ID
            , A.PAYMENT_ID
            , A.RCST_ITEM_DVSN
       FROM   MAPKEY_TBL_PAYMENT_COMP_100 A
       WHERE  1=1
       AND    A.ID IS NULL
       ORDER BY A.ASIS_PK_COL1, A.ASIS_PK_COL2, A.ASIS_PK_COL3
      ) A
     , WI_MAPKEY_FIX  B
WHERE  1=1
UNION ALL
SELECT /*+ PARALLEL(A,4) */
       A.ASIS_TAB
     , A.ASIS_PK_COL1
     , A.ASIS_PK_COL2
     , A.ASIS_PK_COL3
     , A.ASIS_PK_COL4
     , A.ASIS_PK_COL5
     , A.POLY_NO
     , A.VALD_DVSN_CODE
     , A.ID
     , A.PAYMENT_ID
     , A.RCST_ITEM_DVSN
FROM   MAPKEY_TBL_PAYMENT_COMP_100 A
WHERE  1=1
AND    A.ID IS NOT NULL
;

	/* --------------- 작업로그( END ) --------------- */
	V_ROW_CNT := SQL%ROWCOUNT;
	COMMIT;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	
EXCEPTION
	WHEN OTHERS THEN
	ROLLBACK;
	/* --------------- 오류로그( END ) --------------- */
	V_SQLERRM := SQLERRM;
	MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
	EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
	EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
	
END MIG_PRC_MAPKEY_TBL_PAYMENT_COMP_010;
---------------------
create or replace PROCEDURE             MIG_PRC_MAPKEY_TBL_SVPSUPPSMT (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;

BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, 21);
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
   
   /* ------------------ 이행로직 -------------------- */

MIG_PRC_TRUNCATE('MAPKEY_TBL_SVPSUPPSMT');

INSERT /*+ APPEND PARALLEL(T 4) */ INTO MAPKEY_TBL_SVPSUPPSMT T
(
       ASIS_TAB       
     , POLY_NO        
     , PAYM_RSVT_SQNO 
     , OTPY_SSPD_SUID 
     , CRET_DTTM      
)
/*MAPKEY_TBL_SVPSUPPSMT*/
SELECT /*+ FULL(A) PARALLEL(A 4) */
       'TB_PAPAYSPS'         AS ASIS_TAB       /* ASIS_TAB         */
     , POLY_NO               AS POLY_NO        /* 증권번호         */
     , PAYM_RSVT_SQNO        AS PAYM_RSVT_SQNO /* 지급보류일련번호 */
     , ROWNUM + 100000000000 AS OTPY_SSPD_SUID /* 지급보류SUID     */
     , SYSDATE               AS CRET_DTTM      /* 생성일시         */
  FROM TB_PAPAYSPS A /* 지급보류 */
;

   /* --------------- 작업로그( END ) --------------- */
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   
EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   /* --------------- 오류로그( END ) --------------- */
   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
   
END MIG_PRC_MAPKEY_TBL_SVPSUPPSMT;
--------------------
create or replace PROCEDURE       PROC_SUID_CARD_NO
(
  P_TBL_NM   IN VARCHAR2,
  P_COL_NM   IN VARCHAR2,
  P_MIG_TYPE IN VARCHAR2,
  P_WHERE    IN VARCHAR2
)  
IS  
	
	V_SQL VARCHAR2(4000); 

BEGIN 	

	V_SQL :=          'INSERT INTO /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 4) */   MAPKEY_TBL_ICMFNFCC10_001 A  ' ;   
	V_SQL := V_SQL || '	( ' ; 
	V_SQL := V_SQL || '	  CRDT_CARD_NO ' ; 
	V_SQL := V_SQL || '	, JOB_DATE            ' ; 		
	V_SQL := V_SQL || '	, MIG_TYPE            ' ; 
	V_SQL := V_SQL || '	, SRC_INFO            ' ; 
	V_SQL := V_SQL || '	 )	 '; 
	V_SQL := V_SQL || 'SELECT /*+ PARALLEL(X 8) */ ' ;          
	V_SQL := V_SQL || '	  ' || P_COL_NM || '                               AS CRDT_CARD_NO                      /* 신용카드번호 */   '; 
	V_SQL := V_SQL || '	,   SYSDATE                                        AS JOB_DATE                        '; 	
	V_SQL := V_SQL || ',  '''|| P_MIG_TYPE || '''                          AS MIG_TYPE	 '; 
	V_SQL := V_SQL || ','''|| P_TBL_NM ||'.'||P_COL_NM || '''              AS SRC_INFO	  '; 
	V_SQL := V_SQL || 'FROM '|| P_TBL_NM || ' X ' ; 
	V_SQL := V_SQL || 'WHERE 1=1   '; 
	V_SQL := V_SQL ||  P_WHERE ;
	V_SQL := V_SQL || 'GROUP BY '|| P_COL_NM ;

        EXECUTE IMMEDIATE V_SQL;
		

		COMMIT; 
		


EXCEPTION 
    WHEN others THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR_CODE: ' || sqlcode);
	  DBMS_OUTPUT.PUT_LINE('ERROR_MSG: ' ||  SUBSTR(sqlerrm, 1, 200)); 
	  DBMS_OUTPUT.PUT_LINE('ERROR_SQL: ' || V_SQL);

      RETURN; 
END;
